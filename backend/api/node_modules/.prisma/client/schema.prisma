generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                  String          @unique
  passwordHash           String          @map("password_hash")
  role                   UserRole
  isActive               Boolean         @default(true) @map("is_active")
  createdAt              DateTime        @default(now()) @map("created_at")
  updatedAt              DateTime        @updatedAt @map("updated_at")
  structureId            Int?            @map("structure_id")
  demandesStage          StageRequest[]
  dpaf                   DPAF?
  journalActions         JournalAction[]
  messagesRecus          Message[]       @relation("destinataire")
  messagesSent           Message[]       @relation("expediteur")
  notifications          Notification[]
  profile                Profile?
  stagiaire              Stagiaire?
  structure              Structure?      @relation(fields: [structureId], references: [id])
  tuteur                 Tuteur?
  evaluationsAsTuteur    Evaluation[]    @relation("TuteurEvaluations")
  evaluationsAsStagiaire Evaluation[]    @relation("StagiaireEvaluations")
  documents              Document[]
  notifMessages          Boolean?        @default(true)
  notifEvaluation        Boolean?        @default(true)
  notifRapports          Boolean?        @default(true)

  @@map("users")
}

model Profile {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @unique @map("user_id") @db.Uuid
  nom       String
  prenom    String
  telephone String?
  avatar    String?
  birthDate DateTime?
  school    String?
  major     String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model DPAF {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @unique @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dpaf")
}

model Structure {
  id             Int            @id @default(autoincrement())
  nomStructure   String         @unique
  sigle          String?        @unique
  type           String? // 'directionnelle' ou 'technique'
  isDeleted      Boolean        @default(false) @map("is_deleted")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  parentId       Int?           @map("parent_id")
  demandesStages DemandeStage[] @relation("structure_cible")
  stages         Stage[]
  stagiaires     Stagiaire[]
  parent         Structure?     @relation("StructureHierarchy", fields: [parentId], references: [id])
  children       Structure[]    @relation("StructureHierarchy")
  users          User[]
  tuteurs        Tuteur[]
  services       Service[]

  @@map("structures")
}

model Tuteur {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String        @unique @map("user_id") @db.Uuid
  structureId Int?          @map("structure_id")
  serviceId   Int?          @map("service_id")
  stages      Stage[]
  stagiaires  Stagiaire[]
  themes      ThemeTuteur[]
  structure   Structure?    @relation(fields: [structureId], references: [id])
  service     Service?      @relation(fields: [serviceId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tuteurs")
}

model Stagiaire {
  id                  String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String         @unique @map("user_id") @db.Uuid
  structureAffecteeId Int?           @map("structure_affectee_id")
  serviceAffecteId    Int?           @map("service_affecte_id")
  tuteurId            String?        @map("tuteur_id") @db.Uuid
  demandesStages      DemandeStage[]
  stages              Stage[]
  structure           Structure?     @relation(fields: [structureAffecteeId], references: [id])
  service             Service?       @relation(fields: [serviceAffecteId], references: [id])
  tuteur              Tuteur?        @relation(fields: [tuteurId], references: [userId])
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stagiaires")
}

model DemandeStage {
  id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stagiaireId      String          @map("stagiaire_id") @db.Uuid
  structureCibleId Int?            @map("structure_cible_id")
  statut           StatutDemande   @default(en_attente)
  dateDebut        DateTime        @map("date_debut")
  dateFin          DateTime        @map("date_fin")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  details          Json?
  stagiaire        Stagiaire       @relation(fields: [stagiaireId], references: [userId], onDelete: Cascade)
  structureCible   Structure?      @relation("structure_cible", fields: [structureCibleId], references: [id])
  journalActions   JournalAction[] @relation("demande_stage_actions")
  stage            Stage?

  @@map("demandes_stages")
}

model Stage {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  demandeStageId String       @unique @map("demande_stage_id") @db.Uuid
  tuteurId       String       @map("tuteur_id") @db.Uuid
  structureId    Int          @map("structure_id")
  stagiaireId    String       @map("stagiaire_id") @db.Uuid
  dateDebut      DateTime     @map("date_debut")
  dateFin        DateTime     @map("date_fin")
  statut         StatutStage  @default(en_cours)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  demandeStage   DemandeStage @relation(fields: [demandeStageId], references: [id], onDelete: Cascade)
  stagiaire      Stagiaire    @relation(fields: [stagiaireId], references: [userId])
  structure      Structure    @relation(fields: [structureId], references: [id])
  tuteur         Tuteur       @relation(fields: [tuteurId], references: [userId])

  @@map("stages")
}

model Message {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expediteurId   String   @map("expediteur_id") @db.Uuid
  destinataireId String   @map("destinataire_id") @db.Uuid
  contenu        String
  lu             Boolean  @default(false)
  createdAt      DateTime @default(now()) @map("created_at")
  destinataire   User     @relation("destinataire", fields: [destinataireId], references: [id], onDelete: Cascade)
  expediteur     User     @relation("expediteur", fields: [expediteurId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model ThemeTuteur {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tuteurId    String  @map("tuteur_id") @db.Uuid
  titre       String
  description String?
  disponible  Boolean @default(true)
  tuteur      Tuteur  @relation(fields: [tuteurId], references: [userId])

  @@map("themes_tuteur")
}

model ParametreSysteme {
  id     Int    @id @default(autoincrement())
  cle    String @unique @map("clé")
  valeur String

  @@map("parametres_systeme")
}

model JournalAction {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String        @map("user_id") @db.Uuid
  action         String
  cible          String
  timestamp      DateTime      @default(now()) @db.Timestamp(6)
  demandeStageId String?       @map("demande_stage_id") @db.Uuid
  demandeStage   DemandeStage? @relation("demande_stage_actions", fields: [demandeStageId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@map("journal_actions")
}

model StageRequest {
  id                                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                          DateTime  @default(now())
  updatedAt                          DateTime  @updatedAt
  status                             String    @default("EN_ATTENTE") // EN_ATTENTE, VALIDEE, REJETEE
  type                               String // Type de stage
  departement                        String // Département demandé
  dateDebut                          DateTime
  dateFin                            DateTime
  motivation                         String    @db.Text
  competences                        String    @db.Text
  experience                         String    @db.Text
  universite                         String
  domaineEtude                       String
  anneeEtude                         String
  code_suivi                         String?   @unique // Code unique pour le suivi de la demande
  photo                              String? // Photo de profil du stagiaire
  candidate2Email                    String?   @map("candidate2_email")
  candidate2Photo                    String?   @map("candidate2_photo")
  requiresSecondCandidateValidation  Boolean   @default(false) @map("requires_second_candidate_validation")
  secondCandidateValidated           Boolean   @default(false) @map("second_candidate_validated")
  secondCandidateUserId              String?   @map("second_candidate_user_id") @db.Uuid
  secondCandidateValidationToken     String?   @map("second_candidate_validation_token")
  secondCandidateValidationExpiresAt DateTime? @map("second_candidate_validation_expires_at")

  // Relations
  stagiaire   User   @relation(fields: [stagiaireId], references: [id])
  stagiaireId String @db.Uuid

  // Documents
  cv                       String?
  lettreMotivation         String?
  carteIdentite            String?
  inscriptionUniversitaire String?
  recommandation           String?
  autresDocuments          Json?

  @@map("stage_requests")
}

model Notification {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      String // info, success, warning, error
  title     String
  message   String
  userId    String?   @map("user_id") @db.Uuid
  role      UserRole? // Pour les notifications par rôle (ex: dpaf)
  read      Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Evaluation {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stagiaireId String   @db.Uuid
  tuteurId    String   @db.Uuid
  criteres    Json
  commentaire String?
  createdAt   DateTime @default(now())

  // Relations
  stagiaire User @relation("StagiaireEvaluations", fields: [stagiaireId], references: [id])
  tuteur    User @relation("TuteurEvaluations", fields: [tuteurId], references: [id])

  @@map("evaluations")
}

model Document {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @db.Uuid
  type       String // ex: 'cv', 'lettre_motivation', etc.
  name       String // nom original du fichier
  path       String // chemin du fichier sur le serveur
  uploadedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Service {
  id          Int      @id @default(autoincrement())
  nomService  String   @unique
  description String?
  structureId Int      @map("structure_id")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  structure  Structure   @relation(fields: [structureId], references: [id])
  tuteurs    Tuteur[]
  stagiaires Stagiaire[]

  @@map("services")
}

enum UserRole {
  admin
  dpaf
  structure
  tuteur
  stagiaire
}

enum StatutDemande {
  en_attente
  confirme
  rejete
}

enum StatutStage {
  en_cours
  termine
  annule
}
