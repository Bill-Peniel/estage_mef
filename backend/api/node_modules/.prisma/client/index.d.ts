
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model DPAF
 * 
 */
export type DPAF = $Result.DefaultSelection<Prisma.$DPAFPayload>
/**
 * Model Structure
 * 
 */
export type Structure = $Result.DefaultSelection<Prisma.$StructurePayload>
/**
 * Model Tuteur
 * 
 */
export type Tuteur = $Result.DefaultSelection<Prisma.$TuteurPayload>
/**
 * Model Stagiaire
 * 
 */
export type Stagiaire = $Result.DefaultSelection<Prisma.$StagiairePayload>
/**
 * Model DemandeStage
 * 
 */
export type DemandeStage = $Result.DefaultSelection<Prisma.$DemandeStagePayload>
/**
 * Model Stage
 * 
 */
export type Stage = $Result.DefaultSelection<Prisma.$StagePayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model ThemeTuteur
 * 
 */
export type ThemeTuteur = $Result.DefaultSelection<Prisma.$ThemeTuteurPayload>
/**
 * Model ParametreSysteme
 * 
 */
export type ParametreSysteme = $Result.DefaultSelection<Prisma.$ParametreSystemePayload>
/**
 * Model JournalAction
 * 
 */
export type JournalAction = $Result.DefaultSelection<Prisma.$JournalActionPayload>
/**
 * Model StageRequest
 * 
 */
export type StageRequest = $Result.DefaultSelection<Prisma.$StageRequestPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Evaluation
 * 
 */
export type Evaluation = $Result.DefaultSelection<Prisma.$EvaluationPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model Service
 * 
 */
export type Service = $Result.DefaultSelection<Prisma.$ServicePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  admin: 'admin',
  dpaf: 'dpaf',
  structure: 'structure',
  tuteur: 'tuteur',
  stagiaire: 'stagiaire'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const StatutDemande: {
  en_attente: 'en_attente',
  confirme: 'confirme',
  rejete: 'rejete'
};

export type StatutDemande = (typeof StatutDemande)[keyof typeof StatutDemande]


export const StatutStage: {
  en_cours: 'en_cours',
  termine: 'termine',
  annule: 'annule'
};

export type StatutStage = (typeof StatutStage)[keyof typeof StatutStage]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type StatutDemande = $Enums.StatutDemande

export const StatutDemande: typeof $Enums.StatutDemande

export type StatutStage = $Enums.StatutStage

export const StatutStage: typeof $Enums.StatutStage

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dPAF`: Exposes CRUD operations for the **DPAF** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DPAFS
    * const dPAFS = await prisma.dPAF.findMany()
    * ```
    */
  get dPAF(): Prisma.DPAFDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.structure`: Exposes CRUD operations for the **Structure** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Structures
    * const structures = await prisma.structure.findMany()
    * ```
    */
  get structure(): Prisma.StructureDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tuteur`: Exposes CRUD operations for the **Tuteur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tuteurs
    * const tuteurs = await prisma.tuteur.findMany()
    * ```
    */
  get tuteur(): Prisma.TuteurDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stagiaire`: Exposes CRUD operations for the **Stagiaire** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stagiaires
    * const stagiaires = await prisma.stagiaire.findMany()
    * ```
    */
  get stagiaire(): Prisma.StagiaireDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.demandeStage`: Exposes CRUD operations for the **DemandeStage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DemandeStages
    * const demandeStages = await prisma.demandeStage.findMany()
    * ```
    */
  get demandeStage(): Prisma.DemandeStageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stage`: Exposes CRUD operations for the **Stage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stages
    * const stages = await prisma.stage.findMany()
    * ```
    */
  get stage(): Prisma.StageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.themeTuteur`: Exposes CRUD operations for the **ThemeTuteur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThemeTuteurs
    * const themeTuteurs = await prisma.themeTuteur.findMany()
    * ```
    */
  get themeTuteur(): Prisma.ThemeTuteurDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.parametreSysteme`: Exposes CRUD operations for the **ParametreSysteme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParametreSystemes
    * const parametreSystemes = await prisma.parametreSysteme.findMany()
    * ```
    */
  get parametreSysteme(): Prisma.ParametreSystemeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.journalAction`: Exposes CRUD operations for the **JournalAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JournalActions
    * const journalActions = await prisma.journalAction.findMany()
    * ```
    */
  get journalAction(): Prisma.JournalActionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stageRequest`: Exposes CRUD operations for the **StageRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StageRequests
    * const stageRequests = await prisma.stageRequest.findMany()
    * ```
    */
  get stageRequest(): Prisma.StageRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.evaluation`: Exposes CRUD operations for the **Evaluation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Evaluations
    * const evaluations = await prisma.evaluation.findMany()
    * ```
    */
  get evaluation(): Prisma.EvaluationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **Service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.ServiceDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Profile: 'Profile',
    DPAF: 'DPAF',
    Structure: 'Structure',
    Tuteur: 'Tuteur',
    Stagiaire: 'Stagiaire',
    DemandeStage: 'DemandeStage',
    Stage: 'Stage',
    Message: 'Message',
    ThemeTuteur: 'ThemeTuteur',
    ParametreSysteme: 'ParametreSysteme',
    JournalAction: 'JournalAction',
    StageRequest: 'StageRequest',
    Notification: 'Notification',
    Evaluation: 'Evaluation',
    Document: 'Document',
    Service: 'Service'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "profile" | "dPAF" | "structure" | "tuteur" | "stagiaire" | "demandeStage" | "stage" | "message" | "themeTuteur" | "parametreSysteme" | "journalAction" | "stageRequest" | "notification" | "evaluation" | "document" | "service"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      DPAF: {
        payload: Prisma.$DPAFPayload<ExtArgs>
        fields: Prisma.DPAFFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DPAFFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DPAFFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>
          }
          findFirst: {
            args: Prisma.DPAFFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DPAFFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>
          }
          findMany: {
            args: Prisma.DPAFFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>[]
          }
          create: {
            args: Prisma.DPAFCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>
          }
          createMany: {
            args: Prisma.DPAFCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DPAFCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>[]
          }
          delete: {
            args: Prisma.DPAFDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>
          }
          update: {
            args: Prisma.DPAFUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>
          }
          deleteMany: {
            args: Prisma.DPAFDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DPAFUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DPAFUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>[]
          }
          upsert: {
            args: Prisma.DPAFUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>
          }
          aggregate: {
            args: Prisma.DPAFAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDPAF>
          }
          groupBy: {
            args: Prisma.DPAFGroupByArgs<ExtArgs>
            result: $Utils.Optional<DPAFGroupByOutputType>[]
          }
          count: {
            args: Prisma.DPAFCountArgs<ExtArgs>
            result: $Utils.Optional<DPAFCountAggregateOutputType> | number
          }
        }
      }
      Structure: {
        payload: Prisma.$StructurePayload<ExtArgs>
        fields: Prisma.StructureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StructureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StructureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>
          }
          findFirst: {
            args: Prisma.StructureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StructureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>
          }
          findMany: {
            args: Prisma.StructureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>[]
          }
          create: {
            args: Prisma.StructureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>
          }
          createMany: {
            args: Prisma.StructureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StructureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>[]
          }
          delete: {
            args: Prisma.StructureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>
          }
          update: {
            args: Prisma.StructureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>
          }
          deleteMany: {
            args: Prisma.StructureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StructureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StructureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>[]
          }
          upsert: {
            args: Prisma.StructureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>
          }
          aggregate: {
            args: Prisma.StructureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStructure>
          }
          groupBy: {
            args: Prisma.StructureGroupByArgs<ExtArgs>
            result: $Utils.Optional<StructureGroupByOutputType>[]
          }
          count: {
            args: Prisma.StructureCountArgs<ExtArgs>
            result: $Utils.Optional<StructureCountAggregateOutputType> | number
          }
        }
      }
      Tuteur: {
        payload: Prisma.$TuteurPayload<ExtArgs>
        fields: Prisma.TuteurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TuteurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TuteurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          findFirst: {
            args: Prisma.TuteurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TuteurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          findMany: {
            args: Prisma.TuteurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>[]
          }
          create: {
            args: Prisma.TuteurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          createMany: {
            args: Prisma.TuteurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TuteurCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>[]
          }
          delete: {
            args: Prisma.TuteurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          update: {
            args: Prisma.TuteurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          deleteMany: {
            args: Prisma.TuteurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TuteurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TuteurUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>[]
          }
          upsert: {
            args: Prisma.TuteurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          aggregate: {
            args: Prisma.TuteurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTuteur>
          }
          groupBy: {
            args: Prisma.TuteurGroupByArgs<ExtArgs>
            result: $Utils.Optional<TuteurGroupByOutputType>[]
          }
          count: {
            args: Prisma.TuteurCountArgs<ExtArgs>
            result: $Utils.Optional<TuteurCountAggregateOutputType> | number
          }
        }
      }
      Stagiaire: {
        payload: Prisma.$StagiairePayload<ExtArgs>
        fields: Prisma.StagiaireFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StagiaireFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StagiaireFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>
          }
          findFirst: {
            args: Prisma.StagiaireFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StagiaireFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>
          }
          findMany: {
            args: Prisma.StagiaireFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>[]
          }
          create: {
            args: Prisma.StagiaireCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>
          }
          createMany: {
            args: Prisma.StagiaireCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StagiaireCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>[]
          }
          delete: {
            args: Prisma.StagiaireDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>
          }
          update: {
            args: Prisma.StagiaireUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>
          }
          deleteMany: {
            args: Prisma.StagiaireDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StagiaireUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StagiaireUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>[]
          }
          upsert: {
            args: Prisma.StagiaireUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>
          }
          aggregate: {
            args: Prisma.StagiaireAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStagiaire>
          }
          groupBy: {
            args: Prisma.StagiaireGroupByArgs<ExtArgs>
            result: $Utils.Optional<StagiaireGroupByOutputType>[]
          }
          count: {
            args: Prisma.StagiaireCountArgs<ExtArgs>
            result: $Utils.Optional<StagiaireCountAggregateOutputType> | number
          }
        }
      }
      DemandeStage: {
        payload: Prisma.$DemandeStagePayload<ExtArgs>
        fields: Prisma.DemandeStageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DemandeStageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DemandeStageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>
          }
          findFirst: {
            args: Prisma.DemandeStageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DemandeStageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>
          }
          findMany: {
            args: Prisma.DemandeStageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>[]
          }
          create: {
            args: Prisma.DemandeStageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>
          }
          createMany: {
            args: Prisma.DemandeStageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DemandeStageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>[]
          }
          delete: {
            args: Prisma.DemandeStageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>
          }
          update: {
            args: Prisma.DemandeStageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>
          }
          deleteMany: {
            args: Prisma.DemandeStageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DemandeStageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DemandeStageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>[]
          }
          upsert: {
            args: Prisma.DemandeStageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>
          }
          aggregate: {
            args: Prisma.DemandeStageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDemandeStage>
          }
          groupBy: {
            args: Prisma.DemandeStageGroupByArgs<ExtArgs>
            result: $Utils.Optional<DemandeStageGroupByOutputType>[]
          }
          count: {
            args: Prisma.DemandeStageCountArgs<ExtArgs>
            result: $Utils.Optional<DemandeStageCountAggregateOutputType> | number
          }
        }
      }
      Stage: {
        payload: Prisma.$StagePayload<ExtArgs>
        fields: Prisma.StageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          findFirst: {
            args: Prisma.StageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          findMany: {
            args: Prisma.StageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>[]
          }
          create: {
            args: Prisma.StageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          createMany: {
            args: Prisma.StageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>[]
          }
          delete: {
            args: Prisma.StageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          update: {
            args: Prisma.StageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          deleteMany: {
            args: Prisma.StageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>[]
          }
          upsert: {
            args: Prisma.StageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          aggregate: {
            args: Prisma.StageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStage>
          }
          groupBy: {
            args: Prisma.StageGroupByArgs<ExtArgs>
            result: $Utils.Optional<StageGroupByOutputType>[]
          }
          count: {
            args: Prisma.StageCountArgs<ExtArgs>
            result: $Utils.Optional<StageCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      ThemeTuteur: {
        payload: Prisma.$ThemeTuteurPayload<ExtArgs>
        fields: Prisma.ThemeTuteurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThemeTuteurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThemeTuteurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>
          }
          findFirst: {
            args: Prisma.ThemeTuteurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThemeTuteurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>
          }
          findMany: {
            args: Prisma.ThemeTuteurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>[]
          }
          create: {
            args: Prisma.ThemeTuteurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>
          }
          createMany: {
            args: Prisma.ThemeTuteurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThemeTuteurCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>[]
          }
          delete: {
            args: Prisma.ThemeTuteurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>
          }
          update: {
            args: Prisma.ThemeTuteurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>
          }
          deleteMany: {
            args: Prisma.ThemeTuteurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ThemeTuteurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ThemeTuteurUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>[]
          }
          upsert: {
            args: Prisma.ThemeTuteurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>
          }
          aggregate: {
            args: Prisma.ThemeTuteurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateThemeTuteur>
          }
          groupBy: {
            args: Prisma.ThemeTuteurGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThemeTuteurGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThemeTuteurCountArgs<ExtArgs>
            result: $Utils.Optional<ThemeTuteurCountAggregateOutputType> | number
          }
        }
      }
      ParametreSysteme: {
        payload: Prisma.$ParametreSystemePayload<ExtArgs>
        fields: Prisma.ParametreSystemeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParametreSystemeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParametreSystemeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>
          }
          findFirst: {
            args: Prisma.ParametreSystemeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParametreSystemeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>
          }
          findMany: {
            args: Prisma.ParametreSystemeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>[]
          }
          create: {
            args: Prisma.ParametreSystemeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>
          }
          createMany: {
            args: Prisma.ParametreSystemeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParametreSystemeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>[]
          }
          delete: {
            args: Prisma.ParametreSystemeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>
          }
          update: {
            args: Prisma.ParametreSystemeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>
          }
          deleteMany: {
            args: Prisma.ParametreSystemeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParametreSystemeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ParametreSystemeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>[]
          }
          upsert: {
            args: Prisma.ParametreSystemeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>
          }
          aggregate: {
            args: Prisma.ParametreSystemeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParametreSysteme>
          }
          groupBy: {
            args: Prisma.ParametreSystemeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParametreSystemeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParametreSystemeCountArgs<ExtArgs>
            result: $Utils.Optional<ParametreSystemeCountAggregateOutputType> | number
          }
        }
      }
      JournalAction: {
        payload: Prisma.$JournalActionPayload<ExtArgs>
        fields: Prisma.JournalActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JournalActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JournalActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>
          }
          findFirst: {
            args: Prisma.JournalActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JournalActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>
          }
          findMany: {
            args: Prisma.JournalActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>[]
          }
          create: {
            args: Prisma.JournalActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>
          }
          createMany: {
            args: Prisma.JournalActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JournalActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>[]
          }
          delete: {
            args: Prisma.JournalActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>
          }
          update: {
            args: Prisma.JournalActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>
          }
          deleteMany: {
            args: Prisma.JournalActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JournalActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JournalActionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>[]
          }
          upsert: {
            args: Prisma.JournalActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>
          }
          aggregate: {
            args: Prisma.JournalActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJournalAction>
          }
          groupBy: {
            args: Prisma.JournalActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<JournalActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.JournalActionCountArgs<ExtArgs>
            result: $Utils.Optional<JournalActionCountAggregateOutputType> | number
          }
        }
      }
      StageRequest: {
        payload: Prisma.$StageRequestPayload<ExtArgs>
        fields: Prisma.StageRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StageRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StageRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageRequestPayload>
          }
          findFirst: {
            args: Prisma.StageRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StageRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageRequestPayload>
          }
          findMany: {
            args: Prisma.StageRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageRequestPayload>[]
          }
          create: {
            args: Prisma.StageRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageRequestPayload>
          }
          createMany: {
            args: Prisma.StageRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StageRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageRequestPayload>[]
          }
          delete: {
            args: Prisma.StageRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageRequestPayload>
          }
          update: {
            args: Prisma.StageRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageRequestPayload>
          }
          deleteMany: {
            args: Prisma.StageRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StageRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StageRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageRequestPayload>[]
          }
          upsert: {
            args: Prisma.StageRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageRequestPayload>
          }
          aggregate: {
            args: Prisma.StageRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStageRequest>
          }
          groupBy: {
            args: Prisma.StageRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<StageRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.StageRequestCountArgs<ExtArgs>
            result: $Utils.Optional<StageRequestCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Evaluation: {
        payload: Prisma.$EvaluationPayload<ExtArgs>
        fields: Prisma.EvaluationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EvaluationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EvaluationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluationPayload>
          }
          findFirst: {
            args: Prisma.EvaluationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EvaluationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluationPayload>
          }
          findMany: {
            args: Prisma.EvaluationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluationPayload>[]
          }
          create: {
            args: Prisma.EvaluationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluationPayload>
          }
          createMany: {
            args: Prisma.EvaluationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EvaluationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluationPayload>[]
          }
          delete: {
            args: Prisma.EvaluationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluationPayload>
          }
          update: {
            args: Prisma.EvaluationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluationPayload>
          }
          deleteMany: {
            args: Prisma.EvaluationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EvaluationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EvaluationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluationPayload>[]
          }
          upsert: {
            args: Prisma.EvaluationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluationPayload>
          }
          aggregate: {
            args: Prisma.EvaluationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvaluation>
          }
          groupBy: {
            args: Prisma.EvaluationGroupByArgs<ExtArgs>
            result: $Utils.Optional<EvaluationGroupByOutputType>[]
          }
          count: {
            args: Prisma.EvaluationCountArgs<ExtArgs>
            result: $Utils.Optional<EvaluationCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      Service: {
        payload: Prisma.$ServicePayload<ExtArgs>
        fields: Prisma.ServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findFirst: {
            args: Prisma.ServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findMany: {
            args: Prisma.ServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          create: {
            args: Prisma.ServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          createMany: {
            args: Prisma.ServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          delete: {
            args: Prisma.ServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          update: {
            args: Prisma.ServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          deleteMany: {
            args: Prisma.ServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          upsert: {
            args: Prisma.ServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          aggregate: {
            args: Prisma.ServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateService>
          }
          groupBy: {
            args: Prisma.ServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    profile?: ProfileOmit
    dPAF?: DPAFOmit
    structure?: StructureOmit
    tuteur?: TuteurOmit
    stagiaire?: StagiaireOmit
    demandeStage?: DemandeStageOmit
    stage?: StageOmit
    message?: MessageOmit
    themeTuteur?: ThemeTuteurOmit
    parametreSysteme?: ParametreSystemeOmit
    journalAction?: JournalActionOmit
    stageRequest?: StageRequestOmit
    notification?: NotificationOmit
    evaluation?: EvaluationOmit
    document?: DocumentOmit
    service?: ServiceOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    demandesStage: number
    journalActions: number
    messagesRecus: number
    messagesSent: number
    notifications: number
    evaluationsAsTuteur: number
    evaluationsAsStagiaire: number
    documents: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    demandesStage?: boolean | UserCountOutputTypeCountDemandesStageArgs
    journalActions?: boolean | UserCountOutputTypeCountJournalActionsArgs
    messagesRecus?: boolean | UserCountOutputTypeCountMessagesRecusArgs
    messagesSent?: boolean | UserCountOutputTypeCountMessagesSentArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    evaluationsAsTuteur?: boolean | UserCountOutputTypeCountEvaluationsAsTuteurArgs
    evaluationsAsStagiaire?: boolean | UserCountOutputTypeCountEvaluationsAsStagiaireArgs
    documents?: boolean | UserCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDemandesStageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountJournalActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JournalActionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesRecusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEvaluationsAsTuteurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EvaluationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEvaluationsAsStagiaireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EvaluationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Count Type StructureCountOutputType
   */

  export type StructureCountOutputType = {
    demandesStages: number
    stages: number
    stagiaires: number
    children: number
    users: number
    tuteurs: number
    services: number
  }

  export type StructureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    demandesStages?: boolean | StructureCountOutputTypeCountDemandesStagesArgs
    stages?: boolean | StructureCountOutputTypeCountStagesArgs
    stagiaires?: boolean | StructureCountOutputTypeCountStagiairesArgs
    children?: boolean | StructureCountOutputTypeCountChildrenArgs
    users?: boolean | StructureCountOutputTypeCountUsersArgs
    tuteurs?: boolean | StructureCountOutputTypeCountTuteursArgs
    services?: boolean | StructureCountOutputTypeCountServicesArgs
  }

  // Custom InputTypes
  /**
   * StructureCountOutputType without action
   */
  export type StructureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructureCountOutputType
     */
    select?: StructureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StructureCountOutputType without action
   */
  export type StructureCountOutputTypeCountDemandesStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DemandeStageWhereInput
  }

  /**
   * StructureCountOutputType without action
   */
  export type StructureCountOutputTypeCountStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
  }

  /**
   * StructureCountOutputType without action
   */
  export type StructureCountOutputTypeCountStagiairesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StagiaireWhereInput
  }

  /**
   * StructureCountOutputType without action
   */
  export type StructureCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StructureWhereInput
  }

  /**
   * StructureCountOutputType without action
   */
  export type StructureCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * StructureCountOutputType without action
   */
  export type StructureCountOutputTypeCountTuteursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TuteurWhereInput
  }

  /**
   * StructureCountOutputType without action
   */
  export type StructureCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
  }


  /**
   * Count Type TuteurCountOutputType
   */

  export type TuteurCountOutputType = {
    stages: number
    stagiaires: number
    themes: number
  }

  export type TuteurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stages?: boolean | TuteurCountOutputTypeCountStagesArgs
    stagiaires?: boolean | TuteurCountOutputTypeCountStagiairesArgs
    themes?: boolean | TuteurCountOutputTypeCountThemesArgs
  }

  // Custom InputTypes
  /**
   * TuteurCountOutputType without action
   */
  export type TuteurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TuteurCountOutputType
     */
    select?: TuteurCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TuteurCountOutputType without action
   */
  export type TuteurCountOutputTypeCountStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
  }

  /**
   * TuteurCountOutputType without action
   */
  export type TuteurCountOutputTypeCountStagiairesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StagiaireWhereInput
  }

  /**
   * TuteurCountOutputType without action
   */
  export type TuteurCountOutputTypeCountThemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThemeTuteurWhereInput
  }


  /**
   * Count Type StagiaireCountOutputType
   */

  export type StagiaireCountOutputType = {
    demandesStages: number
    stages: number
  }

  export type StagiaireCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    demandesStages?: boolean | StagiaireCountOutputTypeCountDemandesStagesArgs
    stages?: boolean | StagiaireCountOutputTypeCountStagesArgs
  }

  // Custom InputTypes
  /**
   * StagiaireCountOutputType without action
   */
  export type StagiaireCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagiaireCountOutputType
     */
    select?: StagiaireCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StagiaireCountOutputType without action
   */
  export type StagiaireCountOutputTypeCountDemandesStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DemandeStageWhereInput
  }

  /**
   * StagiaireCountOutputType without action
   */
  export type StagiaireCountOutputTypeCountStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
  }


  /**
   * Count Type DemandeStageCountOutputType
   */

  export type DemandeStageCountOutputType = {
    journalActions: number
  }

  export type DemandeStageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    journalActions?: boolean | DemandeStageCountOutputTypeCountJournalActionsArgs
  }

  // Custom InputTypes
  /**
   * DemandeStageCountOutputType without action
   */
  export type DemandeStageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStageCountOutputType
     */
    select?: DemandeStageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DemandeStageCountOutputType without action
   */
  export type DemandeStageCountOutputTypeCountJournalActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JournalActionWhereInput
  }


  /**
   * Count Type ServiceCountOutputType
   */

  export type ServiceCountOutputType = {
    tuteurs: number
    stagiaires: number
  }

  export type ServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tuteurs?: boolean | ServiceCountOutputTypeCountTuteursArgs
    stagiaires?: boolean | ServiceCountOutputTypeCountStagiairesArgs
  }

  // Custom InputTypes
  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCountOutputType
     */
    select?: ServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountTuteursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TuteurWhereInput
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountStagiairesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StagiaireWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    structureId: number | null
  }

  export type UserSumAggregateOutputType = {
    structureId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    structureId: number | null
    notifMessages: boolean | null
    notifEvaluation: boolean | null
    notifRapports: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    structureId: number | null
    notifMessages: boolean | null
    notifEvaluation: boolean | null
    notifRapports: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    structureId: number
    notifMessages: number
    notifEvaluation: number
    notifRapports: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    structureId?: true
  }

  export type UserSumAggregateInputType = {
    structureId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    structureId?: true
    notifMessages?: true
    notifEvaluation?: true
    notifRapports?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    structureId?: true
    notifMessages?: true
    notifEvaluation?: true
    notifRapports?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    structureId?: true
    notifMessages?: true
    notifEvaluation?: true
    notifRapports?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    structureId: number | null
    notifMessages: boolean | null
    notifEvaluation: boolean | null
    notifRapports: boolean | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    structureId?: boolean
    notifMessages?: boolean
    notifEvaluation?: boolean
    notifRapports?: boolean
    demandesStage?: boolean | User$demandesStageArgs<ExtArgs>
    dpaf?: boolean | User$dpafArgs<ExtArgs>
    journalActions?: boolean | User$journalActionsArgs<ExtArgs>
    messagesRecus?: boolean | User$messagesRecusArgs<ExtArgs>
    messagesSent?: boolean | User$messagesSentArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    stagiaire?: boolean | User$stagiaireArgs<ExtArgs>
    structure?: boolean | User$structureArgs<ExtArgs>
    tuteur?: boolean | User$tuteurArgs<ExtArgs>
    evaluationsAsTuteur?: boolean | User$evaluationsAsTuteurArgs<ExtArgs>
    evaluationsAsStagiaire?: boolean | User$evaluationsAsStagiaireArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    structureId?: boolean
    notifMessages?: boolean
    notifEvaluation?: boolean
    notifRapports?: boolean
    structure?: boolean | User$structureArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    structureId?: boolean
    notifMessages?: boolean
    notifEvaluation?: boolean
    notifRapports?: boolean
    structure?: boolean | User$structureArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    structureId?: boolean
    notifMessages?: boolean
    notifEvaluation?: boolean
    notifRapports?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "passwordHash" | "role" | "isActive" | "createdAt" | "updatedAt" | "structureId" | "notifMessages" | "notifEvaluation" | "notifRapports", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    demandesStage?: boolean | User$demandesStageArgs<ExtArgs>
    dpaf?: boolean | User$dpafArgs<ExtArgs>
    journalActions?: boolean | User$journalActionsArgs<ExtArgs>
    messagesRecus?: boolean | User$messagesRecusArgs<ExtArgs>
    messagesSent?: boolean | User$messagesSentArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    stagiaire?: boolean | User$stagiaireArgs<ExtArgs>
    structure?: boolean | User$structureArgs<ExtArgs>
    tuteur?: boolean | User$tuteurArgs<ExtArgs>
    evaluationsAsTuteur?: boolean | User$evaluationsAsTuteurArgs<ExtArgs>
    evaluationsAsStagiaire?: boolean | User$evaluationsAsStagiaireArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    structure?: boolean | User$structureArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    structure?: boolean | User$structureArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      demandesStage: Prisma.$StageRequestPayload<ExtArgs>[]
      dpaf: Prisma.$DPAFPayload<ExtArgs> | null
      journalActions: Prisma.$JournalActionPayload<ExtArgs>[]
      messagesRecus: Prisma.$MessagePayload<ExtArgs>[]
      messagesSent: Prisma.$MessagePayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      profile: Prisma.$ProfilePayload<ExtArgs> | null
      stagiaire: Prisma.$StagiairePayload<ExtArgs> | null
      structure: Prisma.$StructurePayload<ExtArgs> | null
      tuteur: Prisma.$TuteurPayload<ExtArgs> | null
      evaluationsAsTuteur: Prisma.$EvaluationPayload<ExtArgs>[]
      evaluationsAsStagiaire: Prisma.$EvaluationPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      role: $Enums.UserRole
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      structureId: number | null
      notifMessages: boolean | null
      notifEvaluation: boolean | null
      notifRapports: boolean | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    demandesStage<T extends User$demandesStageArgs<ExtArgs> = {}>(args?: Subset<T, User$demandesStageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StageRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dpaf<T extends User$dpafArgs<ExtArgs> = {}>(args?: Subset<T, User$dpafArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    journalActions<T extends User$journalActionsArgs<ExtArgs> = {}>(args?: Subset<T, User$journalActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messagesRecus<T extends User$messagesRecusArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesRecusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messagesSent<T extends User$messagesSentArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    stagiaire<T extends User$stagiaireArgs<ExtArgs> = {}>(args?: Subset<T, User$stagiaireArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    structure<T extends User$structureArgs<ExtArgs> = {}>(args?: Subset<T, User$structureArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tuteur<T extends User$tuteurArgs<ExtArgs> = {}>(args?: Subset<T, User$tuteurArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    evaluationsAsTuteur<T extends User$evaluationsAsTuteurArgs<ExtArgs> = {}>(args?: Subset<T, User$evaluationsAsTuteurArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    evaluationsAsStagiaire<T extends User$evaluationsAsStagiaireArgs<ExtArgs> = {}>(args?: Subset<T, User$evaluationsAsStagiaireArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends User$documentsArgs<ExtArgs> = {}>(args?: Subset<T, User$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly structureId: FieldRef<"User", 'Int'>
    readonly notifMessages: FieldRef<"User", 'Boolean'>
    readonly notifEvaluation: FieldRef<"User", 'Boolean'>
    readonly notifRapports: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.demandesStage
   */
  export type User$demandesStageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageRequest
     */
    select?: StageRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageRequest
     */
    omit?: StageRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageRequestInclude<ExtArgs> | null
    where?: StageRequestWhereInput
    orderBy?: StageRequestOrderByWithRelationInput | StageRequestOrderByWithRelationInput[]
    cursor?: StageRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StageRequestScalarFieldEnum | StageRequestScalarFieldEnum[]
  }

  /**
   * User.dpaf
   */
  export type User$dpafArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    where?: DPAFWhereInput
  }

  /**
   * User.journalActions
   */
  export type User$journalActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    where?: JournalActionWhereInput
    orderBy?: JournalActionOrderByWithRelationInput | JournalActionOrderByWithRelationInput[]
    cursor?: JournalActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JournalActionScalarFieldEnum | JournalActionScalarFieldEnum[]
  }

  /**
   * User.messagesRecus
   */
  export type User$messagesRecusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.messagesSent
   */
  export type User$messagesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * User.stagiaire
   */
  export type User$stagiaireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    where?: StagiaireWhereInput
  }

  /**
   * User.structure
   */
  export type User$structureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    where?: StructureWhereInput
  }

  /**
   * User.tuteur
   */
  export type User$tuteurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    where?: TuteurWhereInput
  }

  /**
   * User.evaluationsAsTuteur
   */
  export type User$evaluationsAsTuteurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluation
     */
    select?: EvaluationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evaluation
     */
    omit?: EvaluationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluationInclude<ExtArgs> | null
    where?: EvaluationWhereInput
    orderBy?: EvaluationOrderByWithRelationInput | EvaluationOrderByWithRelationInput[]
    cursor?: EvaluationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EvaluationScalarFieldEnum | EvaluationScalarFieldEnum[]
  }

  /**
   * User.evaluationsAsStagiaire
   */
  export type User$evaluationsAsStagiaireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluation
     */
    select?: EvaluationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evaluation
     */
    omit?: EvaluationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluationInclude<ExtArgs> | null
    where?: EvaluationWhereInput
    orderBy?: EvaluationOrderByWithRelationInput | EvaluationOrderByWithRelationInput[]
    cursor?: EvaluationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EvaluationScalarFieldEnum | EvaluationScalarFieldEnum[]
  }

  /**
   * User.documents
   */
  export type User$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    nom: string | null
    prenom: string | null
    telephone: string | null
    avatar: string | null
    birthDate: Date | null
    school: string | null
    major: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    nom: string | null
    prenom: string | null
    telephone: string | null
    avatar: string | null
    birthDate: Date | null
    school: string | null
    major: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    userId: number
    nom: number
    prenom: number
    telephone: number
    avatar: number
    birthDate: number
    school: number
    major: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    id?: true
    userId?: true
    nom?: true
    prenom?: true
    telephone?: true
    avatar?: true
    birthDate?: true
    school?: true
    major?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    nom?: true
    prenom?: true
    telephone?: true
    avatar?: true
    birthDate?: true
    school?: true
    major?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    userId?: true
    nom?: true
    prenom?: true
    telephone?: true
    avatar?: true
    birthDate?: true
    school?: true
    major?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: string
    userId: string
    nom: string
    prenom: string
    telephone: string | null
    avatar: string | null
    birthDate: Date | null
    school: string | null
    major: string | null
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nom?: boolean
    prenom?: boolean
    telephone?: boolean
    avatar?: boolean
    birthDate?: boolean
    school?: boolean
    major?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nom?: boolean
    prenom?: boolean
    telephone?: boolean
    avatar?: boolean
    birthDate?: boolean
    school?: boolean
    major?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nom?: boolean
    prenom?: boolean
    telephone?: boolean
    avatar?: boolean
    birthDate?: boolean
    school?: boolean
    major?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    nom?: boolean
    prenom?: boolean
    telephone?: boolean
    avatar?: boolean
    birthDate?: boolean
    school?: boolean
    major?: boolean
  }

  export type ProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "nom" | "prenom" | "telephone" | "avatar" | "birthDate" | "school" | "major", ExtArgs["result"]["profile"]>
  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      nom: string
      prenom: string
      telephone: string | null
      avatar: string | null
      birthDate: Date | null
      school: string | null
      major: string | null
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles and returns the data updated in the database.
     * @param {ProfileUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'String'>
    readonly userId: FieldRef<"Profile", 'String'>
    readonly nom: FieldRef<"Profile", 'String'>
    readonly prenom: FieldRef<"Profile", 'String'>
    readonly telephone: FieldRef<"Profile", 'String'>
    readonly avatar: FieldRef<"Profile", 'String'>
    readonly birthDate: FieldRef<"Profile", 'DateTime'>
    readonly school: FieldRef<"Profile", 'String'>
    readonly major: FieldRef<"Profile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profile updateManyAndReturn
   */
  export type ProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to delete.
     */
    limit?: number
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model DPAF
   */

  export type AggregateDPAF = {
    _count: DPAFCountAggregateOutputType | null
    _min: DPAFMinAggregateOutputType | null
    _max: DPAFMaxAggregateOutputType | null
  }

  export type DPAFMinAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type DPAFMaxAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type DPAFCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type DPAFMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type DPAFMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type DPAFCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type DPAFAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DPAF to aggregate.
     */
    where?: DPAFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DPAFS to fetch.
     */
    orderBy?: DPAFOrderByWithRelationInput | DPAFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DPAFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DPAFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DPAFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DPAFS
    **/
    _count?: true | DPAFCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DPAFMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DPAFMaxAggregateInputType
  }

  export type GetDPAFAggregateType<T extends DPAFAggregateArgs> = {
        [P in keyof T & keyof AggregateDPAF]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDPAF[P]>
      : GetScalarType<T[P], AggregateDPAF[P]>
  }




  export type DPAFGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DPAFWhereInput
    orderBy?: DPAFOrderByWithAggregationInput | DPAFOrderByWithAggregationInput[]
    by: DPAFScalarFieldEnum[] | DPAFScalarFieldEnum
    having?: DPAFScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DPAFCountAggregateInputType | true
    _min?: DPAFMinAggregateInputType
    _max?: DPAFMaxAggregateInputType
  }

  export type DPAFGroupByOutputType = {
    id: string
    userId: string
    _count: DPAFCountAggregateOutputType | null
    _min: DPAFMinAggregateOutputType | null
    _max: DPAFMaxAggregateOutputType | null
  }

  type GetDPAFGroupByPayload<T extends DPAFGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DPAFGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DPAFGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DPAFGroupByOutputType[P]>
            : GetScalarType<T[P], DPAFGroupByOutputType[P]>
        }
      >
    >


  export type DPAFSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dPAF"]>

  export type DPAFSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dPAF"]>

  export type DPAFSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dPAF"]>

  export type DPAFSelectScalar = {
    id?: boolean
    userId?: boolean
  }

  export type DPAFOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId", ExtArgs["result"]["dPAF"]>
  export type DPAFInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DPAFIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DPAFIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DPAFPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DPAF"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
    }, ExtArgs["result"]["dPAF"]>
    composites: {}
  }

  type DPAFGetPayload<S extends boolean | null | undefined | DPAFDefaultArgs> = $Result.GetResult<Prisma.$DPAFPayload, S>

  type DPAFCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DPAFFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DPAFCountAggregateInputType | true
    }

  export interface DPAFDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DPAF'], meta: { name: 'DPAF' } }
    /**
     * Find zero or one DPAF that matches the filter.
     * @param {DPAFFindUniqueArgs} args - Arguments to find a DPAF
     * @example
     * // Get one DPAF
     * const dPAF = await prisma.dPAF.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DPAFFindUniqueArgs>(args: SelectSubset<T, DPAFFindUniqueArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DPAF that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DPAFFindUniqueOrThrowArgs} args - Arguments to find a DPAF
     * @example
     * // Get one DPAF
     * const dPAF = await prisma.dPAF.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DPAFFindUniqueOrThrowArgs>(args: SelectSubset<T, DPAFFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DPAF that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DPAFFindFirstArgs} args - Arguments to find a DPAF
     * @example
     * // Get one DPAF
     * const dPAF = await prisma.dPAF.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DPAFFindFirstArgs>(args?: SelectSubset<T, DPAFFindFirstArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DPAF that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DPAFFindFirstOrThrowArgs} args - Arguments to find a DPAF
     * @example
     * // Get one DPAF
     * const dPAF = await prisma.dPAF.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DPAFFindFirstOrThrowArgs>(args?: SelectSubset<T, DPAFFindFirstOrThrowArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DPAFS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DPAFFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DPAFS
     * const dPAFS = await prisma.dPAF.findMany()
     * 
     * // Get first 10 DPAFS
     * const dPAFS = await prisma.dPAF.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dPAFWithIdOnly = await prisma.dPAF.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DPAFFindManyArgs>(args?: SelectSubset<T, DPAFFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DPAF.
     * @param {DPAFCreateArgs} args - Arguments to create a DPAF.
     * @example
     * // Create one DPAF
     * const DPAF = await prisma.dPAF.create({
     *   data: {
     *     // ... data to create a DPAF
     *   }
     * })
     * 
     */
    create<T extends DPAFCreateArgs>(args: SelectSubset<T, DPAFCreateArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DPAFS.
     * @param {DPAFCreateManyArgs} args - Arguments to create many DPAFS.
     * @example
     * // Create many DPAFS
     * const dPAF = await prisma.dPAF.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DPAFCreateManyArgs>(args?: SelectSubset<T, DPAFCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DPAFS and returns the data saved in the database.
     * @param {DPAFCreateManyAndReturnArgs} args - Arguments to create many DPAFS.
     * @example
     * // Create many DPAFS
     * const dPAF = await prisma.dPAF.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DPAFS and only return the `id`
     * const dPAFWithIdOnly = await prisma.dPAF.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DPAFCreateManyAndReturnArgs>(args?: SelectSubset<T, DPAFCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DPAF.
     * @param {DPAFDeleteArgs} args - Arguments to delete one DPAF.
     * @example
     * // Delete one DPAF
     * const DPAF = await prisma.dPAF.delete({
     *   where: {
     *     // ... filter to delete one DPAF
     *   }
     * })
     * 
     */
    delete<T extends DPAFDeleteArgs>(args: SelectSubset<T, DPAFDeleteArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DPAF.
     * @param {DPAFUpdateArgs} args - Arguments to update one DPAF.
     * @example
     * // Update one DPAF
     * const dPAF = await prisma.dPAF.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DPAFUpdateArgs>(args: SelectSubset<T, DPAFUpdateArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DPAFS.
     * @param {DPAFDeleteManyArgs} args - Arguments to filter DPAFS to delete.
     * @example
     * // Delete a few DPAFS
     * const { count } = await prisma.dPAF.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DPAFDeleteManyArgs>(args?: SelectSubset<T, DPAFDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DPAFS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DPAFUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DPAFS
     * const dPAF = await prisma.dPAF.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DPAFUpdateManyArgs>(args: SelectSubset<T, DPAFUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DPAFS and returns the data updated in the database.
     * @param {DPAFUpdateManyAndReturnArgs} args - Arguments to update many DPAFS.
     * @example
     * // Update many DPAFS
     * const dPAF = await prisma.dPAF.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DPAFS and only return the `id`
     * const dPAFWithIdOnly = await prisma.dPAF.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DPAFUpdateManyAndReturnArgs>(args: SelectSubset<T, DPAFUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DPAF.
     * @param {DPAFUpsertArgs} args - Arguments to update or create a DPAF.
     * @example
     * // Update or create a DPAF
     * const dPAF = await prisma.dPAF.upsert({
     *   create: {
     *     // ... data to create a DPAF
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DPAF we want to update
     *   }
     * })
     */
    upsert<T extends DPAFUpsertArgs>(args: SelectSubset<T, DPAFUpsertArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DPAFS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DPAFCountArgs} args - Arguments to filter DPAFS to count.
     * @example
     * // Count the number of DPAFS
     * const count = await prisma.dPAF.count({
     *   where: {
     *     // ... the filter for the DPAFS we want to count
     *   }
     * })
    **/
    count<T extends DPAFCountArgs>(
      args?: Subset<T, DPAFCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DPAFCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DPAF.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DPAFAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DPAFAggregateArgs>(args: Subset<T, DPAFAggregateArgs>): Prisma.PrismaPromise<GetDPAFAggregateType<T>>

    /**
     * Group by DPAF.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DPAFGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DPAFGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DPAFGroupByArgs['orderBy'] }
        : { orderBy?: DPAFGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DPAFGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDPAFGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DPAF model
   */
  readonly fields: DPAFFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DPAF.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DPAFClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DPAF model
   */
  interface DPAFFieldRefs {
    readonly id: FieldRef<"DPAF", 'String'>
    readonly userId: FieldRef<"DPAF", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DPAF findUnique
   */
  export type DPAFFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * Filter, which DPAF to fetch.
     */
    where: DPAFWhereUniqueInput
  }

  /**
   * DPAF findUniqueOrThrow
   */
  export type DPAFFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * Filter, which DPAF to fetch.
     */
    where: DPAFWhereUniqueInput
  }

  /**
   * DPAF findFirst
   */
  export type DPAFFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * Filter, which DPAF to fetch.
     */
    where?: DPAFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DPAFS to fetch.
     */
    orderBy?: DPAFOrderByWithRelationInput | DPAFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DPAFS.
     */
    cursor?: DPAFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DPAFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DPAFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DPAFS.
     */
    distinct?: DPAFScalarFieldEnum | DPAFScalarFieldEnum[]
  }

  /**
   * DPAF findFirstOrThrow
   */
  export type DPAFFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * Filter, which DPAF to fetch.
     */
    where?: DPAFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DPAFS to fetch.
     */
    orderBy?: DPAFOrderByWithRelationInput | DPAFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DPAFS.
     */
    cursor?: DPAFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DPAFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DPAFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DPAFS.
     */
    distinct?: DPAFScalarFieldEnum | DPAFScalarFieldEnum[]
  }

  /**
   * DPAF findMany
   */
  export type DPAFFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * Filter, which DPAFS to fetch.
     */
    where?: DPAFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DPAFS to fetch.
     */
    orderBy?: DPAFOrderByWithRelationInput | DPAFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DPAFS.
     */
    cursor?: DPAFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DPAFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DPAFS.
     */
    skip?: number
    distinct?: DPAFScalarFieldEnum | DPAFScalarFieldEnum[]
  }

  /**
   * DPAF create
   */
  export type DPAFCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * The data needed to create a DPAF.
     */
    data: XOR<DPAFCreateInput, DPAFUncheckedCreateInput>
  }

  /**
   * DPAF createMany
   */
  export type DPAFCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DPAFS.
     */
    data: DPAFCreateManyInput | DPAFCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DPAF createManyAndReturn
   */
  export type DPAFCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * The data used to create many DPAFS.
     */
    data: DPAFCreateManyInput | DPAFCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DPAF update
   */
  export type DPAFUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * The data needed to update a DPAF.
     */
    data: XOR<DPAFUpdateInput, DPAFUncheckedUpdateInput>
    /**
     * Choose, which DPAF to update.
     */
    where: DPAFWhereUniqueInput
  }

  /**
   * DPAF updateMany
   */
  export type DPAFUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DPAFS.
     */
    data: XOR<DPAFUpdateManyMutationInput, DPAFUncheckedUpdateManyInput>
    /**
     * Filter which DPAFS to update
     */
    where?: DPAFWhereInput
    /**
     * Limit how many DPAFS to update.
     */
    limit?: number
  }

  /**
   * DPAF updateManyAndReturn
   */
  export type DPAFUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * The data used to update DPAFS.
     */
    data: XOR<DPAFUpdateManyMutationInput, DPAFUncheckedUpdateManyInput>
    /**
     * Filter which DPAFS to update
     */
    where?: DPAFWhereInput
    /**
     * Limit how many DPAFS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DPAF upsert
   */
  export type DPAFUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * The filter to search for the DPAF to update in case it exists.
     */
    where: DPAFWhereUniqueInput
    /**
     * In case the DPAF found by the `where` argument doesn't exist, create a new DPAF with this data.
     */
    create: XOR<DPAFCreateInput, DPAFUncheckedCreateInput>
    /**
     * In case the DPAF was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DPAFUpdateInput, DPAFUncheckedUpdateInput>
  }

  /**
   * DPAF delete
   */
  export type DPAFDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * Filter which DPAF to delete.
     */
    where: DPAFWhereUniqueInput
  }

  /**
   * DPAF deleteMany
   */
  export type DPAFDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DPAFS to delete
     */
    where?: DPAFWhereInput
    /**
     * Limit how many DPAFS to delete.
     */
    limit?: number
  }

  /**
   * DPAF without action
   */
  export type DPAFDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
  }


  /**
   * Model Structure
   */

  export type AggregateStructure = {
    _count: StructureCountAggregateOutputType | null
    _avg: StructureAvgAggregateOutputType | null
    _sum: StructureSumAggregateOutputType | null
    _min: StructureMinAggregateOutputType | null
    _max: StructureMaxAggregateOutputType | null
  }

  export type StructureAvgAggregateOutputType = {
    id: number | null
    parentId: number | null
  }

  export type StructureSumAggregateOutputType = {
    id: number | null
    parentId: number | null
  }

  export type StructureMinAggregateOutputType = {
    id: number | null
    nomStructure: string | null
    sigle: string | null
    type: string | null
    isDeleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    parentId: number | null
  }

  export type StructureMaxAggregateOutputType = {
    id: number | null
    nomStructure: string | null
    sigle: string | null
    type: string | null
    isDeleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    parentId: number | null
  }

  export type StructureCountAggregateOutputType = {
    id: number
    nomStructure: number
    sigle: number
    type: number
    isDeleted: number
    createdAt: number
    updatedAt: number
    parentId: number
    _all: number
  }


  export type StructureAvgAggregateInputType = {
    id?: true
    parentId?: true
  }

  export type StructureSumAggregateInputType = {
    id?: true
    parentId?: true
  }

  export type StructureMinAggregateInputType = {
    id?: true
    nomStructure?: true
    sigle?: true
    type?: true
    isDeleted?: true
    createdAt?: true
    updatedAt?: true
    parentId?: true
  }

  export type StructureMaxAggregateInputType = {
    id?: true
    nomStructure?: true
    sigle?: true
    type?: true
    isDeleted?: true
    createdAt?: true
    updatedAt?: true
    parentId?: true
  }

  export type StructureCountAggregateInputType = {
    id?: true
    nomStructure?: true
    sigle?: true
    type?: true
    isDeleted?: true
    createdAt?: true
    updatedAt?: true
    parentId?: true
    _all?: true
  }

  export type StructureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Structure to aggregate.
     */
    where?: StructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Structures to fetch.
     */
    orderBy?: StructureOrderByWithRelationInput | StructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Structures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Structures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Structures
    **/
    _count?: true | StructureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StructureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StructureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StructureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StructureMaxAggregateInputType
  }

  export type GetStructureAggregateType<T extends StructureAggregateArgs> = {
        [P in keyof T & keyof AggregateStructure]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStructure[P]>
      : GetScalarType<T[P], AggregateStructure[P]>
  }




  export type StructureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StructureWhereInput
    orderBy?: StructureOrderByWithAggregationInput | StructureOrderByWithAggregationInput[]
    by: StructureScalarFieldEnum[] | StructureScalarFieldEnum
    having?: StructureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StructureCountAggregateInputType | true
    _avg?: StructureAvgAggregateInputType
    _sum?: StructureSumAggregateInputType
    _min?: StructureMinAggregateInputType
    _max?: StructureMaxAggregateInputType
  }

  export type StructureGroupByOutputType = {
    id: number
    nomStructure: string
    sigle: string | null
    type: string | null
    isDeleted: boolean
    createdAt: Date
    updatedAt: Date
    parentId: number | null
    _count: StructureCountAggregateOutputType | null
    _avg: StructureAvgAggregateOutputType | null
    _sum: StructureSumAggregateOutputType | null
    _min: StructureMinAggregateOutputType | null
    _max: StructureMaxAggregateOutputType | null
  }

  type GetStructureGroupByPayload<T extends StructureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StructureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StructureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StructureGroupByOutputType[P]>
            : GetScalarType<T[P], StructureGroupByOutputType[P]>
        }
      >
    >


  export type StructureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomStructure?: boolean
    sigle?: boolean
    type?: boolean
    isDeleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
    demandesStages?: boolean | Structure$demandesStagesArgs<ExtArgs>
    stages?: boolean | Structure$stagesArgs<ExtArgs>
    stagiaires?: boolean | Structure$stagiairesArgs<ExtArgs>
    parent?: boolean | Structure$parentArgs<ExtArgs>
    children?: boolean | Structure$childrenArgs<ExtArgs>
    users?: boolean | Structure$usersArgs<ExtArgs>
    tuteurs?: boolean | Structure$tuteursArgs<ExtArgs>
    services?: boolean | Structure$servicesArgs<ExtArgs>
    _count?: boolean | StructureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["structure"]>

  export type StructureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomStructure?: boolean
    sigle?: boolean
    type?: boolean
    isDeleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
    parent?: boolean | Structure$parentArgs<ExtArgs>
  }, ExtArgs["result"]["structure"]>

  export type StructureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomStructure?: boolean
    sigle?: boolean
    type?: boolean
    isDeleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
    parent?: boolean | Structure$parentArgs<ExtArgs>
  }, ExtArgs["result"]["structure"]>

  export type StructureSelectScalar = {
    id?: boolean
    nomStructure?: boolean
    sigle?: boolean
    type?: boolean
    isDeleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
  }

  export type StructureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nomStructure" | "sigle" | "type" | "isDeleted" | "createdAt" | "updatedAt" | "parentId", ExtArgs["result"]["structure"]>
  export type StructureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    demandesStages?: boolean | Structure$demandesStagesArgs<ExtArgs>
    stages?: boolean | Structure$stagesArgs<ExtArgs>
    stagiaires?: boolean | Structure$stagiairesArgs<ExtArgs>
    parent?: boolean | Structure$parentArgs<ExtArgs>
    children?: boolean | Structure$childrenArgs<ExtArgs>
    users?: boolean | Structure$usersArgs<ExtArgs>
    tuteurs?: boolean | Structure$tuteursArgs<ExtArgs>
    services?: boolean | Structure$servicesArgs<ExtArgs>
    _count?: boolean | StructureCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StructureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Structure$parentArgs<ExtArgs>
  }
  export type StructureIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Structure$parentArgs<ExtArgs>
  }

  export type $StructurePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Structure"
    objects: {
      demandesStages: Prisma.$DemandeStagePayload<ExtArgs>[]
      stages: Prisma.$StagePayload<ExtArgs>[]
      stagiaires: Prisma.$StagiairePayload<ExtArgs>[]
      parent: Prisma.$StructurePayload<ExtArgs> | null
      children: Prisma.$StructurePayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      tuteurs: Prisma.$TuteurPayload<ExtArgs>[]
      services: Prisma.$ServicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nomStructure: string
      sigle: string | null
      type: string | null
      isDeleted: boolean
      createdAt: Date
      updatedAt: Date
      parentId: number | null
    }, ExtArgs["result"]["structure"]>
    composites: {}
  }

  type StructureGetPayload<S extends boolean | null | undefined | StructureDefaultArgs> = $Result.GetResult<Prisma.$StructurePayload, S>

  type StructureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StructureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StructureCountAggregateInputType | true
    }

  export interface StructureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Structure'], meta: { name: 'Structure' } }
    /**
     * Find zero or one Structure that matches the filter.
     * @param {StructureFindUniqueArgs} args - Arguments to find a Structure
     * @example
     * // Get one Structure
     * const structure = await prisma.structure.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StructureFindUniqueArgs>(args: SelectSubset<T, StructureFindUniqueArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Structure that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StructureFindUniqueOrThrowArgs} args - Arguments to find a Structure
     * @example
     * // Get one Structure
     * const structure = await prisma.structure.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StructureFindUniqueOrThrowArgs>(args: SelectSubset<T, StructureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Structure that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructureFindFirstArgs} args - Arguments to find a Structure
     * @example
     * // Get one Structure
     * const structure = await prisma.structure.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StructureFindFirstArgs>(args?: SelectSubset<T, StructureFindFirstArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Structure that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructureFindFirstOrThrowArgs} args - Arguments to find a Structure
     * @example
     * // Get one Structure
     * const structure = await prisma.structure.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StructureFindFirstOrThrowArgs>(args?: SelectSubset<T, StructureFindFirstOrThrowArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Structures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Structures
     * const structures = await prisma.structure.findMany()
     * 
     * // Get first 10 Structures
     * const structures = await prisma.structure.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const structureWithIdOnly = await prisma.structure.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StructureFindManyArgs>(args?: SelectSubset<T, StructureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Structure.
     * @param {StructureCreateArgs} args - Arguments to create a Structure.
     * @example
     * // Create one Structure
     * const Structure = await prisma.structure.create({
     *   data: {
     *     // ... data to create a Structure
     *   }
     * })
     * 
     */
    create<T extends StructureCreateArgs>(args: SelectSubset<T, StructureCreateArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Structures.
     * @param {StructureCreateManyArgs} args - Arguments to create many Structures.
     * @example
     * // Create many Structures
     * const structure = await prisma.structure.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StructureCreateManyArgs>(args?: SelectSubset<T, StructureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Structures and returns the data saved in the database.
     * @param {StructureCreateManyAndReturnArgs} args - Arguments to create many Structures.
     * @example
     * // Create many Structures
     * const structure = await prisma.structure.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Structures and only return the `id`
     * const structureWithIdOnly = await prisma.structure.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StructureCreateManyAndReturnArgs>(args?: SelectSubset<T, StructureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Structure.
     * @param {StructureDeleteArgs} args - Arguments to delete one Structure.
     * @example
     * // Delete one Structure
     * const Structure = await prisma.structure.delete({
     *   where: {
     *     // ... filter to delete one Structure
     *   }
     * })
     * 
     */
    delete<T extends StructureDeleteArgs>(args: SelectSubset<T, StructureDeleteArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Structure.
     * @param {StructureUpdateArgs} args - Arguments to update one Structure.
     * @example
     * // Update one Structure
     * const structure = await prisma.structure.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StructureUpdateArgs>(args: SelectSubset<T, StructureUpdateArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Structures.
     * @param {StructureDeleteManyArgs} args - Arguments to filter Structures to delete.
     * @example
     * // Delete a few Structures
     * const { count } = await prisma.structure.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StructureDeleteManyArgs>(args?: SelectSubset<T, StructureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Structures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Structures
     * const structure = await prisma.structure.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StructureUpdateManyArgs>(args: SelectSubset<T, StructureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Structures and returns the data updated in the database.
     * @param {StructureUpdateManyAndReturnArgs} args - Arguments to update many Structures.
     * @example
     * // Update many Structures
     * const structure = await prisma.structure.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Structures and only return the `id`
     * const structureWithIdOnly = await prisma.structure.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StructureUpdateManyAndReturnArgs>(args: SelectSubset<T, StructureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Structure.
     * @param {StructureUpsertArgs} args - Arguments to update or create a Structure.
     * @example
     * // Update or create a Structure
     * const structure = await prisma.structure.upsert({
     *   create: {
     *     // ... data to create a Structure
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Structure we want to update
     *   }
     * })
     */
    upsert<T extends StructureUpsertArgs>(args: SelectSubset<T, StructureUpsertArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Structures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructureCountArgs} args - Arguments to filter Structures to count.
     * @example
     * // Count the number of Structures
     * const count = await prisma.structure.count({
     *   where: {
     *     // ... the filter for the Structures we want to count
     *   }
     * })
    **/
    count<T extends StructureCountArgs>(
      args?: Subset<T, StructureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StructureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Structure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StructureAggregateArgs>(args: Subset<T, StructureAggregateArgs>): Prisma.PrismaPromise<GetStructureAggregateType<T>>

    /**
     * Group by Structure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StructureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StructureGroupByArgs['orderBy'] }
        : { orderBy?: StructureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StructureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStructureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Structure model
   */
  readonly fields: StructureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Structure.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StructureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    demandesStages<T extends Structure$demandesStagesArgs<ExtArgs> = {}>(args?: Subset<T, Structure$demandesStagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stages<T extends Structure$stagesArgs<ExtArgs> = {}>(args?: Subset<T, Structure$stagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stagiaires<T extends Structure$stagiairesArgs<ExtArgs> = {}>(args?: Subset<T, Structure$stagiairesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    parent<T extends Structure$parentArgs<ExtArgs> = {}>(args?: Subset<T, Structure$parentArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends Structure$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Structure$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Structure$usersArgs<ExtArgs> = {}>(args?: Subset<T, Structure$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tuteurs<T extends Structure$tuteursArgs<ExtArgs> = {}>(args?: Subset<T, Structure$tuteursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    services<T extends Structure$servicesArgs<ExtArgs> = {}>(args?: Subset<T, Structure$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Structure model
   */
  interface StructureFieldRefs {
    readonly id: FieldRef<"Structure", 'Int'>
    readonly nomStructure: FieldRef<"Structure", 'String'>
    readonly sigle: FieldRef<"Structure", 'String'>
    readonly type: FieldRef<"Structure", 'String'>
    readonly isDeleted: FieldRef<"Structure", 'Boolean'>
    readonly createdAt: FieldRef<"Structure", 'DateTime'>
    readonly updatedAt: FieldRef<"Structure", 'DateTime'>
    readonly parentId: FieldRef<"Structure", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Structure findUnique
   */
  export type StructureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * Filter, which Structure to fetch.
     */
    where: StructureWhereUniqueInput
  }

  /**
   * Structure findUniqueOrThrow
   */
  export type StructureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * Filter, which Structure to fetch.
     */
    where: StructureWhereUniqueInput
  }

  /**
   * Structure findFirst
   */
  export type StructureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * Filter, which Structure to fetch.
     */
    where?: StructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Structures to fetch.
     */
    orderBy?: StructureOrderByWithRelationInput | StructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Structures.
     */
    cursor?: StructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Structures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Structures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Structures.
     */
    distinct?: StructureScalarFieldEnum | StructureScalarFieldEnum[]
  }

  /**
   * Structure findFirstOrThrow
   */
  export type StructureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * Filter, which Structure to fetch.
     */
    where?: StructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Structures to fetch.
     */
    orderBy?: StructureOrderByWithRelationInput | StructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Structures.
     */
    cursor?: StructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Structures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Structures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Structures.
     */
    distinct?: StructureScalarFieldEnum | StructureScalarFieldEnum[]
  }

  /**
   * Structure findMany
   */
  export type StructureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * Filter, which Structures to fetch.
     */
    where?: StructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Structures to fetch.
     */
    orderBy?: StructureOrderByWithRelationInput | StructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Structures.
     */
    cursor?: StructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Structures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Structures.
     */
    skip?: number
    distinct?: StructureScalarFieldEnum | StructureScalarFieldEnum[]
  }

  /**
   * Structure create
   */
  export type StructureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * The data needed to create a Structure.
     */
    data: XOR<StructureCreateInput, StructureUncheckedCreateInput>
  }

  /**
   * Structure createMany
   */
  export type StructureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Structures.
     */
    data: StructureCreateManyInput | StructureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Structure createManyAndReturn
   */
  export type StructureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * The data used to create many Structures.
     */
    data: StructureCreateManyInput | StructureCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Structure update
   */
  export type StructureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * The data needed to update a Structure.
     */
    data: XOR<StructureUpdateInput, StructureUncheckedUpdateInput>
    /**
     * Choose, which Structure to update.
     */
    where: StructureWhereUniqueInput
  }

  /**
   * Structure updateMany
   */
  export type StructureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Structures.
     */
    data: XOR<StructureUpdateManyMutationInput, StructureUncheckedUpdateManyInput>
    /**
     * Filter which Structures to update
     */
    where?: StructureWhereInput
    /**
     * Limit how many Structures to update.
     */
    limit?: number
  }

  /**
   * Structure updateManyAndReturn
   */
  export type StructureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * The data used to update Structures.
     */
    data: XOR<StructureUpdateManyMutationInput, StructureUncheckedUpdateManyInput>
    /**
     * Filter which Structures to update
     */
    where?: StructureWhereInput
    /**
     * Limit how many Structures to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Structure upsert
   */
  export type StructureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * The filter to search for the Structure to update in case it exists.
     */
    where: StructureWhereUniqueInput
    /**
     * In case the Structure found by the `where` argument doesn't exist, create a new Structure with this data.
     */
    create: XOR<StructureCreateInput, StructureUncheckedCreateInput>
    /**
     * In case the Structure was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StructureUpdateInput, StructureUncheckedUpdateInput>
  }

  /**
   * Structure delete
   */
  export type StructureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * Filter which Structure to delete.
     */
    where: StructureWhereUniqueInput
  }

  /**
   * Structure deleteMany
   */
  export type StructureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Structures to delete
     */
    where?: StructureWhereInput
    /**
     * Limit how many Structures to delete.
     */
    limit?: number
  }

  /**
   * Structure.demandesStages
   */
  export type Structure$demandesStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    where?: DemandeStageWhereInput
    orderBy?: DemandeStageOrderByWithRelationInput | DemandeStageOrderByWithRelationInput[]
    cursor?: DemandeStageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DemandeStageScalarFieldEnum | DemandeStageScalarFieldEnum[]
  }

  /**
   * Structure.stages
   */
  export type Structure$stagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    where?: StageWhereInput
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    cursor?: StageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Structure.stagiaires
   */
  export type Structure$stagiairesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    where?: StagiaireWhereInput
    orderBy?: StagiaireOrderByWithRelationInput | StagiaireOrderByWithRelationInput[]
    cursor?: StagiaireWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StagiaireScalarFieldEnum | StagiaireScalarFieldEnum[]
  }

  /**
   * Structure.parent
   */
  export type Structure$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    where?: StructureWhereInput
  }

  /**
   * Structure.children
   */
  export type Structure$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    where?: StructureWhereInput
    orderBy?: StructureOrderByWithRelationInput | StructureOrderByWithRelationInput[]
    cursor?: StructureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StructureScalarFieldEnum | StructureScalarFieldEnum[]
  }

  /**
   * Structure.users
   */
  export type Structure$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Structure.tuteurs
   */
  export type Structure$tuteursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    where?: TuteurWhereInput
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    cursor?: TuteurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TuteurScalarFieldEnum | TuteurScalarFieldEnum[]
  }

  /**
   * Structure.services
   */
  export type Structure$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    cursor?: ServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Structure without action
   */
  export type StructureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
  }


  /**
   * Model Tuteur
   */

  export type AggregateTuteur = {
    _count: TuteurCountAggregateOutputType | null
    _avg: TuteurAvgAggregateOutputType | null
    _sum: TuteurSumAggregateOutputType | null
    _min: TuteurMinAggregateOutputType | null
    _max: TuteurMaxAggregateOutputType | null
  }

  export type TuteurAvgAggregateOutputType = {
    structureId: number | null
    serviceId: number | null
  }

  export type TuteurSumAggregateOutputType = {
    structureId: number | null
    serviceId: number | null
  }

  export type TuteurMinAggregateOutputType = {
    id: string | null
    userId: string | null
    structureId: number | null
    serviceId: number | null
  }

  export type TuteurMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    structureId: number | null
    serviceId: number | null
  }

  export type TuteurCountAggregateOutputType = {
    id: number
    userId: number
    structureId: number
    serviceId: number
    _all: number
  }


  export type TuteurAvgAggregateInputType = {
    structureId?: true
    serviceId?: true
  }

  export type TuteurSumAggregateInputType = {
    structureId?: true
    serviceId?: true
  }

  export type TuteurMinAggregateInputType = {
    id?: true
    userId?: true
    structureId?: true
    serviceId?: true
  }

  export type TuteurMaxAggregateInputType = {
    id?: true
    userId?: true
    structureId?: true
    serviceId?: true
  }

  export type TuteurCountAggregateInputType = {
    id?: true
    userId?: true
    structureId?: true
    serviceId?: true
    _all?: true
  }

  export type TuteurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tuteur to aggregate.
     */
    where?: TuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tuteurs to fetch.
     */
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tuteurs
    **/
    _count?: true | TuteurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TuteurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TuteurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TuteurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TuteurMaxAggregateInputType
  }

  export type GetTuteurAggregateType<T extends TuteurAggregateArgs> = {
        [P in keyof T & keyof AggregateTuteur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTuteur[P]>
      : GetScalarType<T[P], AggregateTuteur[P]>
  }




  export type TuteurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TuteurWhereInput
    orderBy?: TuteurOrderByWithAggregationInput | TuteurOrderByWithAggregationInput[]
    by: TuteurScalarFieldEnum[] | TuteurScalarFieldEnum
    having?: TuteurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TuteurCountAggregateInputType | true
    _avg?: TuteurAvgAggregateInputType
    _sum?: TuteurSumAggregateInputType
    _min?: TuteurMinAggregateInputType
    _max?: TuteurMaxAggregateInputType
  }

  export type TuteurGroupByOutputType = {
    id: string
    userId: string
    structureId: number | null
    serviceId: number | null
    _count: TuteurCountAggregateOutputType | null
    _avg: TuteurAvgAggregateOutputType | null
    _sum: TuteurSumAggregateOutputType | null
    _min: TuteurMinAggregateOutputType | null
    _max: TuteurMaxAggregateOutputType | null
  }

  type GetTuteurGroupByPayload<T extends TuteurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TuteurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TuteurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TuteurGroupByOutputType[P]>
            : GetScalarType<T[P], TuteurGroupByOutputType[P]>
        }
      >
    >


  export type TuteurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    structureId?: boolean
    serviceId?: boolean
    stages?: boolean | Tuteur$stagesArgs<ExtArgs>
    stagiaires?: boolean | Tuteur$stagiairesArgs<ExtArgs>
    themes?: boolean | Tuteur$themesArgs<ExtArgs>
    structure?: boolean | Tuteur$structureArgs<ExtArgs>
    service?: boolean | Tuteur$serviceArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | TuteurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tuteur"]>

  export type TuteurSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    structureId?: boolean
    serviceId?: boolean
    structure?: boolean | Tuteur$structureArgs<ExtArgs>
    service?: boolean | Tuteur$serviceArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tuteur"]>

  export type TuteurSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    structureId?: boolean
    serviceId?: boolean
    structure?: boolean | Tuteur$structureArgs<ExtArgs>
    service?: boolean | Tuteur$serviceArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tuteur"]>

  export type TuteurSelectScalar = {
    id?: boolean
    userId?: boolean
    structureId?: boolean
    serviceId?: boolean
  }

  export type TuteurOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "structureId" | "serviceId", ExtArgs["result"]["tuteur"]>
  export type TuteurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stages?: boolean | Tuteur$stagesArgs<ExtArgs>
    stagiaires?: boolean | Tuteur$stagiairesArgs<ExtArgs>
    themes?: boolean | Tuteur$themesArgs<ExtArgs>
    structure?: boolean | Tuteur$structureArgs<ExtArgs>
    service?: boolean | Tuteur$serviceArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | TuteurCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TuteurIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    structure?: boolean | Tuteur$structureArgs<ExtArgs>
    service?: boolean | Tuteur$serviceArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TuteurIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    structure?: boolean | Tuteur$structureArgs<ExtArgs>
    service?: boolean | Tuteur$serviceArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TuteurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tuteur"
    objects: {
      stages: Prisma.$StagePayload<ExtArgs>[]
      stagiaires: Prisma.$StagiairePayload<ExtArgs>[]
      themes: Prisma.$ThemeTuteurPayload<ExtArgs>[]
      structure: Prisma.$StructurePayload<ExtArgs> | null
      service: Prisma.$ServicePayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      structureId: number | null
      serviceId: number | null
    }, ExtArgs["result"]["tuteur"]>
    composites: {}
  }

  type TuteurGetPayload<S extends boolean | null | undefined | TuteurDefaultArgs> = $Result.GetResult<Prisma.$TuteurPayload, S>

  type TuteurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TuteurFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TuteurCountAggregateInputType | true
    }

  export interface TuteurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tuteur'], meta: { name: 'Tuteur' } }
    /**
     * Find zero or one Tuteur that matches the filter.
     * @param {TuteurFindUniqueArgs} args - Arguments to find a Tuteur
     * @example
     * // Get one Tuteur
     * const tuteur = await prisma.tuteur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TuteurFindUniqueArgs>(args: SelectSubset<T, TuteurFindUniqueArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tuteur that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TuteurFindUniqueOrThrowArgs} args - Arguments to find a Tuteur
     * @example
     * // Get one Tuteur
     * const tuteur = await prisma.tuteur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TuteurFindUniqueOrThrowArgs>(args: SelectSubset<T, TuteurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tuteur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurFindFirstArgs} args - Arguments to find a Tuteur
     * @example
     * // Get one Tuteur
     * const tuteur = await prisma.tuteur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TuteurFindFirstArgs>(args?: SelectSubset<T, TuteurFindFirstArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tuteur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurFindFirstOrThrowArgs} args - Arguments to find a Tuteur
     * @example
     * // Get one Tuteur
     * const tuteur = await prisma.tuteur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TuteurFindFirstOrThrowArgs>(args?: SelectSubset<T, TuteurFindFirstOrThrowArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tuteurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tuteurs
     * const tuteurs = await prisma.tuteur.findMany()
     * 
     * // Get first 10 Tuteurs
     * const tuteurs = await prisma.tuteur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tuteurWithIdOnly = await prisma.tuteur.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TuteurFindManyArgs>(args?: SelectSubset<T, TuteurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tuteur.
     * @param {TuteurCreateArgs} args - Arguments to create a Tuteur.
     * @example
     * // Create one Tuteur
     * const Tuteur = await prisma.tuteur.create({
     *   data: {
     *     // ... data to create a Tuteur
     *   }
     * })
     * 
     */
    create<T extends TuteurCreateArgs>(args: SelectSubset<T, TuteurCreateArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tuteurs.
     * @param {TuteurCreateManyArgs} args - Arguments to create many Tuteurs.
     * @example
     * // Create many Tuteurs
     * const tuteur = await prisma.tuteur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TuteurCreateManyArgs>(args?: SelectSubset<T, TuteurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tuteurs and returns the data saved in the database.
     * @param {TuteurCreateManyAndReturnArgs} args - Arguments to create many Tuteurs.
     * @example
     * // Create many Tuteurs
     * const tuteur = await prisma.tuteur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tuteurs and only return the `id`
     * const tuteurWithIdOnly = await prisma.tuteur.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TuteurCreateManyAndReturnArgs>(args?: SelectSubset<T, TuteurCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tuteur.
     * @param {TuteurDeleteArgs} args - Arguments to delete one Tuteur.
     * @example
     * // Delete one Tuteur
     * const Tuteur = await prisma.tuteur.delete({
     *   where: {
     *     // ... filter to delete one Tuteur
     *   }
     * })
     * 
     */
    delete<T extends TuteurDeleteArgs>(args: SelectSubset<T, TuteurDeleteArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tuteur.
     * @param {TuteurUpdateArgs} args - Arguments to update one Tuteur.
     * @example
     * // Update one Tuteur
     * const tuteur = await prisma.tuteur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TuteurUpdateArgs>(args: SelectSubset<T, TuteurUpdateArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tuteurs.
     * @param {TuteurDeleteManyArgs} args - Arguments to filter Tuteurs to delete.
     * @example
     * // Delete a few Tuteurs
     * const { count } = await prisma.tuteur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TuteurDeleteManyArgs>(args?: SelectSubset<T, TuteurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tuteurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tuteurs
     * const tuteur = await prisma.tuteur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TuteurUpdateManyArgs>(args: SelectSubset<T, TuteurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tuteurs and returns the data updated in the database.
     * @param {TuteurUpdateManyAndReturnArgs} args - Arguments to update many Tuteurs.
     * @example
     * // Update many Tuteurs
     * const tuteur = await prisma.tuteur.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tuteurs and only return the `id`
     * const tuteurWithIdOnly = await prisma.tuteur.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TuteurUpdateManyAndReturnArgs>(args: SelectSubset<T, TuteurUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tuteur.
     * @param {TuteurUpsertArgs} args - Arguments to update or create a Tuteur.
     * @example
     * // Update or create a Tuteur
     * const tuteur = await prisma.tuteur.upsert({
     *   create: {
     *     // ... data to create a Tuteur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tuteur we want to update
     *   }
     * })
     */
    upsert<T extends TuteurUpsertArgs>(args: SelectSubset<T, TuteurUpsertArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tuteurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurCountArgs} args - Arguments to filter Tuteurs to count.
     * @example
     * // Count the number of Tuteurs
     * const count = await prisma.tuteur.count({
     *   where: {
     *     // ... the filter for the Tuteurs we want to count
     *   }
     * })
    **/
    count<T extends TuteurCountArgs>(
      args?: Subset<T, TuteurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TuteurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tuteur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TuteurAggregateArgs>(args: Subset<T, TuteurAggregateArgs>): Prisma.PrismaPromise<GetTuteurAggregateType<T>>

    /**
     * Group by Tuteur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TuteurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TuteurGroupByArgs['orderBy'] }
        : { orderBy?: TuteurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TuteurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTuteurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tuteur model
   */
  readonly fields: TuteurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tuteur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TuteurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stages<T extends Tuteur$stagesArgs<ExtArgs> = {}>(args?: Subset<T, Tuteur$stagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stagiaires<T extends Tuteur$stagiairesArgs<ExtArgs> = {}>(args?: Subset<T, Tuteur$stagiairesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    themes<T extends Tuteur$themesArgs<ExtArgs> = {}>(args?: Subset<T, Tuteur$themesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    structure<T extends Tuteur$structureArgs<ExtArgs> = {}>(args?: Subset<T, Tuteur$structureArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    service<T extends Tuteur$serviceArgs<ExtArgs> = {}>(args?: Subset<T, Tuteur$serviceArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tuteur model
   */
  interface TuteurFieldRefs {
    readonly id: FieldRef<"Tuteur", 'String'>
    readonly userId: FieldRef<"Tuteur", 'String'>
    readonly structureId: FieldRef<"Tuteur", 'Int'>
    readonly serviceId: FieldRef<"Tuteur", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Tuteur findUnique
   */
  export type TuteurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteur to fetch.
     */
    where: TuteurWhereUniqueInput
  }

  /**
   * Tuteur findUniqueOrThrow
   */
  export type TuteurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteur to fetch.
     */
    where: TuteurWhereUniqueInput
  }

  /**
   * Tuteur findFirst
   */
  export type TuteurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteur to fetch.
     */
    where?: TuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tuteurs to fetch.
     */
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tuteurs.
     */
    cursor?: TuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tuteurs.
     */
    distinct?: TuteurScalarFieldEnum | TuteurScalarFieldEnum[]
  }

  /**
   * Tuteur findFirstOrThrow
   */
  export type TuteurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteur to fetch.
     */
    where?: TuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tuteurs to fetch.
     */
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tuteurs.
     */
    cursor?: TuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tuteurs.
     */
    distinct?: TuteurScalarFieldEnum | TuteurScalarFieldEnum[]
  }

  /**
   * Tuteur findMany
   */
  export type TuteurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteurs to fetch.
     */
    where?: TuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tuteurs to fetch.
     */
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tuteurs.
     */
    cursor?: TuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tuteurs.
     */
    skip?: number
    distinct?: TuteurScalarFieldEnum | TuteurScalarFieldEnum[]
  }

  /**
   * Tuteur create
   */
  export type TuteurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * The data needed to create a Tuteur.
     */
    data: XOR<TuteurCreateInput, TuteurUncheckedCreateInput>
  }

  /**
   * Tuteur createMany
   */
  export type TuteurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tuteurs.
     */
    data: TuteurCreateManyInput | TuteurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tuteur createManyAndReturn
   */
  export type TuteurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * The data used to create many Tuteurs.
     */
    data: TuteurCreateManyInput | TuteurCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tuteur update
   */
  export type TuteurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * The data needed to update a Tuteur.
     */
    data: XOR<TuteurUpdateInput, TuteurUncheckedUpdateInput>
    /**
     * Choose, which Tuteur to update.
     */
    where: TuteurWhereUniqueInput
  }

  /**
   * Tuteur updateMany
   */
  export type TuteurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tuteurs.
     */
    data: XOR<TuteurUpdateManyMutationInput, TuteurUncheckedUpdateManyInput>
    /**
     * Filter which Tuteurs to update
     */
    where?: TuteurWhereInput
    /**
     * Limit how many Tuteurs to update.
     */
    limit?: number
  }

  /**
   * Tuteur updateManyAndReturn
   */
  export type TuteurUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * The data used to update Tuteurs.
     */
    data: XOR<TuteurUpdateManyMutationInput, TuteurUncheckedUpdateManyInput>
    /**
     * Filter which Tuteurs to update
     */
    where?: TuteurWhereInput
    /**
     * Limit how many Tuteurs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tuteur upsert
   */
  export type TuteurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * The filter to search for the Tuteur to update in case it exists.
     */
    where: TuteurWhereUniqueInput
    /**
     * In case the Tuteur found by the `where` argument doesn't exist, create a new Tuteur with this data.
     */
    create: XOR<TuteurCreateInput, TuteurUncheckedCreateInput>
    /**
     * In case the Tuteur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TuteurUpdateInput, TuteurUncheckedUpdateInput>
  }

  /**
   * Tuteur delete
   */
  export type TuteurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter which Tuteur to delete.
     */
    where: TuteurWhereUniqueInput
  }

  /**
   * Tuteur deleteMany
   */
  export type TuteurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tuteurs to delete
     */
    where?: TuteurWhereInput
    /**
     * Limit how many Tuteurs to delete.
     */
    limit?: number
  }

  /**
   * Tuteur.stages
   */
  export type Tuteur$stagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    where?: StageWhereInput
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    cursor?: StageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Tuteur.stagiaires
   */
  export type Tuteur$stagiairesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    where?: StagiaireWhereInput
    orderBy?: StagiaireOrderByWithRelationInput | StagiaireOrderByWithRelationInput[]
    cursor?: StagiaireWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StagiaireScalarFieldEnum | StagiaireScalarFieldEnum[]
  }

  /**
   * Tuteur.themes
   */
  export type Tuteur$themesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    where?: ThemeTuteurWhereInput
    orderBy?: ThemeTuteurOrderByWithRelationInput | ThemeTuteurOrderByWithRelationInput[]
    cursor?: ThemeTuteurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThemeTuteurScalarFieldEnum | ThemeTuteurScalarFieldEnum[]
  }

  /**
   * Tuteur.structure
   */
  export type Tuteur$structureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    where?: StructureWhereInput
  }

  /**
   * Tuteur.service
   */
  export type Tuteur$serviceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
  }

  /**
   * Tuteur without action
   */
  export type TuteurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
  }


  /**
   * Model Stagiaire
   */

  export type AggregateStagiaire = {
    _count: StagiaireCountAggregateOutputType | null
    _avg: StagiaireAvgAggregateOutputType | null
    _sum: StagiaireSumAggregateOutputType | null
    _min: StagiaireMinAggregateOutputType | null
    _max: StagiaireMaxAggregateOutputType | null
  }

  export type StagiaireAvgAggregateOutputType = {
    structureAffecteeId: number | null
    serviceAffecteId: number | null
  }

  export type StagiaireSumAggregateOutputType = {
    structureAffecteeId: number | null
    serviceAffecteId: number | null
  }

  export type StagiaireMinAggregateOutputType = {
    id: string | null
    userId: string | null
    structureAffecteeId: number | null
    serviceAffecteId: number | null
    tuteurId: string | null
  }

  export type StagiaireMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    structureAffecteeId: number | null
    serviceAffecteId: number | null
    tuteurId: string | null
  }

  export type StagiaireCountAggregateOutputType = {
    id: number
    userId: number
    structureAffecteeId: number
    serviceAffecteId: number
    tuteurId: number
    _all: number
  }


  export type StagiaireAvgAggregateInputType = {
    structureAffecteeId?: true
    serviceAffecteId?: true
  }

  export type StagiaireSumAggregateInputType = {
    structureAffecteeId?: true
    serviceAffecteId?: true
  }

  export type StagiaireMinAggregateInputType = {
    id?: true
    userId?: true
    structureAffecteeId?: true
    serviceAffecteId?: true
    tuteurId?: true
  }

  export type StagiaireMaxAggregateInputType = {
    id?: true
    userId?: true
    structureAffecteeId?: true
    serviceAffecteId?: true
    tuteurId?: true
  }

  export type StagiaireCountAggregateInputType = {
    id?: true
    userId?: true
    structureAffecteeId?: true
    serviceAffecteId?: true
    tuteurId?: true
    _all?: true
  }

  export type StagiaireAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stagiaire to aggregate.
     */
    where?: StagiaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stagiaires to fetch.
     */
    orderBy?: StagiaireOrderByWithRelationInput | StagiaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StagiaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stagiaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stagiaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stagiaires
    **/
    _count?: true | StagiaireCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StagiaireAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StagiaireSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StagiaireMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StagiaireMaxAggregateInputType
  }

  export type GetStagiaireAggregateType<T extends StagiaireAggregateArgs> = {
        [P in keyof T & keyof AggregateStagiaire]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStagiaire[P]>
      : GetScalarType<T[P], AggregateStagiaire[P]>
  }




  export type StagiaireGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StagiaireWhereInput
    orderBy?: StagiaireOrderByWithAggregationInput | StagiaireOrderByWithAggregationInput[]
    by: StagiaireScalarFieldEnum[] | StagiaireScalarFieldEnum
    having?: StagiaireScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StagiaireCountAggregateInputType | true
    _avg?: StagiaireAvgAggregateInputType
    _sum?: StagiaireSumAggregateInputType
    _min?: StagiaireMinAggregateInputType
    _max?: StagiaireMaxAggregateInputType
  }

  export type StagiaireGroupByOutputType = {
    id: string
    userId: string
    structureAffecteeId: number | null
    serviceAffecteId: number | null
    tuteurId: string | null
    _count: StagiaireCountAggregateOutputType | null
    _avg: StagiaireAvgAggregateOutputType | null
    _sum: StagiaireSumAggregateOutputType | null
    _min: StagiaireMinAggregateOutputType | null
    _max: StagiaireMaxAggregateOutputType | null
  }

  type GetStagiaireGroupByPayload<T extends StagiaireGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StagiaireGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StagiaireGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StagiaireGroupByOutputType[P]>
            : GetScalarType<T[P], StagiaireGroupByOutputType[P]>
        }
      >
    >


  export type StagiaireSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    structureAffecteeId?: boolean
    serviceAffecteId?: boolean
    tuteurId?: boolean
    demandesStages?: boolean | Stagiaire$demandesStagesArgs<ExtArgs>
    stages?: boolean | Stagiaire$stagesArgs<ExtArgs>
    structure?: boolean | Stagiaire$structureArgs<ExtArgs>
    service?: boolean | Stagiaire$serviceArgs<ExtArgs>
    tuteur?: boolean | Stagiaire$tuteurArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | StagiaireCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stagiaire"]>

  export type StagiaireSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    structureAffecteeId?: boolean
    serviceAffecteId?: boolean
    tuteurId?: boolean
    structure?: boolean | Stagiaire$structureArgs<ExtArgs>
    service?: boolean | Stagiaire$serviceArgs<ExtArgs>
    tuteur?: boolean | Stagiaire$tuteurArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stagiaire"]>

  export type StagiaireSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    structureAffecteeId?: boolean
    serviceAffecteId?: boolean
    tuteurId?: boolean
    structure?: boolean | Stagiaire$structureArgs<ExtArgs>
    service?: boolean | Stagiaire$serviceArgs<ExtArgs>
    tuteur?: boolean | Stagiaire$tuteurArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stagiaire"]>

  export type StagiaireSelectScalar = {
    id?: boolean
    userId?: boolean
    structureAffecteeId?: boolean
    serviceAffecteId?: boolean
    tuteurId?: boolean
  }

  export type StagiaireOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "structureAffecteeId" | "serviceAffecteId" | "tuteurId", ExtArgs["result"]["stagiaire"]>
  export type StagiaireInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    demandesStages?: boolean | Stagiaire$demandesStagesArgs<ExtArgs>
    stages?: boolean | Stagiaire$stagesArgs<ExtArgs>
    structure?: boolean | Stagiaire$structureArgs<ExtArgs>
    service?: boolean | Stagiaire$serviceArgs<ExtArgs>
    tuteur?: boolean | Stagiaire$tuteurArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | StagiaireCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StagiaireIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    structure?: boolean | Stagiaire$structureArgs<ExtArgs>
    service?: boolean | Stagiaire$serviceArgs<ExtArgs>
    tuteur?: boolean | Stagiaire$tuteurArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StagiaireIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    structure?: boolean | Stagiaire$structureArgs<ExtArgs>
    service?: boolean | Stagiaire$serviceArgs<ExtArgs>
    tuteur?: boolean | Stagiaire$tuteurArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StagiairePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stagiaire"
    objects: {
      demandesStages: Prisma.$DemandeStagePayload<ExtArgs>[]
      stages: Prisma.$StagePayload<ExtArgs>[]
      structure: Prisma.$StructurePayload<ExtArgs> | null
      service: Prisma.$ServicePayload<ExtArgs> | null
      tuteur: Prisma.$TuteurPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      structureAffecteeId: number | null
      serviceAffecteId: number | null
      tuteurId: string | null
    }, ExtArgs["result"]["stagiaire"]>
    composites: {}
  }

  type StagiaireGetPayload<S extends boolean | null | undefined | StagiaireDefaultArgs> = $Result.GetResult<Prisma.$StagiairePayload, S>

  type StagiaireCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StagiaireFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StagiaireCountAggregateInputType | true
    }

  export interface StagiaireDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stagiaire'], meta: { name: 'Stagiaire' } }
    /**
     * Find zero or one Stagiaire that matches the filter.
     * @param {StagiaireFindUniqueArgs} args - Arguments to find a Stagiaire
     * @example
     * // Get one Stagiaire
     * const stagiaire = await prisma.stagiaire.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StagiaireFindUniqueArgs>(args: SelectSubset<T, StagiaireFindUniqueArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Stagiaire that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StagiaireFindUniqueOrThrowArgs} args - Arguments to find a Stagiaire
     * @example
     * // Get one Stagiaire
     * const stagiaire = await prisma.stagiaire.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StagiaireFindUniqueOrThrowArgs>(args: SelectSubset<T, StagiaireFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stagiaire that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagiaireFindFirstArgs} args - Arguments to find a Stagiaire
     * @example
     * // Get one Stagiaire
     * const stagiaire = await prisma.stagiaire.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StagiaireFindFirstArgs>(args?: SelectSubset<T, StagiaireFindFirstArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stagiaire that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagiaireFindFirstOrThrowArgs} args - Arguments to find a Stagiaire
     * @example
     * // Get one Stagiaire
     * const stagiaire = await prisma.stagiaire.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StagiaireFindFirstOrThrowArgs>(args?: SelectSubset<T, StagiaireFindFirstOrThrowArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stagiaires that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagiaireFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stagiaires
     * const stagiaires = await prisma.stagiaire.findMany()
     * 
     * // Get first 10 Stagiaires
     * const stagiaires = await prisma.stagiaire.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stagiaireWithIdOnly = await prisma.stagiaire.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StagiaireFindManyArgs>(args?: SelectSubset<T, StagiaireFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Stagiaire.
     * @param {StagiaireCreateArgs} args - Arguments to create a Stagiaire.
     * @example
     * // Create one Stagiaire
     * const Stagiaire = await prisma.stagiaire.create({
     *   data: {
     *     // ... data to create a Stagiaire
     *   }
     * })
     * 
     */
    create<T extends StagiaireCreateArgs>(args: SelectSubset<T, StagiaireCreateArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stagiaires.
     * @param {StagiaireCreateManyArgs} args - Arguments to create many Stagiaires.
     * @example
     * // Create many Stagiaires
     * const stagiaire = await prisma.stagiaire.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StagiaireCreateManyArgs>(args?: SelectSubset<T, StagiaireCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stagiaires and returns the data saved in the database.
     * @param {StagiaireCreateManyAndReturnArgs} args - Arguments to create many Stagiaires.
     * @example
     * // Create many Stagiaires
     * const stagiaire = await prisma.stagiaire.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stagiaires and only return the `id`
     * const stagiaireWithIdOnly = await prisma.stagiaire.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StagiaireCreateManyAndReturnArgs>(args?: SelectSubset<T, StagiaireCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Stagiaire.
     * @param {StagiaireDeleteArgs} args - Arguments to delete one Stagiaire.
     * @example
     * // Delete one Stagiaire
     * const Stagiaire = await prisma.stagiaire.delete({
     *   where: {
     *     // ... filter to delete one Stagiaire
     *   }
     * })
     * 
     */
    delete<T extends StagiaireDeleteArgs>(args: SelectSubset<T, StagiaireDeleteArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Stagiaire.
     * @param {StagiaireUpdateArgs} args - Arguments to update one Stagiaire.
     * @example
     * // Update one Stagiaire
     * const stagiaire = await prisma.stagiaire.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StagiaireUpdateArgs>(args: SelectSubset<T, StagiaireUpdateArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stagiaires.
     * @param {StagiaireDeleteManyArgs} args - Arguments to filter Stagiaires to delete.
     * @example
     * // Delete a few Stagiaires
     * const { count } = await prisma.stagiaire.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StagiaireDeleteManyArgs>(args?: SelectSubset<T, StagiaireDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stagiaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagiaireUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stagiaires
     * const stagiaire = await prisma.stagiaire.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StagiaireUpdateManyArgs>(args: SelectSubset<T, StagiaireUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stagiaires and returns the data updated in the database.
     * @param {StagiaireUpdateManyAndReturnArgs} args - Arguments to update many Stagiaires.
     * @example
     * // Update many Stagiaires
     * const stagiaire = await prisma.stagiaire.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stagiaires and only return the `id`
     * const stagiaireWithIdOnly = await prisma.stagiaire.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StagiaireUpdateManyAndReturnArgs>(args: SelectSubset<T, StagiaireUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Stagiaire.
     * @param {StagiaireUpsertArgs} args - Arguments to update or create a Stagiaire.
     * @example
     * // Update or create a Stagiaire
     * const stagiaire = await prisma.stagiaire.upsert({
     *   create: {
     *     // ... data to create a Stagiaire
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stagiaire we want to update
     *   }
     * })
     */
    upsert<T extends StagiaireUpsertArgs>(args: SelectSubset<T, StagiaireUpsertArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stagiaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagiaireCountArgs} args - Arguments to filter Stagiaires to count.
     * @example
     * // Count the number of Stagiaires
     * const count = await prisma.stagiaire.count({
     *   where: {
     *     // ... the filter for the Stagiaires we want to count
     *   }
     * })
    **/
    count<T extends StagiaireCountArgs>(
      args?: Subset<T, StagiaireCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StagiaireCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stagiaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagiaireAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StagiaireAggregateArgs>(args: Subset<T, StagiaireAggregateArgs>): Prisma.PrismaPromise<GetStagiaireAggregateType<T>>

    /**
     * Group by Stagiaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagiaireGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StagiaireGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StagiaireGroupByArgs['orderBy'] }
        : { orderBy?: StagiaireGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StagiaireGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStagiaireGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stagiaire model
   */
  readonly fields: StagiaireFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stagiaire.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StagiaireClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    demandesStages<T extends Stagiaire$demandesStagesArgs<ExtArgs> = {}>(args?: Subset<T, Stagiaire$demandesStagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stages<T extends Stagiaire$stagesArgs<ExtArgs> = {}>(args?: Subset<T, Stagiaire$stagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    structure<T extends Stagiaire$structureArgs<ExtArgs> = {}>(args?: Subset<T, Stagiaire$structureArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    service<T extends Stagiaire$serviceArgs<ExtArgs> = {}>(args?: Subset<T, Stagiaire$serviceArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tuteur<T extends Stagiaire$tuteurArgs<ExtArgs> = {}>(args?: Subset<T, Stagiaire$tuteurArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stagiaire model
   */
  interface StagiaireFieldRefs {
    readonly id: FieldRef<"Stagiaire", 'String'>
    readonly userId: FieldRef<"Stagiaire", 'String'>
    readonly structureAffecteeId: FieldRef<"Stagiaire", 'Int'>
    readonly serviceAffecteId: FieldRef<"Stagiaire", 'Int'>
    readonly tuteurId: FieldRef<"Stagiaire", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Stagiaire findUnique
   */
  export type StagiaireFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * Filter, which Stagiaire to fetch.
     */
    where: StagiaireWhereUniqueInput
  }

  /**
   * Stagiaire findUniqueOrThrow
   */
  export type StagiaireFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * Filter, which Stagiaire to fetch.
     */
    where: StagiaireWhereUniqueInput
  }

  /**
   * Stagiaire findFirst
   */
  export type StagiaireFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * Filter, which Stagiaire to fetch.
     */
    where?: StagiaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stagiaires to fetch.
     */
    orderBy?: StagiaireOrderByWithRelationInput | StagiaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stagiaires.
     */
    cursor?: StagiaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stagiaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stagiaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stagiaires.
     */
    distinct?: StagiaireScalarFieldEnum | StagiaireScalarFieldEnum[]
  }

  /**
   * Stagiaire findFirstOrThrow
   */
  export type StagiaireFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * Filter, which Stagiaire to fetch.
     */
    where?: StagiaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stagiaires to fetch.
     */
    orderBy?: StagiaireOrderByWithRelationInput | StagiaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stagiaires.
     */
    cursor?: StagiaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stagiaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stagiaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stagiaires.
     */
    distinct?: StagiaireScalarFieldEnum | StagiaireScalarFieldEnum[]
  }

  /**
   * Stagiaire findMany
   */
  export type StagiaireFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * Filter, which Stagiaires to fetch.
     */
    where?: StagiaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stagiaires to fetch.
     */
    orderBy?: StagiaireOrderByWithRelationInput | StagiaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stagiaires.
     */
    cursor?: StagiaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stagiaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stagiaires.
     */
    skip?: number
    distinct?: StagiaireScalarFieldEnum | StagiaireScalarFieldEnum[]
  }

  /**
   * Stagiaire create
   */
  export type StagiaireCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * The data needed to create a Stagiaire.
     */
    data: XOR<StagiaireCreateInput, StagiaireUncheckedCreateInput>
  }

  /**
   * Stagiaire createMany
   */
  export type StagiaireCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stagiaires.
     */
    data: StagiaireCreateManyInput | StagiaireCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stagiaire createManyAndReturn
   */
  export type StagiaireCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * The data used to create many Stagiaires.
     */
    data: StagiaireCreateManyInput | StagiaireCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stagiaire update
   */
  export type StagiaireUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * The data needed to update a Stagiaire.
     */
    data: XOR<StagiaireUpdateInput, StagiaireUncheckedUpdateInput>
    /**
     * Choose, which Stagiaire to update.
     */
    where: StagiaireWhereUniqueInput
  }

  /**
   * Stagiaire updateMany
   */
  export type StagiaireUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stagiaires.
     */
    data: XOR<StagiaireUpdateManyMutationInput, StagiaireUncheckedUpdateManyInput>
    /**
     * Filter which Stagiaires to update
     */
    where?: StagiaireWhereInput
    /**
     * Limit how many Stagiaires to update.
     */
    limit?: number
  }

  /**
   * Stagiaire updateManyAndReturn
   */
  export type StagiaireUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * The data used to update Stagiaires.
     */
    data: XOR<StagiaireUpdateManyMutationInput, StagiaireUncheckedUpdateManyInput>
    /**
     * Filter which Stagiaires to update
     */
    where?: StagiaireWhereInput
    /**
     * Limit how many Stagiaires to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stagiaire upsert
   */
  export type StagiaireUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * The filter to search for the Stagiaire to update in case it exists.
     */
    where: StagiaireWhereUniqueInput
    /**
     * In case the Stagiaire found by the `where` argument doesn't exist, create a new Stagiaire with this data.
     */
    create: XOR<StagiaireCreateInput, StagiaireUncheckedCreateInput>
    /**
     * In case the Stagiaire was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StagiaireUpdateInput, StagiaireUncheckedUpdateInput>
  }

  /**
   * Stagiaire delete
   */
  export type StagiaireDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * Filter which Stagiaire to delete.
     */
    where: StagiaireWhereUniqueInput
  }

  /**
   * Stagiaire deleteMany
   */
  export type StagiaireDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stagiaires to delete
     */
    where?: StagiaireWhereInput
    /**
     * Limit how many Stagiaires to delete.
     */
    limit?: number
  }

  /**
   * Stagiaire.demandesStages
   */
  export type Stagiaire$demandesStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    where?: DemandeStageWhereInput
    orderBy?: DemandeStageOrderByWithRelationInput | DemandeStageOrderByWithRelationInput[]
    cursor?: DemandeStageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DemandeStageScalarFieldEnum | DemandeStageScalarFieldEnum[]
  }

  /**
   * Stagiaire.stages
   */
  export type Stagiaire$stagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    where?: StageWhereInput
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    cursor?: StageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Stagiaire.structure
   */
  export type Stagiaire$structureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    where?: StructureWhereInput
  }

  /**
   * Stagiaire.service
   */
  export type Stagiaire$serviceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
  }

  /**
   * Stagiaire.tuteur
   */
  export type Stagiaire$tuteurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    where?: TuteurWhereInput
  }

  /**
   * Stagiaire without action
   */
  export type StagiaireDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
  }


  /**
   * Model DemandeStage
   */

  export type AggregateDemandeStage = {
    _count: DemandeStageCountAggregateOutputType | null
    _avg: DemandeStageAvgAggregateOutputType | null
    _sum: DemandeStageSumAggregateOutputType | null
    _min: DemandeStageMinAggregateOutputType | null
    _max: DemandeStageMaxAggregateOutputType | null
  }

  export type DemandeStageAvgAggregateOutputType = {
    structureCibleId: number | null
  }

  export type DemandeStageSumAggregateOutputType = {
    structureCibleId: number | null
  }

  export type DemandeStageMinAggregateOutputType = {
    id: string | null
    stagiaireId: string | null
    structureCibleId: number | null
    statut: $Enums.StatutDemande | null
    dateDebut: Date | null
    dateFin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DemandeStageMaxAggregateOutputType = {
    id: string | null
    stagiaireId: string | null
    structureCibleId: number | null
    statut: $Enums.StatutDemande | null
    dateDebut: Date | null
    dateFin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DemandeStageCountAggregateOutputType = {
    id: number
    stagiaireId: number
    structureCibleId: number
    statut: number
    dateDebut: number
    dateFin: number
    createdAt: number
    updatedAt: number
    details: number
    _all: number
  }


  export type DemandeStageAvgAggregateInputType = {
    structureCibleId?: true
  }

  export type DemandeStageSumAggregateInputType = {
    structureCibleId?: true
  }

  export type DemandeStageMinAggregateInputType = {
    id?: true
    stagiaireId?: true
    structureCibleId?: true
    statut?: true
    dateDebut?: true
    dateFin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DemandeStageMaxAggregateInputType = {
    id?: true
    stagiaireId?: true
    structureCibleId?: true
    statut?: true
    dateDebut?: true
    dateFin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DemandeStageCountAggregateInputType = {
    id?: true
    stagiaireId?: true
    structureCibleId?: true
    statut?: true
    dateDebut?: true
    dateFin?: true
    createdAt?: true
    updatedAt?: true
    details?: true
    _all?: true
  }

  export type DemandeStageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DemandeStage to aggregate.
     */
    where?: DemandeStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DemandeStages to fetch.
     */
    orderBy?: DemandeStageOrderByWithRelationInput | DemandeStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DemandeStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DemandeStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DemandeStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DemandeStages
    **/
    _count?: true | DemandeStageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DemandeStageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DemandeStageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DemandeStageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DemandeStageMaxAggregateInputType
  }

  export type GetDemandeStageAggregateType<T extends DemandeStageAggregateArgs> = {
        [P in keyof T & keyof AggregateDemandeStage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDemandeStage[P]>
      : GetScalarType<T[P], AggregateDemandeStage[P]>
  }




  export type DemandeStageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DemandeStageWhereInput
    orderBy?: DemandeStageOrderByWithAggregationInput | DemandeStageOrderByWithAggregationInput[]
    by: DemandeStageScalarFieldEnum[] | DemandeStageScalarFieldEnum
    having?: DemandeStageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DemandeStageCountAggregateInputType | true
    _avg?: DemandeStageAvgAggregateInputType
    _sum?: DemandeStageSumAggregateInputType
    _min?: DemandeStageMinAggregateInputType
    _max?: DemandeStageMaxAggregateInputType
  }

  export type DemandeStageGroupByOutputType = {
    id: string
    stagiaireId: string
    structureCibleId: number | null
    statut: $Enums.StatutDemande
    dateDebut: Date
    dateFin: Date
    createdAt: Date
    updatedAt: Date
    details: JsonValue | null
    _count: DemandeStageCountAggregateOutputType | null
    _avg: DemandeStageAvgAggregateOutputType | null
    _sum: DemandeStageSumAggregateOutputType | null
    _min: DemandeStageMinAggregateOutputType | null
    _max: DemandeStageMaxAggregateOutputType | null
  }

  type GetDemandeStageGroupByPayload<T extends DemandeStageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DemandeStageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DemandeStageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DemandeStageGroupByOutputType[P]>
            : GetScalarType<T[P], DemandeStageGroupByOutputType[P]>
        }
      >
    >


  export type DemandeStageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    structureCibleId?: boolean
    statut?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    details?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structureCible?: boolean | DemandeStage$structureCibleArgs<ExtArgs>
    journalActions?: boolean | DemandeStage$journalActionsArgs<ExtArgs>
    stage?: boolean | DemandeStage$stageArgs<ExtArgs>
    _count?: boolean | DemandeStageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["demandeStage"]>

  export type DemandeStageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    structureCibleId?: boolean
    statut?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    details?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structureCible?: boolean | DemandeStage$structureCibleArgs<ExtArgs>
  }, ExtArgs["result"]["demandeStage"]>

  export type DemandeStageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    structureCibleId?: boolean
    statut?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    details?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structureCible?: boolean | DemandeStage$structureCibleArgs<ExtArgs>
  }, ExtArgs["result"]["demandeStage"]>

  export type DemandeStageSelectScalar = {
    id?: boolean
    stagiaireId?: boolean
    structureCibleId?: boolean
    statut?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    details?: boolean
  }

  export type DemandeStageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "stagiaireId" | "structureCibleId" | "statut" | "dateDebut" | "dateFin" | "createdAt" | "updatedAt" | "details", ExtArgs["result"]["demandeStage"]>
  export type DemandeStageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structureCible?: boolean | DemandeStage$structureCibleArgs<ExtArgs>
    journalActions?: boolean | DemandeStage$journalActionsArgs<ExtArgs>
    stage?: boolean | DemandeStage$stageArgs<ExtArgs>
    _count?: boolean | DemandeStageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DemandeStageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structureCible?: boolean | DemandeStage$structureCibleArgs<ExtArgs>
  }
  export type DemandeStageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structureCible?: boolean | DemandeStage$structureCibleArgs<ExtArgs>
  }

  export type $DemandeStagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DemandeStage"
    objects: {
      stagiaire: Prisma.$StagiairePayload<ExtArgs>
      structureCible: Prisma.$StructurePayload<ExtArgs> | null
      journalActions: Prisma.$JournalActionPayload<ExtArgs>[]
      stage: Prisma.$StagePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stagiaireId: string
      structureCibleId: number | null
      statut: $Enums.StatutDemande
      dateDebut: Date
      dateFin: Date
      createdAt: Date
      updatedAt: Date
      details: Prisma.JsonValue | null
    }, ExtArgs["result"]["demandeStage"]>
    composites: {}
  }

  type DemandeStageGetPayload<S extends boolean | null | undefined | DemandeStageDefaultArgs> = $Result.GetResult<Prisma.$DemandeStagePayload, S>

  type DemandeStageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DemandeStageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DemandeStageCountAggregateInputType | true
    }

  export interface DemandeStageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DemandeStage'], meta: { name: 'DemandeStage' } }
    /**
     * Find zero or one DemandeStage that matches the filter.
     * @param {DemandeStageFindUniqueArgs} args - Arguments to find a DemandeStage
     * @example
     * // Get one DemandeStage
     * const demandeStage = await prisma.demandeStage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DemandeStageFindUniqueArgs>(args: SelectSubset<T, DemandeStageFindUniqueArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DemandeStage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DemandeStageFindUniqueOrThrowArgs} args - Arguments to find a DemandeStage
     * @example
     * // Get one DemandeStage
     * const demandeStage = await prisma.demandeStage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DemandeStageFindUniqueOrThrowArgs>(args: SelectSubset<T, DemandeStageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DemandeStage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemandeStageFindFirstArgs} args - Arguments to find a DemandeStage
     * @example
     * // Get one DemandeStage
     * const demandeStage = await prisma.demandeStage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DemandeStageFindFirstArgs>(args?: SelectSubset<T, DemandeStageFindFirstArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DemandeStage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemandeStageFindFirstOrThrowArgs} args - Arguments to find a DemandeStage
     * @example
     * // Get one DemandeStage
     * const demandeStage = await prisma.demandeStage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DemandeStageFindFirstOrThrowArgs>(args?: SelectSubset<T, DemandeStageFindFirstOrThrowArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DemandeStages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemandeStageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DemandeStages
     * const demandeStages = await prisma.demandeStage.findMany()
     * 
     * // Get first 10 DemandeStages
     * const demandeStages = await prisma.demandeStage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const demandeStageWithIdOnly = await prisma.demandeStage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DemandeStageFindManyArgs>(args?: SelectSubset<T, DemandeStageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DemandeStage.
     * @param {DemandeStageCreateArgs} args - Arguments to create a DemandeStage.
     * @example
     * // Create one DemandeStage
     * const DemandeStage = await prisma.demandeStage.create({
     *   data: {
     *     // ... data to create a DemandeStage
     *   }
     * })
     * 
     */
    create<T extends DemandeStageCreateArgs>(args: SelectSubset<T, DemandeStageCreateArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DemandeStages.
     * @param {DemandeStageCreateManyArgs} args - Arguments to create many DemandeStages.
     * @example
     * // Create many DemandeStages
     * const demandeStage = await prisma.demandeStage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DemandeStageCreateManyArgs>(args?: SelectSubset<T, DemandeStageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DemandeStages and returns the data saved in the database.
     * @param {DemandeStageCreateManyAndReturnArgs} args - Arguments to create many DemandeStages.
     * @example
     * // Create many DemandeStages
     * const demandeStage = await prisma.demandeStage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DemandeStages and only return the `id`
     * const demandeStageWithIdOnly = await prisma.demandeStage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DemandeStageCreateManyAndReturnArgs>(args?: SelectSubset<T, DemandeStageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DemandeStage.
     * @param {DemandeStageDeleteArgs} args - Arguments to delete one DemandeStage.
     * @example
     * // Delete one DemandeStage
     * const DemandeStage = await prisma.demandeStage.delete({
     *   where: {
     *     // ... filter to delete one DemandeStage
     *   }
     * })
     * 
     */
    delete<T extends DemandeStageDeleteArgs>(args: SelectSubset<T, DemandeStageDeleteArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DemandeStage.
     * @param {DemandeStageUpdateArgs} args - Arguments to update one DemandeStage.
     * @example
     * // Update one DemandeStage
     * const demandeStage = await prisma.demandeStage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DemandeStageUpdateArgs>(args: SelectSubset<T, DemandeStageUpdateArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DemandeStages.
     * @param {DemandeStageDeleteManyArgs} args - Arguments to filter DemandeStages to delete.
     * @example
     * // Delete a few DemandeStages
     * const { count } = await prisma.demandeStage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DemandeStageDeleteManyArgs>(args?: SelectSubset<T, DemandeStageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DemandeStages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemandeStageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DemandeStages
     * const demandeStage = await prisma.demandeStage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DemandeStageUpdateManyArgs>(args: SelectSubset<T, DemandeStageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DemandeStages and returns the data updated in the database.
     * @param {DemandeStageUpdateManyAndReturnArgs} args - Arguments to update many DemandeStages.
     * @example
     * // Update many DemandeStages
     * const demandeStage = await prisma.demandeStage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DemandeStages and only return the `id`
     * const demandeStageWithIdOnly = await prisma.demandeStage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DemandeStageUpdateManyAndReturnArgs>(args: SelectSubset<T, DemandeStageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DemandeStage.
     * @param {DemandeStageUpsertArgs} args - Arguments to update or create a DemandeStage.
     * @example
     * // Update or create a DemandeStage
     * const demandeStage = await prisma.demandeStage.upsert({
     *   create: {
     *     // ... data to create a DemandeStage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DemandeStage we want to update
     *   }
     * })
     */
    upsert<T extends DemandeStageUpsertArgs>(args: SelectSubset<T, DemandeStageUpsertArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DemandeStages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemandeStageCountArgs} args - Arguments to filter DemandeStages to count.
     * @example
     * // Count the number of DemandeStages
     * const count = await prisma.demandeStage.count({
     *   where: {
     *     // ... the filter for the DemandeStages we want to count
     *   }
     * })
    **/
    count<T extends DemandeStageCountArgs>(
      args?: Subset<T, DemandeStageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DemandeStageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DemandeStage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemandeStageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DemandeStageAggregateArgs>(args: Subset<T, DemandeStageAggregateArgs>): Prisma.PrismaPromise<GetDemandeStageAggregateType<T>>

    /**
     * Group by DemandeStage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemandeStageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DemandeStageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DemandeStageGroupByArgs['orderBy'] }
        : { orderBy?: DemandeStageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DemandeStageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDemandeStageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DemandeStage model
   */
  readonly fields: DemandeStageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DemandeStage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DemandeStageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stagiaire<T extends StagiaireDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StagiaireDefaultArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    structureCible<T extends DemandeStage$structureCibleArgs<ExtArgs> = {}>(args?: Subset<T, DemandeStage$structureCibleArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    journalActions<T extends DemandeStage$journalActionsArgs<ExtArgs> = {}>(args?: Subset<T, DemandeStage$journalActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stage<T extends DemandeStage$stageArgs<ExtArgs> = {}>(args?: Subset<T, DemandeStage$stageArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DemandeStage model
   */
  interface DemandeStageFieldRefs {
    readonly id: FieldRef<"DemandeStage", 'String'>
    readonly stagiaireId: FieldRef<"DemandeStage", 'String'>
    readonly structureCibleId: FieldRef<"DemandeStage", 'Int'>
    readonly statut: FieldRef<"DemandeStage", 'StatutDemande'>
    readonly dateDebut: FieldRef<"DemandeStage", 'DateTime'>
    readonly dateFin: FieldRef<"DemandeStage", 'DateTime'>
    readonly createdAt: FieldRef<"DemandeStage", 'DateTime'>
    readonly updatedAt: FieldRef<"DemandeStage", 'DateTime'>
    readonly details: FieldRef<"DemandeStage", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * DemandeStage findUnique
   */
  export type DemandeStageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * Filter, which DemandeStage to fetch.
     */
    where: DemandeStageWhereUniqueInput
  }

  /**
   * DemandeStage findUniqueOrThrow
   */
  export type DemandeStageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * Filter, which DemandeStage to fetch.
     */
    where: DemandeStageWhereUniqueInput
  }

  /**
   * DemandeStage findFirst
   */
  export type DemandeStageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * Filter, which DemandeStage to fetch.
     */
    where?: DemandeStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DemandeStages to fetch.
     */
    orderBy?: DemandeStageOrderByWithRelationInput | DemandeStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DemandeStages.
     */
    cursor?: DemandeStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DemandeStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DemandeStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DemandeStages.
     */
    distinct?: DemandeStageScalarFieldEnum | DemandeStageScalarFieldEnum[]
  }

  /**
   * DemandeStage findFirstOrThrow
   */
  export type DemandeStageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * Filter, which DemandeStage to fetch.
     */
    where?: DemandeStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DemandeStages to fetch.
     */
    orderBy?: DemandeStageOrderByWithRelationInput | DemandeStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DemandeStages.
     */
    cursor?: DemandeStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DemandeStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DemandeStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DemandeStages.
     */
    distinct?: DemandeStageScalarFieldEnum | DemandeStageScalarFieldEnum[]
  }

  /**
   * DemandeStage findMany
   */
  export type DemandeStageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * Filter, which DemandeStages to fetch.
     */
    where?: DemandeStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DemandeStages to fetch.
     */
    orderBy?: DemandeStageOrderByWithRelationInput | DemandeStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DemandeStages.
     */
    cursor?: DemandeStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DemandeStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DemandeStages.
     */
    skip?: number
    distinct?: DemandeStageScalarFieldEnum | DemandeStageScalarFieldEnum[]
  }

  /**
   * DemandeStage create
   */
  export type DemandeStageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * The data needed to create a DemandeStage.
     */
    data: XOR<DemandeStageCreateInput, DemandeStageUncheckedCreateInput>
  }

  /**
   * DemandeStage createMany
   */
  export type DemandeStageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DemandeStages.
     */
    data: DemandeStageCreateManyInput | DemandeStageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DemandeStage createManyAndReturn
   */
  export type DemandeStageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * The data used to create many DemandeStages.
     */
    data: DemandeStageCreateManyInput | DemandeStageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DemandeStage update
   */
  export type DemandeStageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * The data needed to update a DemandeStage.
     */
    data: XOR<DemandeStageUpdateInput, DemandeStageUncheckedUpdateInput>
    /**
     * Choose, which DemandeStage to update.
     */
    where: DemandeStageWhereUniqueInput
  }

  /**
   * DemandeStage updateMany
   */
  export type DemandeStageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DemandeStages.
     */
    data: XOR<DemandeStageUpdateManyMutationInput, DemandeStageUncheckedUpdateManyInput>
    /**
     * Filter which DemandeStages to update
     */
    where?: DemandeStageWhereInput
    /**
     * Limit how many DemandeStages to update.
     */
    limit?: number
  }

  /**
   * DemandeStage updateManyAndReturn
   */
  export type DemandeStageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * The data used to update DemandeStages.
     */
    data: XOR<DemandeStageUpdateManyMutationInput, DemandeStageUncheckedUpdateManyInput>
    /**
     * Filter which DemandeStages to update
     */
    where?: DemandeStageWhereInput
    /**
     * Limit how many DemandeStages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DemandeStage upsert
   */
  export type DemandeStageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * The filter to search for the DemandeStage to update in case it exists.
     */
    where: DemandeStageWhereUniqueInput
    /**
     * In case the DemandeStage found by the `where` argument doesn't exist, create a new DemandeStage with this data.
     */
    create: XOR<DemandeStageCreateInput, DemandeStageUncheckedCreateInput>
    /**
     * In case the DemandeStage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DemandeStageUpdateInput, DemandeStageUncheckedUpdateInput>
  }

  /**
   * DemandeStage delete
   */
  export type DemandeStageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * Filter which DemandeStage to delete.
     */
    where: DemandeStageWhereUniqueInput
  }

  /**
   * DemandeStage deleteMany
   */
  export type DemandeStageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DemandeStages to delete
     */
    where?: DemandeStageWhereInput
    /**
     * Limit how many DemandeStages to delete.
     */
    limit?: number
  }

  /**
   * DemandeStage.structureCible
   */
  export type DemandeStage$structureCibleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    where?: StructureWhereInput
  }

  /**
   * DemandeStage.journalActions
   */
  export type DemandeStage$journalActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    where?: JournalActionWhereInput
    orderBy?: JournalActionOrderByWithRelationInput | JournalActionOrderByWithRelationInput[]
    cursor?: JournalActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JournalActionScalarFieldEnum | JournalActionScalarFieldEnum[]
  }

  /**
   * DemandeStage.stage
   */
  export type DemandeStage$stageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    where?: StageWhereInput
  }

  /**
   * DemandeStage without action
   */
  export type DemandeStageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
  }


  /**
   * Model Stage
   */

  export type AggregateStage = {
    _count: StageCountAggregateOutputType | null
    _avg: StageAvgAggregateOutputType | null
    _sum: StageSumAggregateOutputType | null
    _min: StageMinAggregateOutputType | null
    _max: StageMaxAggregateOutputType | null
  }

  export type StageAvgAggregateOutputType = {
    structureId: number | null
  }

  export type StageSumAggregateOutputType = {
    structureId: number | null
  }

  export type StageMinAggregateOutputType = {
    id: string | null
    demandeStageId: string | null
    tuteurId: string | null
    structureId: number | null
    stagiaireId: string | null
    dateDebut: Date | null
    dateFin: Date | null
    statut: $Enums.StatutStage | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StageMaxAggregateOutputType = {
    id: string | null
    demandeStageId: string | null
    tuteurId: string | null
    structureId: number | null
    stagiaireId: string | null
    dateDebut: Date | null
    dateFin: Date | null
    statut: $Enums.StatutStage | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StageCountAggregateOutputType = {
    id: number
    demandeStageId: number
    tuteurId: number
    structureId: number
    stagiaireId: number
    dateDebut: number
    dateFin: number
    statut: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StageAvgAggregateInputType = {
    structureId?: true
  }

  export type StageSumAggregateInputType = {
    structureId?: true
  }

  export type StageMinAggregateInputType = {
    id?: true
    demandeStageId?: true
    tuteurId?: true
    structureId?: true
    stagiaireId?: true
    dateDebut?: true
    dateFin?: true
    statut?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StageMaxAggregateInputType = {
    id?: true
    demandeStageId?: true
    tuteurId?: true
    structureId?: true
    stagiaireId?: true
    dateDebut?: true
    dateFin?: true
    statut?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StageCountAggregateInputType = {
    id?: true
    demandeStageId?: true
    tuteurId?: true
    structureId?: true
    stagiaireId?: true
    dateDebut?: true
    dateFin?: true
    statut?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stage to aggregate.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stages
    **/
    _count?: true | StageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StageMaxAggregateInputType
  }

  export type GetStageAggregateType<T extends StageAggregateArgs> = {
        [P in keyof T & keyof AggregateStage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStage[P]>
      : GetScalarType<T[P], AggregateStage[P]>
  }




  export type StageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
    orderBy?: StageOrderByWithAggregationInput | StageOrderByWithAggregationInput[]
    by: StageScalarFieldEnum[] | StageScalarFieldEnum
    having?: StageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StageCountAggregateInputType | true
    _avg?: StageAvgAggregateInputType
    _sum?: StageSumAggregateInputType
    _min?: StageMinAggregateInputType
    _max?: StageMaxAggregateInputType
  }

  export type StageGroupByOutputType = {
    id: string
    demandeStageId: string
    tuteurId: string
    structureId: number
    stagiaireId: string
    dateDebut: Date
    dateFin: Date
    statut: $Enums.StatutStage
    createdAt: Date
    updatedAt: Date
    _count: StageCountAggregateOutputType | null
    _avg: StageAvgAggregateOutputType | null
    _sum: StageSumAggregateOutputType | null
    _min: StageMinAggregateOutputType | null
    _max: StageMaxAggregateOutputType | null
  }

  type GetStageGroupByPayload<T extends StageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StageGroupByOutputType[P]>
            : GetScalarType<T[P], StageGroupByOutputType[P]>
        }
      >
    >


  export type StageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    demandeStageId?: boolean
    tuteurId?: boolean
    structureId?: boolean
    stagiaireId?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    statut?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    demandeStage?: boolean | DemandeStageDefaultArgs<ExtArgs>
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structure?: boolean | StructureDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stage"]>

  export type StageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    demandeStageId?: boolean
    tuteurId?: boolean
    structureId?: boolean
    stagiaireId?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    statut?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    demandeStage?: boolean | DemandeStageDefaultArgs<ExtArgs>
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structure?: boolean | StructureDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stage"]>

  export type StageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    demandeStageId?: boolean
    tuteurId?: boolean
    structureId?: boolean
    stagiaireId?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    statut?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    demandeStage?: boolean | DemandeStageDefaultArgs<ExtArgs>
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structure?: boolean | StructureDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stage"]>

  export type StageSelectScalar = {
    id?: boolean
    demandeStageId?: boolean
    tuteurId?: boolean
    structureId?: boolean
    stagiaireId?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    statut?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "demandeStageId" | "tuteurId" | "structureId" | "stagiaireId" | "dateDebut" | "dateFin" | "statut" | "createdAt" | "updatedAt", ExtArgs["result"]["stage"]>
  export type StageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    demandeStage?: boolean | DemandeStageDefaultArgs<ExtArgs>
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structure?: boolean | StructureDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }
  export type StageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    demandeStage?: boolean | DemandeStageDefaultArgs<ExtArgs>
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structure?: boolean | StructureDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }
  export type StageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    demandeStage?: boolean | DemandeStageDefaultArgs<ExtArgs>
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structure?: boolean | StructureDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }

  export type $StagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stage"
    objects: {
      demandeStage: Prisma.$DemandeStagePayload<ExtArgs>
      stagiaire: Prisma.$StagiairePayload<ExtArgs>
      structure: Prisma.$StructurePayload<ExtArgs>
      tuteur: Prisma.$TuteurPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      demandeStageId: string
      tuteurId: string
      structureId: number
      stagiaireId: string
      dateDebut: Date
      dateFin: Date
      statut: $Enums.StatutStage
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["stage"]>
    composites: {}
  }

  type StageGetPayload<S extends boolean | null | undefined | StageDefaultArgs> = $Result.GetResult<Prisma.$StagePayload, S>

  type StageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StageCountAggregateInputType | true
    }

  export interface StageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stage'], meta: { name: 'Stage' } }
    /**
     * Find zero or one Stage that matches the filter.
     * @param {StageFindUniqueArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StageFindUniqueArgs>(args: SelectSubset<T, StageFindUniqueArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Stage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StageFindUniqueOrThrowArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StageFindUniqueOrThrowArgs>(args: SelectSubset<T, StageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindFirstArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StageFindFirstArgs>(args?: SelectSubset<T, StageFindFirstArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindFirstOrThrowArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StageFindFirstOrThrowArgs>(args?: SelectSubset<T, StageFindFirstOrThrowArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stages
     * const stages = await prisma.stage.findMany()
     * 
     * // Get first 10 Stages
     * const stages = await prisma.stage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stageWithIdOnly = await prisma.stage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StageFindManyArgs>(args?: SelectSubset<T, StageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Stage.
     * @param {StageCreateArgs} args - Arguments to create a Stage.
     * @example
     * // Create one Stage
     * const Stage = await prisma.stage.create({
     *   data: {
     *     // ... data to create a Stage
     *   }
     * })
     * 
     */
    create<T extends StageCreateArgs>(args: SelectSubset<T, StageCreateArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stages.
     * @param {StageCreateManyArgs} args - Arguments to create many Stages.
     * @example
     * // Create many Stages
     * const stage = await prisma.stage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StageCreateManyArgs>(args?: SelectSubset<T, StageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stages and returns the data saved in the database.
     * @param {StageCreateManyAndReturnArgs} args - Arguments to create many Stages.
     * @example
     * // Create many Stages
     * const stage = await prisma.stage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stages and only return the `id`
     * const stageWithIdOnly = await prisma.stage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StageCreateManyAndReturnArgs>(args?: SelectSubset<T, StageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Stage.
     * @param {StageDeleteArgs} args - Arguments to delete one Stage.
     * @example
     * // Delete one Stage
     * const Stage = await prisma.stage.delete({
     *   where: {
     *     // ... filter to delete one Stage
     *   }
     * })
     * 
     */
    delete<T extends StageDeleteArgs>(args: SelectSubset<T, StageDeleteArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Stage.
     * @param {StageUpdateArgs} args - Arguments to update one Stage.
     * @example
     * // Update one Stage
     * const stage = await prisma.stage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StageUpdateArgs>(args: SelectSubset<T, StageUpdateArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stages.
     * @param {StageDeleteManyArgs} args - Arguments to filter Stages to delete.
     * @example
     * // Delete a few Stages
     * const { count } = await prisma.stage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StageDeleteManyArgs>(args?: SelectSubset<T, StageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stages
     * const stage = await prisma.stage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StageUpdateManyArgs>(args: SelectSubset<T, StageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stages and returns the data updated in the database.
     * @param {StageUpdateManyAndReturnArgs} args - Arguments to update many Stages.
     * @example
     * // Update many Stages
     * const stage = await prisma.stage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stages and only return the `id`
     * const stageWithIdOnly = await prisma.stage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StageUpdateManyAndReturnArgs>(args: SelectSubset<T, StageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Stage.
     * @param {StageUpsertArgs} args - Arguments to update or create a Stage.
     * @example
     * // Update or create a Stage
     * const stage = await prisma.stage.upsert({
     *   create: {
     *     // ... data to create a Stage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stage we want to update
     *   }
     * })
     */
    upsert<T extends StageUpsertArgs>(args: SelectSubset<T, StageUpsertArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageCountArgs} args - Arguments to filter Stages to count.
     * @example
     * // Count the number of Stages
     * const count = await prisma.stage.count({
     *   where: {
     *     // ... the filter for the Stages we want to count
     *   }
     * })
    **/
    count<T extends StageCountArgs>(
      args?: Subset<T, StageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StageAggregateArgs>(args: Subset<T, StageAggregateArgs>): Prisma.PrismaPromise<GetStageAggregateType<T>>

    /**
     * Group by Stage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StageGroupByArgs['orderBy'] }
        : { orderBy?: StageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stage model
   */
  readonly fields: StageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    demandeStage<T extends DemandeStageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DemandeStageDefaultArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    stagiaire<T extends StagiaireDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StagiaireDefaultArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    structure<T extends StructureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StructureDefaultArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tuteur<T extends TuteurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TuteurDefaultArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stage model
   */
  interface StageFieldRefs {
    readonly id: FieldRef<"Stage", 'String'>
    readonly demandeStageId: FieldRef<"Stage", 'String'>
    readonly tuteurId: FieldRef<"Stage", 'String'>
    readonly structureId: FieldRef<"Stage", 'Int'>
    readonly stagiaireId: FieldRef<"Stage", 'String'>
    readonly dateDebut: FieldRef<"Stage", 'DateTime'>
    readonly dateFin: FieldRef<"Stage", 'DateTime'>
    readonly statut: FieldRef<"Stage", 'StatutStage'>
    readonly createdAt: FieldRef<"Stage", 'DateTime'>
    readonly updatedAt: FieldRef<"Stage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Stage findUnique
   */
  export type StageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage findUniqueOrThrow
   */
  export type StageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage findFirst
   */
  export type StageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stages.
     */
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Stage findFirstOrThrow
   */
  export type StageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stages.
     */
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Stage findMany
   */
  export type StageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stages to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Stage create
   */
  export type StageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * The data needed to create a Stage.
     */
    data: XOR<StageCreateInput, StageUncheckedCreateInput>
  }

  /**
   * Stage createMany
   */
  export type StageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stages.
     */
    data: StageCreateManyInput | StageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stage createManyAndReturn
   */
  export type StageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * The data used to create many Stages.
     */
    data: StageCreateManyInput | StageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stage update
   */
  export type StageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * The data needed to update a Stage.
     */
    data: XOR<StageUpdateInput, StageUncheckedUpdateInput>
    /**
     * Choose, which Stage to update.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage updateMany
   */
  export type StageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stages.
     */
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyInput>
    /**
     * Filter which Stages to update
     */
    where?: StageWhereInput
    /**
     * Limit how many Stages to update.
     */
    limit?: number
  }

  /**
   * Stage updateManyAndReturn
   */
  export type StageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * The data used to update Stages.
     */
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyInput>
    /**
     * Filter which Stages to update
     */
    where?: StageWhereInput
    /**
     * Limit how many Stages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stage upsert
   */
  export type StageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * The filter to search for the Stage to update in case it exists.
     */
    where: StageWhereUniqueInput
    /**
     * In case the Stage found by the `where` argument doesn't exist, create a new Stage with this data.
     */
    create: XOR<StageCreateInput, StageUncheckedCreateInput>
    /**
     * In case the Stage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StageUpdateInput, StageUncheckedUpdateInput>
  }

  /**
   * Stage delete
   */
  export type StageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter which Stage to delete.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage deleteMany
   */
  export type StageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stages to delete
     */
    where?: StageWhereInput
    /**
     * Limit how many Stages to delete.
     */
    limit?: number
  }

  /**
   * Stage without action
   */
  export type StageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    expediteurId: string | null
    destinataireId: string | null
    contenu: string | null
    lu: boolean | null
    createdAt: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    expediteurId: string | null
    destinataireId: string | null
    contenu: string | null
    lu: boolean | null
    createdAt: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    expediteurId: number
    destinataireId: number
    contenu: number
    lu: number
    createdAt: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    expediteurId?: true
    destinataireId?: true
    contenu?: true
    lu?: true
    createdAt?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    expediteurId?: true
    destinataireId?: true
    contenu?: true
    lu?: true
    createdAt?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    expediteurId?: true
    destinataireId?: true
    contenu?: true
    lu?: true
    createdAt?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    expediteurId: string
    destinataireId: string
    contenu: string
    lu: boolean
    createdAt: Date
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expediteurId?: boolean
    destinataireId?: boolean
    contenu?: boolean
    lu?: boolean
    createdAt?: boolean
    destinataire?: boolean | UserDefaultArgs<ExtArgs>
    expediteur?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expediteurId?: boolean
    destinataireId?: boolean
    contenu?: boolean
    lu?: boolean
    createdAt?: boolean
    destinataire?: boolean | UserDefaultArgs<ExtArgs>
    expediteur?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expediteurId?: boolean
    destinataireId?: boolean
    contenu?: boolean
    lu?: boolean
    createdAt?: boolean
    destinataire?: boolean | UserDefaultArgs<ExtArgs>
    expediteur?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    expediteurId?: boolean
    destinataireId?: boolean
    contenu?: boolean
    lu?: boolean
    createdAt?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expediteurId" | "destinataireId" | "contenu" | "lu" | "createdAt", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    destinataire?: boolean | UserDefaultArgs<ExtArgs>
    expediteur?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    destinataire?: boolean | UserDefaultArgs<ExtArgs>
    expediteur?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    destinataire?: boolean | UserDefaultArgs<ExtArgs>
    expediteur?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      destinataire: Prisma.$UserPayload<ExtArgs>
      expediteur: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      expediteurId: string
      destinataireId: string
      contenu: string
      lu: boolean
      createdAt: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    destinataire<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    expediteur<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly expediteurId: FieldRef<"Message", 'String'>
    readonly destinataireId: FieldRef<"Message", 'String'>
    readonly contenu: FieldRef<"Message", 'String'>
    readonly lu: FieldRef<"Message", 'Boolean'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model ThemeTuteur
   */

  export type AggregateThemeTuteur = {
    _count: ThemeTuteurCountAggregateOutputType | null
    _min: ThemeTuteurMinAggregateOutputType | null
    _max: ThemeTuteurMaxAggregateOutputType | null
  }

  export type ThemeTuteurMinAggregateOutputType = {
    id: string | null
    tuteurId: string | null
    titre: string | null
    description: string | null
    disponible: boolean | null
  }

  export type ThemeTuteurMaxAggregateOutputType = {
    id: string | null
    tuteurId: string | null
    titre: string | null
    description: string | null
    disponible: boolean | null
  }

  export type ThemeTuteurCountAggregateOutputType = {
    id: number
    tuteurId: number
    titre: number
    description: number
    disponible: number
    _all: number
  }


  export type ThemeTuteurMinAggregateInputType = {
    id?: true
    tuteurId?: true
    titre?: true
    description?: true
    disponible?: true
  }

  export type ThemeTuteurMaxAggregateInputType = {
    id?: true
    tuteurId?: true
    titre?: true
    description?: true
    disponible?: true
  }

  export type ThemeTuteurCountAggregateInputType = {
    id?: true
    tuteurId?: true
    titre?: true
    description?: true
    disponible?: true
    _all?: true
  }

  export type ThemeTuteurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThemeTuteur to aggregate.
     */
    where?: ThemeTuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeTuteurs to fetch.
     */
    orderBy?: ThemeTuteurOrderByWithRelationInput | ThemeTuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThemeTuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeTuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeTuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThemeTuteurs
    **/
    _count?: true | ThemeTuteurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThemeTuteurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThemeTuteurMaxAggregateInputType
  }

  export type GetThemeTuteurAggregateType<T extends ThemeTuteurAggregateArgs> = {
        [P in keyof T & keyof AggregateThemeTuteur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThemeTuteur[P]>
      : GetScalarType<T[P], AggregateThemeTuteur[P]>
  }




  export type ThemeTuteurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThemeTuteurWhereInput
    orderBy?: ThemeTuteurOrderByWithAggregationInput | ThemeTuteurOrderByWithAggregationInput[]
    by: ThemeTuteurScalarFieldEnum[] | ThemeTuteurScalarFieldEnum
    having?: ThemeTuteurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThemeTuteurCountAggregateInputType | true
    _min?: ThemeTuteurMinAggregateInputType
    _max?: ThemeTuteurMaxAggregateInputType
  }

  export type ThemeTuteurGroupByOutputType = {
    id: string
    tuteurId: string
    titre: string
    description: string | null
    disponible: boolean
    _count: ThemeTuteurCountAggregateOutputType | null
    _min: ThemeTuteurMinAggregateOutputType | null
    _max: ThemeTuteurMaxAggregateOutputType | null
  }

  type GetThemeTuteurGroupByPayload<T extends ThemeTuteurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThemeTuteurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThemeTuteurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThemeTuteurGroupByOutputType[P]>
            : GetScalarType<T[P], ThemeTuteurGroupByOutputType[P]>
        }
      >
    >


  export type ThemeTuteurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tuteurId?: boolean
    titre?: boolean
    description?: boolean
    disponible?: boolean
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["themeTuteur"]>

  export type ThemeTuteurSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tuteurId?: boolean
    titre?: boolean
    description?: boolean
    disponible?: boolean
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["themeTuteur"]>

  export type ThemeTuteurSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tuteurId?: boolean
    titre?: boolean
    description?: boolean
    disponible?: boolean
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["themeTuteur"]>

  export type ThemeTuteurSelectScalar = {
    id?: boolean
    tuteurId?: boolean
    titre?: boolean
    description?: boolean
    disponible?: boolean
  }

  export type ThemeTuteurOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tuteurId" | "titre" | "description" | "disponible", ExtArgs["result"]["themeTuteur"]>
  export type ThemeTuteurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }
  export type ThemeTuteurIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }
  export type ThemeTuteurIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }

  export type $ThemeTuteurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ThemeTuteur"
    objects: {
      tuteur: Prisma.$TuteurPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tuteurId: string
      titre: string
      description: string | null
      disponible: boolean
    }, ExtArgs["result"]["themeTuteur"]>
    composites: {}
  }

  type ThemeTuteurGetPayload<S extends boolean | null | undefined | ThemeTuteurDefaultArgs> = $Result.GetResult<Prisma.$ThemeTuteurPayload, S>

  type ThemeTuteurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ThemeTuteurFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThemeTuteurCountAggregateInputType | true
    }

  export interface ThemeTuteurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ThemeTuteur'], meta: { name: 'ThemeTuteur' } }
    /**
     * Find zero or one ThemeTuteur that matches the filter.
     * @param {ThemeTuteurFindUniqueArgs} args - Arguments to find a ThemeTuteur
     * @example
     * // Get one ThemeTuteur
     * const themeTuteur = await prisma.themeTuteur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ThemeTuteurFindUniqueArgs>(args: SelectSubset<T, ThemeTuteurFindUniqueArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ThemeTuteur that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ThemeTuteurFindUniqueOrThrowArgs} args - Arguments to find a ThemeTuteur
     * @example
     * // Get one ThemeTuteur
     * const themeTuteur = await prisma.themeTuteur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ThemeTuteurFindUniqueOrThrowArgs>(args: SelectSubset<T, ThemeTuteurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ThemeTuteur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeTuteurFindFirstArgs} args - Arguments to find a ThemeTuteur
     * @example
     * // Get one ThemeTuteur
     * const themeTuteur = await prisma.themeTuteur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ThemeTuteurFindFirstArgs>(args?: SelectSubset<T, ThemeTuteurFindFirstArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ThemeTuteur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeTuteurFindFirstOrThrowArgs} args - Arguments to find a ThemeTuteur
     * @example
     * // Get one ThemeTuteur
     * const themeTuteur = await prisma.themeTuteur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ThemeTuteurFindFirstOrThrowArgs>(args?: SelectSubset<T, ThemeTuteurFindFirstOrThrowArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ThemeTuteurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeTuteurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThemeTuteurs
     * const themeTuteurs = await prisma.themeTuteur.findMany()
     * 
     * // Get first 10 ThemeTuteurs
     * const themeTuteurs = await prisma.themeTuteur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const themeTuteurWithIdOnly = await prisma.themeTuteur.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ThemeTuteurFindManyArgs>(args?: SelectSubset<T, ThemeTuteurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ThemeTuteur.
     * @param {ThemeTuteurCreateArgs} args - Arguments to create a ThemeTuteur.
     * @example
     * // Create one ThemeTuteur
     * const ThemeTuteur = await prisma.themeTuteur.create({
     *   data: {
     *     // ... data to create a ThemeTuteur
     *   }
     * })
     * 
     */
    create<T extends ThemeTuteurCreateArgs>(args: SelectSubset<T, ThemeTuteurCreateArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ThemeTuteurs.
     * @param {ThemeTuteurCreateManyArgs} args - Arguments to create many ThemeTuteurs.
     * @example
     * // Create many ThemeTuteurs
     * const themeTuteur = await prisma.themeTuteur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ThemeTuteurCreateManyArgs>(args?: SelectSubset<T, ThemeTuteurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ThemeTuteurs and returns the data saved in the database.
     * @param {ThemeTuteurCreateManyAndReturnArgs} args - Arguments to create many ThemeTuteurs.
     * @example
     * // Create many ThemeTuteurs
     * const themeTuteur = await prisma.themeTuteur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ThemeTuteurs and only return the `id`
     * const themeTuteurWithIdOnly = await prisma.themeTuteur.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ThemeTuteurCreateManyAndReturnArgs>(args?: SelectSubset<T, ThemeTuteurCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ThemeTuteur.
     * @param {ThemeTuteurDeleteArgs} args - Arguments to delete one ThemeTuteur.
     * @example
     * // Delete one ThemeTuteur
     * const ThemeTuteur = await prisma.themeTuteur.delete({
     *   where: {
     *     // ... filter to delete one ThemeTuteur
     *   }
     * })
     * 
     */
    delete<T extends ThemeTuteurDeleteArgs>(args: SelectSubset<T, ThemeTuteurDeleteArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ThemeTuteur.
     * @param {ThemeTuteurUpdateArgs} args - Arguments to update one ThemeTuteur.
     * @example
     * // Update one ThemeTuteur
     * const themeTuteur = await prisma.themeTuteur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ThemeTuteurUpdateArgs>(args: SelectSubset<T, ThemeTuteurUpdateArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ThemeTuteurs.
     * @param {ThemeTuteurDeleteManyArgs} args - Arguments to filter ThemeTuteurs to delete.
     * @example
     * // Delete a few ThemeTuteurs
     * const { count } = await prisma.themeTuteur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ThemeTuteurDeleteManyArgs>(args?: SelectSubset<T, ThemeTuteurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThemeTuteurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeTuteurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThemeTuteurs
     * const themeTuteur = await prisma.themeTuteur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ThemeTuteurUpdateManyArgs>(args: SelectSubset<T, ThemeTuteurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThemeTuteurs and returns the data updated in the database.
     * @param {ThemeTuteurUpdateManyAndReturnArgs} args - Arguments to update many ThemeTuteurs.
     * @example
     * // Update many ThemeTuteurs
     * const themeTuteur = await prisma.themeTuteur.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ThemeTuteurs and only return the `id`
     * const themeTuteurWithIdOnly = await prisma.themeTuteur.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ThemeTuteurUpdateManyAndReturnArgs>(args: SelectSubset<T, ThemeTuteurUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ThemeTuteur.
     * @param {ThemeTuteurUpsertArgs} args - Arguments to update or create a ThemeTuteur.
     * @example
     * // Update or create a ThemeTuteur
     * const themeTuteur = await prisma.themeTuteur.upsert({
     *   create: {
     *     // ... data to create a ThemeTuteur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThemeTuteur we want to update
     *   }
     * })
     */
    upsert<T extends ThemeTuteurUpsertArgs>(args: SelectSubset<T, ThemeTuteurUpsertArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ThemeTuteurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeTuteurCountArgs} args - Arguments to filter ThemeTuteurs to count.
     * @example
     * // Count the number of ThemeTuteurs
     * const count = await prisma.themeTuteur.count({
     *   where: {
     *     // ... the filter for the ThemeTuteurs we want to count
     *   }
     * })
    **/
    count<T extends ThemeTuteurCountArgs>(
      args?: Subset<T, ThemeTuteurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThemeTuteurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThemeTuteur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeTuteurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThemeTuteurAggregateArgs>(args: Subset<T, ThemeTuteurAggregateArgs>): Prisma.PrismaPromise<GetThemeTuteurAggregateType<T>>

    /**
     * Group by ThemeTuteur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeTuteurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThemeTuteurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThemeTuteurGroupByArgs['orderBy'] }
        : { orderBy?: ThemeTuteurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThemeTuteurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThemeTuteurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ThemeTuteur model
   */
  readonly fields: ThemeTuteurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ThemeTuteur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThemeTuteurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tuteur<T extends TuteurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TuteurDefaultArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ThemeTuteur model
   */
  interface ThemeTuteurFieldRefs {
    readonly id: FieldRef<"ThemeTuteur", 'String'>
    readonly tuteurId: FieldRef<"ThemeTuteur", 'String'>
    readonly titre: FieldRef<"ThemeTuteur", 'String'>
    readonly description: FieldRef<"ThemeTuteur", 'String'>
    readonly disponible: FieldRef<"ThemeTuteur", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ThemeTuteur findUnique
   */
  export type ThemeTuteurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * Filter, which ThemeTuteur to fetch.
     */
    where: ThemeTuteurWhereUniqueInput
  }

  /**
   * ThemeTuteur findUniqueOrThrow
   */
  export type ThemeTuteurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * Filter, which ThemeTuteur to fetch.
     */
    where: ThemeTuteurWhereUniqueInput
  }

  /**
   * ThemeTuteur findFirst
   */
  export type ThemeTuteurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * Filter, which ThemeTuteur to fetch.
     */
    where?: ThemeTuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeTuteurs to fetch.
     */
    orderBy?: ThemeTuteurOrderByWithRelationInput | ThemeTuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThemeTuteurs.
     */
    cursor?: ThemeTuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeTuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeTuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThemeTuteurs.
     */
    distinct?: ThemeTuteurScalarFieldEnum | ThemeTuteurScalarFieldEnum[]
  }

  /**
   * ThemeTuteur findFirstOrThrow
   */
  export type ThemeTuteurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * Filter, which ThemeTuteur to fetch.
     */
    where?: ThemeTuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeTuteurs to fetch.
     */
    orderBy?: ThemeTuteurOrderByWithRelationInput | ThemeTuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThemeTuteurs.
     */
    cursor?: ThemeTuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeTuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeTuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThemeTuteurs.
     */
    distinct?: ThemeTuteurScalarFieldEnum | ThemeTuteurScalarFieldEnum[]
  }

  /**
   * ThemeTuteur findMany
   */
  export type ThemeTuteurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * Filter, which ThemeTuteurs to fetch.
     */
    where?: ThemeTuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeTuteurs to fetch.
     */
    orderBy?: ThemeTuteurOrderByWithRelationInput | ThemeTuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThemeTuteurs.
     */
    cursor?: ThemeTuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeTuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeTuteurs.
     */
    skip?: number
    distinct?: ThemeTuteurScalarFieldEnum | ThemeTuteurScalarFieldEnum[]
  }

  /**
   * ThemeTuteur create
   */
  export type ThemeTuteurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * The data needed to create a ThemeTuteur.
     */
    data: XOR<ThemeTuteurCreateInput, ThemeTuteurUncheckedCreateInput>
  }

  /**
   * ThemeTuteur createMany
   */
  export type ThemeTuteurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ThemeTuteurs.
     */
    data: ThemeTuteurCreateManyInput | ThemeTuteurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ThemeTuteur createManyAndReturn
   */
  export type ThemeTuteurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * The data used to create many ThemeTuteurs.
     */
    data: ThemeTuteurCreateManyInput | ThemeTuteurCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ThemeTuteur update
   */
  export type ThemeTuteurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * The data needed to update a ThemeTuteur.
     */
    data: XOR<ThemeTuteurUpdateInput, ThemeTuteurUncheckedUpdateInput>
    /**
     * Choose, which ThemeTuteur to update.
     */
    where: ThemeTuteurWhereUniqueInput
  }

  /**
   * ThemeTuteur updateMany
   */
  export type ThemeTuteurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ThemeTuteurs.
     */
    data: XOR<ThemeTuteurUpdateManyMutationInput, ThemeTuteurUncheckedUpdateManyInput>
    /**
     * Filter which ThemeTuteurs to update
     */
    where?: ThemeTuteurWhereInput
    /**
     * Limit how many ThemeTuteurs to update.
     */
    limit?: number
  }

  /**
   * ThemeTuteur updateManyAndReturn
   */
  export type ThemeTuteurUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * The data used to update ThemeTuteurs.
     */
    data: XOR<ThemeTuteurUpdateManyMutationInput, ThemeTuteurUncheckedUpdateManyInput>
    /**
     * Filter which ThemeTuteurs to update
     */
    where?: ThemeTuteurWhereInput
    /**
     * Limit how many ThemeTuteurs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ThemeTuteur upsert
   */
  export type ThemeTuteurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * The filter to search for the ThemeTuteur to update in case it exists.
     */
    where: ThemeTuteurWhereUniqueInput
    /**
     * In case the ThemeTuteur found by the `where` argument doesn't exist, create a new ThemeTuteur with this data.
     */
    create: XOR<ThemeTuteurCreateInput, ThemeTuteurUncheckedCreateInput>
    /**
     * In case the ThemeTuteur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThemeTuteurUpdateInput, ThemeTuteurUncheckedUpdateInput>
  }

  /**
   * ThemeTuteur delete
   */
  export type ThemeTuteurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * Filter which ThemeTuteur to delete.
     */
    where: ThemeTuteurWhereUniqueInput
  }

  /**
   * ThemeTuteur deleteMany
   */
  export type ThemeTuteurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThemeTuteurs to delete
     */
    where?: ThemeTuteurWhereInput
    /**
     * Limit how many ThemeTuteurs to delete.
     */
    limit?: number
  }

  /**
   * ThemeTuteur without action
   */
  export type ThemeTuteurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
  }


  /**
   * Model ParametreSysteme
   */

  export type AggregateParametreSysteme = {
    _count: ParametreSystemeCountAggregateOutputType | null
    _avg: ParametreSystemeAvgAggregateOutputType | null
    _sum: ParametreSystemeSumAggregateOutputType | null
    _min: ParametreSystemeMinAggregateOutputType | null
    _max: ParametreSystemeMaxAggregateOutputType | null
  }

  export type ParametreSystemeAvgAggregateOutputType = {
    id: number | null
  }

  export type ParametreSystemeSumAggregateOutputType = {
    id: number | null
  }

  export type ParametreSystemeMinAggregateOutputType = {
    id: number | null
    cle: string | null
    valeur: string | null
  }

  export type ParametreSystemeMaxAggregateOutputType = {
    id: number | null
    cle: string | null
    valeur: string | null
  }

  export type ParametreSystemeCountAggregateOutputType = {
    id: number
    cle: number
    valeur: number
    _all: number
  }


  export type ParametreSystemeAvgAggregateInputType = {
    id?: true
  }

  export type ParametreSystemeSumAggregateInputType = {
    id?: true
  }

  export type ParametreSystemeMinAggregateInputType = {
    id?: true
    cle?: true
    valeur?: true
  }

  export type ParametreSystemeMaxAggregateInputType = {
    id?: true
    cle?: true
    valeur?: true
  }

  export type ParametreSystemeCountAggregateInputType = {
    id?: true
    cle?: true
    valeur?: true
    _all?: true
  }

  export type ParametreSystemeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParametreSysteme to aggregate.
     */
    where?: ParametreSystemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParametreSystemes to fetch.
     */
    orderBy?: ParametreSystemeOrderByWithRelationInput | ParametreSystemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParametreSystemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParametreSystemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParametreSystemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParametreSystemes
    **/
    _count?: true | ParametreSystemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParametreSystemeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParametreSystemeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParametreSystemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParametreSystemeMaxAggregateInputType
  }

  export type GetParametreSystemeAggregateType<T extends ParametreSystemeAggregateArgs> = {
        [P in keyof T & keyof AggregateParametreSysteme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParametreSysteme[P]>
      : GetScalarType<T[P], AggregateParametreSysteme[P]>
  }




  export type ParametreSystemeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParametreSystemeWhereInput
    orderBy?: ParametreSystemeOrderByWithAggregationInput | ParametreSystemeOrderByWithAggregationInput[]
    by: ParametreSystemeScalarFieldEnum[] | ParametreSystemeScalarFieldEnum
    having?: ParametreSystemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParametreSystemeCountAggregateInputType | true
    _avg?: ParametreSystemeAvgAggregateInputType
    _sum?: ParametreSystemeSumAggregateInputType
    _min?: ParametreSystemeMinAggregateInputType
    _max?: ParametreSystemeMaxAggregateInputType
  }

  export type ParametreSystemeGroupByOutputType = {
    id: number
    cle: string
    valeur: string
    _count: ParametreSystemeCountAggregateOutputType | null
    _avg: ParametreSystemeAvgAggregateOutputType | null
    _sum: ParametreSystemeSumAggregateOutputType | null
    _min: ParametreSystemeMinAggregateOutputType | null
    _max: ParametreSystemeMaxAggregateOutputType | null
  }

  type GetParametreSystemeGroupByPayload<T extends ParametreSystemeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParametreSystemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParametreSystemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParametreSystemeGroupByOutputType[P]>
            : GetScalarType<T[P], ParametreSystemeGroupByOutputType[P]>
        }
      >
    >


  export type ParametreSystemeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cle?: boolean
    valeur?: boolean
  }, ExtArgs["result"]["parametreSysteme"]>

  export type ParametreSystemeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cle?: boolean
    valeur?: boolean
  }, ExtArgs["result"]["parametreSysteme"]>

  export type ParametreSystemeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cle?: boolean
    valeur?: boolean
  }, ExtArgs["result"]["parametreSysteme"]>

  export type ParametreSystemeSelectScalar = {
    id?: boolean
    cle?: boolean
    valeur?: boolean
  }

  export type ParametreSystemeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cle" | "valeur", ExtArgs["result"]["parametreSysteme"]>

  export type $ParametreSystemePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParametreSysteme"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cle: string
      valeur: string
    }, ExtArgs["result"]["parametreSysteme"]>
    composites: {}
  }

  type ParametreSystemeGetPayload<S extends boolean | null | undefined | ParametreSystemeDefaultArgs> = $Result.GetResult<Prisma.$ParametreSystemePayload, S>

  type ParametreSystemeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ParametreSystemeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ParametreSystemeCountAggregateInputType | true
    }

  export interface ParametreSystemeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParametreSysteme'], meta: { name: 'ParametreSysteme' } }
    /**
     * Find zero or one ParametreSysteme that matches the filter.
     * @param {ParametreSystemeFindUniqueArgs} args - Arguments to find a ParametreSysteme
     * @example
     * // Get one ParametreSysteme
     * const parametreSysteme = await prisma.parametreSysteme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParametreSystemeFindUniqueArgs>(args: SelectSubset<T, ParametreSystemeFindUniqueArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ParametreSysteme that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ParametreSystemeFindUniqueOrThrowArgs} args - Arguments to find a ParametreSysteme
     * @example
     * // Get one ParametreSysteme
     * const parametreSysteme = await prisma.parametreSysteme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParametreSystemeFindUniqueOrThrowArgs>(args: SelectSubset<T, ParametreSystemeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParametreSysteme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametreSystemeFindFirstArgs} args - Arguments to find a ParametreSysteme
     * @example
     * // Get one ParametreSysteme
     * const parametreSysteme = await prisma.parametreSysteme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParametreSystemeFindFirstArgs>(args?: SelectSubset<T, ParametreSystemeFindFirstArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParametreSysteme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametreSystemeFindFirstOrThrowArgs} args - Arguments to find a ParametreSysteme
     * @example
     * // Get one ParametreSysteme
     * const parametreSysteme = await prisma.parametreSysteme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParametreSystemeFindFirstOrThrowArgs>(args?: SelectSubset<T, ParametreSystemeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ParametreSystemes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametreSystemeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParametreSystemes
     * const parametreSystemes = await prisma.parametreSysteme.findMany()
     * 
     * // Get first 10 ParametreSystemes
     * const parametreSystemes = await prisma.parametreSysteme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parametreSystemeWithIdOnly = await prisma.parametreSysteme.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParametreSystemeFindManyArgs>(args?: SelectSubset<T, ParametreSystemeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ParametreSysteme.
     * @param {ParametreSystemeCreateArgs} args - Arguments to create a ParametreSysteme.
     * @example
     * // Create one ParametreSysteme
     * const ParametreSysteme = await prisma.parametreSysteme.create({
     *   data: {
     *     // ... data to create a ParametreSysteme
     *   }
     * })
     * 
     */
    create<T extends ParametreSystemeCreateArgs>(args: SelectSubset<T, ParametreSystemeCreateArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ParametreSystemes.
     * @param {ParametreSystemeCreateManyArgs} args - Arguments to create many ParametreSystemes.
     * @example
     * // Create many ParametreSystemes
     * const parametreSysteme = await prisma.parametreSysteme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParametreSystemeCreateManyArgs>(args?: SelectSubset<T, ParametreSystemeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ParametreSystemes and returns the data saved in the database.
     * @param {ParametreSystemeCreateManyAndReturnArgs} args - Arguments to create many ParametreSystemes.
     * @example
     * // Create many ParametreSystemes
     * const parametreSysteme = await prisma.parametreSysteme.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ParametreSystemes and only return the `id`
     * const parametreSystemeWithIdOnly = await prisma.parametreSysteme.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParametreSystemeCreateManyAndReturnArgs>(args?: SelectSubset<T, ParametreSystemeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ParametreSysteme.
     * @param {ParametreSystemeDeleteArgs} args - Arguments to delete one ParametreSysteme.
     * @example
     * // Delete one ParametreSysteme
     * const ParametreSysteme = await prisma.parametreSysteme.delete({
     *   where: {
     *     // ... filter to delete one ParametreSysteme
     *   }
     * })
     * 
     */
    delete<T extends ParametreSystemeDeleteArgs>(args: SelectSubset<T, ParametreSystemeDeleteArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ParametreSysteme.
     * @param {ParametreSystemeUpdateArgs} args - Arguments to update one ParametreSysteme.
     * @example
     * // Update one ParametreSysteme
     * const parametreSysteme = await prisma.parametreSysteme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParametreSystemeUpdateArgs>(args: SelectSubset<T, ParametreSystemeUpdateArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ParametreSystemes.
     * @param {ParametreSystemeDeleteManyArgs} args - Arguments to filter ParametreSystemes to delete.
     * @example
     * // Delete a few ParametreSystemes
     * const { count } = await prisma.parametreSysteme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParametreSystemeDeleteManyArgs>(args?: SelectSubset<T, ParametreSystemeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParametreSystemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametreSystemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParametreSystemes
     * const parametreSysteme = await prisma.parametreSysteme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParametreSystemeUpdateManyArgs>(args: SelectSubset<T, ParametreSystemeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParametreSystemes and returns the data updated in the database.
     * @param {ParametreSystemeUpdateManyAndReturnArgs} args - Arguments to update many ParametreSystemes.
     * @example
     * // Update many ParametreSystemes
     * const parametreSysteme = await prisma.parametreSysteme.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ParametreSystemes and only return the `id`
     * const parametreSystemeWithIdOnly = await prisma.parametreSysteme.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ParametreSystemeUpdateManyAndReturnArgs>(args: SelectSubset<T, ParametreSystemeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ParametreSysteme.
     * @param {ParametreSystemeUpsertArgs} args - Arguments to update or create a ParametreSysteme.
     * @example
     * // Update or create a ParametreSysteme
     * const parametreSysteme = await prisma.parametreSysteme.upsert({
     *   create: {
     *     // ... data to create a ParametreSysteme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParametreSysteme we want to update
     *   }
     * })
     */
    upsert<T extends ParametreSystemeUpsertArgs>(args: SelectSubset<T, ParametreSystemeUpsertArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ParametreSystemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametreSystemeCountArgs} args - Arguments to filter ParametreSystemes to count.
     * @example
     * // Count the number of ParametreSystemes
     * const count = await prisma.parametreSysteme.count({
     *   where: {
     *     // ... the filter for the ParametreSystemes we want to count
     *   }
     * })
    **/
    count<T extends ParametreSystemeCountArgs>(
      args?: Subset<T, ParametreSystemeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParametreSystemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParametreSysteme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametreSystemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParametreSystemeAggregateArgs>(args: Subset<T, ParametreSystemeAggregateArgs>): Prisma.PrismaPromise<GetParametreSystemeAggregateType<T>>

    /**
     * Group by ParametreSysteme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametreSystemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParametreSystemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParametreSystemeGroupByArgs['orderBy'] }
        : { orderBy?: ParametreSystemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParametreSystemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParametreSystemeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParametreSysteme model
   */
  readonly fields: ParametreSystemeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParametreSysteme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParametreSystemeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ParametreSysteme model
   */
  interface ParametreSystemeFieldRefs {
    readonly id: FieldRef<"ParametreSysteme", 'Int'>
    readonly cle: FieldRef<"ParametreSysteme", 'String'>
    readonly valeur: FieldRef<"ParametreSysteme", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ParametreSysteme findUnique
   */
  export type ParametreSystemeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * Filter, which ParametreSysteme to fetch.
     */
    where: ParametreSystemeWhereUniqueInput
  }

  /**
   * ParametreSysteme findUniqueOrThrow
   */
  export type ParametreSystemeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * Filter, which ParametreSysteme to fetch.
     */
    where: ParametreSystemeWhereUniqueInput
  }

  /**
   * ParametreSysteme findFirst
   */
  export type ParametreSystemeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * Filter, which ParametreSysteme to fetch.
     */
    where?: ParametreSystemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParametreSystemes to fetch.
     */
    orderBy?: ParametreSystemeOrderByWithRelationInput | ParametreSystemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParametreSystemes.
     */
    cursor?: ParametreSystemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParametreSystemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParametreSystemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParametreSystemes.
     */
    distinct?: ParametreSystemeScalarFieldEnum | ParametreSystemeScalarFieldEnum[]
  }

  /**
   * ParametreSysteme findFirstOrThrow
   */
  export type ParametreSystemeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * Filter, which ParametreSysteme to fetch.
     */
    where?: ParametreSystemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParametreSystemes to fetch.
     */
    orderBy?: ParametreSystemeOrderByWithRelationInput | ParametreSystemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParametreSystemes.
     */
    cursor?: ParametreSystemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParametreSystemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParametreSystemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParametreSystemes.
     */
    distinct?: ParametreSystemeScalarFieldEnum | ParametreSystemeScalarFieldEnum[]
  }

  /**
   * ParametreSysteme findMany
   */
  export type ParametreSystemeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * Filter, which ParametreSystemes to fetch.
     */
    where?: ParametreSystemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParametreSystemes to fetch.
     */
    orderBy?: ParametreSystemeOrderByWithRelationInput | ParametreSystemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParametreSystemes.
     */
    cursor?: ParametreSystemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParametreSystemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParametreSystemes.
     */
    skip?: number
    distinct?: ParametreSystemeScalarFieldEnum | ParametreSystemeScalarFieldEnum[]
  }

  /**
   * ParametreSysteme create
   */
  export type ParametreSystemeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * The data needed to create a ParametreSysteme.
     */
    data: XOR<ParametreSystemeCreateInput, ParametreSystemeUncheckedCreateInput>
  }

  /**
   * ParametreSysteme createMany
   */
  export type ParametreSystemeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParametreSystemes.
     */
    data: ParametreSystemeCreateManyInput | ParametreSystemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParametreSysteme createManyAndReturn
   */
  export type ParametreSystemeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * The data used to create many ParametreSystemes.
     */
    data: ParametreSystemeCreateManyInput | ParametreSystemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParametreSysteme update
   */
  export type ParametreSystemeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * The data needed to update a ParametreSysteme.
     */
    data: XOR<ParametreSystemeUpdateInput, ParametreSystemeUncheckedUpdateInput>
    /**
     * Choose, which ParametreSysteme to update.
     */
    where: ParametreSystemeWhereUniqueInput
  }

  /**
   * ParametreSysteme updateMany
   */
  export type ParametreSystemeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParametreSystemes.
     */
    data: XOR<ParametreSystemeUpdateManyMutationInput, ParametreSystemeUncheckedUpdateManyInput>
    /**
     * Filter which ParametreSystemes to update
     */
    where?: ParametreSystemeWhereInput
    /**
     * Limit how many ParametreSystemes to update.
     */
    limit?: number
  }

  /**
   * ParametreSysteme updateManyAndReturn
   */
  export type ParametreSystemeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * The data used to update ParametreSystemes.
     */
    data: XOR<ParametreSystemeUpdateManyMutationInput, ParametreSystemeUncheckedUpdateManyInput>
    /**
     * Filter which ParametreSystemes to update
     */
    where?: ParametreSystemeWhereInput
    /**
     * Limit how many ParametreSystemes to update.
     */
    limit?: number
  }

  /**
   * ParametreSysteme upsert
   */
  export type ParametreSystemeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * The filter to search for the ParametreSysteme to update in case it exists.
     */
    where: ParametreSystemeWhereUniqueInput
    /**
     * In case the ParametreSysteme found by the `where` argument doesn't exist, create a new ParametreSysteme with this data.
     */
    create: XOR<ParametreSystemeCreateInput, ParametreSystemeUncheckedCreateInput>
    /**
     * In case the ParametreSysteme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParametreSystemeUpdateInput, ParametreSystemeUncheckedUpdateInput>
  }

  /**
   * ParametreSysteme delete
   */
  export type ParametreSystemeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * Filter which ParametreSysteme to delete.
     */
    where: ParametreSystemeWhereUniqueInput
  }

  /**
   * ParametreSysteme deleteMany
   */
  export type ParametreSystemeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParametreSystemes to delete
     */
    where?: ParametreSystemeWhereInput
    /**
     * Limit how many ParametreSystemes to delete.
     */
    limit?: number
  }

  /**
   * ParametreSysteme without action
   */
  export type ParametreSystemeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
  }


  /**
   * Model JournalAction
   */

  export type AggregateJournalAction = {
    _count: JournalActionCountAggregateOutputType | null
    _min: JournalActionMinAggregateOutputType | null
    _max: JournalActionMaxAggregateOutputType | null
  }

  export type JournalActionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    cible: string | null
    timestamp: Date | null
    demandeStageId: string | null
  }

  export type JournalActionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    cible: string | null
    timestamp: Date | null
    demandeStageId: string | null
  }

  export type JournalActionCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    cible: number
    timestamp: number
    demandeStageId: number
    _all: number
  }


  export type JournalActionMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    cible?: true
    timestamp?: true
    demandeStageId?: true
  }

  export type JournalActionMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    cible?: true
    timestamp?: true
    demandeStageId?: true
  }

  export type JournalActionCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    cible?: true
    timestamp?: true
    demandeStageId?: true
    _all?: true
  }

  export type JournalActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JournalAction to aggregate.
     */
    where?: JournalActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalActions to fetch.
     */
    orderBy?: JournalActionOrderByWithRelationInput | JournalActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JournalActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JournalActions
    **/
    _count?: true | JournalActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JournalActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JournalActionMaxAggregateInputType
  }

  export type GetJournalActionAggregateType<T extends JournalActionAggregateArgs> = {
        [P in keyof T & keyof AggregateJournalAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJournalAction[P]>
      : GetScalarType<T[P], AggregateJournalAction[P]>
  }




  export type JournalActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JournalActionWhereInput
    orderBy?: JournalActionOrderByWithAggregationInput | JournalActionOrderByWithAggregationInput[]
    by: JournalActionScalarFieldEnum[] | JournalActionScalarFieldEnum
    having?: JournalActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JournalActionCountAggregateInputType | true
    _min?: JournalActionMinAggregateInputType
    _max?: JournalActionMaxAggregateInputType
  }

  export type JournalActionGroupByOutputType = {
    id: string
    userId: string
    action: string
    cible: string
    timestamp: Date
    demandeStageId: string | null
    _count: JournalActionCountAggregateOutputType | null
    _min: JournalActionMinAggregateOutputType | null
    _max: JournalActionMaxAggregateOutputType | null
  }

  type GetJournalActionGroupByPayload<T extends JournalActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JournalActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JournalActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JournalActionGroupByOutputType[P]>
            : GetScalarType<T[P], JournalActionGroupByOutputType[P]>
        }
      >
    >


  export type JournalActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    cible?: boolean
    timestamp?: boolean
    demandeStageId?: boolean
    demandeStage?: boolean | JournalAction$demandeStageArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journalAction"]>

  export type JournalActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    cible?: boolean
    timestamp?: boolean
    demandeStageId?: boolean
    demandeStage?: boolean | JournalAction$demandeStageArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journalAction"]>

  export type JournalActionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    cible?: boolean
    timestamp?: boolean
    demandeStageId?: boolean
    demandeStage?: boolean | JournalAction$demandeStageArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journalAction"]>

  export type JournalActionSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    cible?: boolean
    timestamp?: boolean
    demandeStageId?: boolean
  }

  export type JournalActionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "cible" | "timestamp" | "demandeStageId", ExtArgs["result"]["journalAction"]>
  export type JournalActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    demandeStage?: boolean | JournalAction$demandeStageArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type JournalActionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    demandeStage?: boolean | JournalAction$demandeStageArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type JournalActionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    demandeStage?: boolean | JournalAction$demandeStageArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $JournalActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JournalAction"
    objects: {
      demandeStage: Prisma.$DemandeStagePayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: string
      cible: string
      timestamp: Date
      demandeStageId: string | null
    }, ExtArgs["result"]["journalAction"]>
    composites: {}
  }

  type JournalActionGetPayload<S extends boolean | null | undefined | JournalActionDefaultArgs> = $Result.GetResult<Prisma.$JournalActionPayload, S>

  type JournalActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JournalActionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JournalActionCountAggregateInputType | true
    }

  export interface JournalActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JournalAction'], meta: { name: 'JournalAction' } }
    /**
     * Find zero or one JournalAction that matches the filter.
     * @param {JournalActionFindUniqueArgs} args - Arguments to find a JournalAction
     * @example
     * // Get one JournalAction
     * const journalAction = await prisma.journalAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JournalActionFindUniqueArgs>(args: SelectSubset<T, JournalActionFindUniqueArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JournalAction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JournalActionFindUniqueOrThrowArgs} args - Arguments to find a JournalAction
     * @example
     * // Get one JournalAction
     * const journalAction = await prisma.journalAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JournalActionFindUniqueOrThrowArgs>(args: SelectSubset<T, JournalActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JournalAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalActionFindFirstArgs} args - Arguments to find a JournalAction
     * @example
     * // Get one JournalAction
     * const journalAction = await prisma.journalAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JournalActionFindFirstArgs>(args?: SelectSubset<T, JournalActionFindFirstArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JournalAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalActionFindFirstOrThrowArgs} args - Arguments to find a JournalAction
     * @example
     * // Get one JournalAction
     * const journalAction = await prisma.journalAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JournalActionFindFirstOrThrowArgs>(args?: SelectSubset<T, JournalActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JournalActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JournalActions
     * const journalActions = await prisma.journalAction.findMany()
     * 
     * // Get first 10 JournalActions
     * const journalActions = await prisma.journalAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const journalActionWithIdOnly = await prisma.journalAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JournalActionFindManyArgs>(args?: SelectSubset<T, JournalActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JournalAction.
     * @param {JournalActionCreateArgs} args - Arguments to create a JournalAction.
     * @example
     * // Create one JournalAction
     * const JournalAction = await prisma.journalAction.create({
     *   data: {
     *     // ... data to create a JournalAction
     *   }
     * })
     * 
     */
    create<T extends JournalActionCreateArgs>(args: SelectSubset<T, JournalActionCreateArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JournalActions.
     * @param {JournalActionCreateManyArgs} args - Arguments to create many JournalActions.
     * @example
     * // Create many JournalActions
     * const journalAction = await prisma.journalAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JournalActionCreateManyArgs>(args?: SelectSubset<T, JournalActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JournalActions and returns the data saved in the database.
     * @param {JournalActionCreateManyAndReturnArgs} args - Arguments to create many JournalActions.
     * @example
     * // Create many JournalActions
     * const journalAction = await prisma.journalAction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JournalActions and only return the `id`
     * const journalActionWithIdOnly = await prisma.journalAction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JournalActionCreateManyAndReturnArgs>(args?: SelectSubset<T, JournalActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JournalAction.
     * @param {JournalActionDeleteArgs} args - Arguments to delete one JournalAction.
     * @example
     * // Delete one JournalAction
     * const JournalAction = await prisma.journalAction.delete({
     *   where: {
     *     // ... filter to delete one JournalAction
     *   }
     * })
     * 
     */
    delete<T extends JournalActionDeleteArgs>(args: SelectSubset<T, JournalActionDeleteArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JournalAction.
     * @param {JournalActionUpdateArgs} args - Arguments to update one JournalAction.
     * @example
     * // Update one JournalAction
     * const journalAction = await prisma.journalAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JournalActionUpdateArgs>(args: SelectSubset<T, JournalActionUpdateArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JournalActions.
     * @param {JournalActionDeleteManyArgs} args - Arguments to filter JournalActions to delete.
     * @example
     * // Delete a few JournalActions
     * const { count } = await prisma.journalAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JournalActionDeleteManyArgs>(args?: SelectSubset<T, JournalActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JournalActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JournalActions
     * const journalAction = await prisma.journalAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JournalActionUpdateManyArgs>(args: SelectSubset<T, JournalActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JournalActions and returns the data updated in the database.
     * @param {JournalActionUpdateManyAndReturnArgs} args - Arguments to update many JournalActions.
     * @example
     * // Update many JournalActions
     * const journalAction = await prisma.journalAction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JournalActions and only return the `id`
     * const journalActionWithIdOnly = await prisma.journalAction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JournalActionUpdateManyAndReturnArgs>(args: SelectSubset<T, JournalActionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JournalAction.
     * @param {JournalActionUpsertArgs} args - Arguments to update or create a JournalAction.
     * @example
     * // Update or create a JournalAction
     * const journalAction = await prisma.journalAction.upsert({
     *   create: {
     *     // ... data to create a JournalAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JournalAction we want to update
     *   }
     * })
     */
    upsert<T extends JournalActionUpsertArgs>(args: SelectSubset<T, JournalActionUpsertArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JournalActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalActionCountArgs} args - Arguments to filter JournalActions to count.
     * @example
     * // Count the number of JournalActions
     * const count = await prisma.journalAction.count({
     *   where: {
     *     // ... the filter for the JournalActions we want to count
     *   }
     * })
    **/
    count<T extends JournalActionCountArgs>(
      args?: Subset<T, JournalActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JournalActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JournalAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JournalActionAggregateArgs>(args: Subset<T, JournalActionAggregateArgs>): Prisma.PrismaPromise<GetJournalActionAggregateType<T>>

    /**
     * Group by JournalAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JournalActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JournalActionGroupByArgs['orderBy'] }
        : { orderBy?: JournalActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JournalActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJournalActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JournalAction model
   */
  readonly fields: JournalActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JournalAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JournalActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    demandeStage<T extends JournalAction$demandeStageArgs<ExtArgs> = {}>(args?: Subset<T, JournalAction$demandeStageArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JournalAction model
   */
  interface JournalActionFieldRefs {
    readonly id: FieldRef<"JournalAction", 'String'>
    readonly userId: FieldRef<"JournalAction", 'String'>
    readonly action: FieldRef<"JournalAction", 'String'>
    readonly cible: FieldRef<"JournalAction", 'String'>
    readonly timestamp: FieldRef<"JournalAction", 'DateTime'>
    readonly demandeStageId: FieldRef<"JournalAction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * JournalAction findUnique
   */
  export type JournalActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * Filter, which JournalAction to fetch.
     */
    where: JournalActionWhereUniqueInput
  }

  /**
   * JournalAction findUniqueOrThrow
   */
  export type JournalActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * Filter, which JournalAction to fetch.
     */
    where: JournalActionWhereUniqueInput
  }

  /**
   * JournalAction findFirst
   */
  export type JournalActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * Filter, which JournalAction to fetch.
     */
    where?: JournalActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalActions to fetch.
     */
    orderBy?: JournalActionOrderByWithRelationInput | JournalActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JournalActions.
     */
    cursor?: JournalActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JournalActions.
     */
    distinct?: JournalActionScalarFieldEnum | JournalActionScalarFieldEnum[]
  }

  /**
   * JournalAction findFirstOrThrow
   */
  export type JournalActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * Filter, which JournalAction to fetch.
     */
    where?: JournalActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalActions to fetch.
     */
    orderBy?: JournalActionOrderByWithRelationInput | JournalActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JournalActions.
     */
    cursor?: JournalActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JournalActions.
     */
    distinct?: JournalActionScalarFieldEnum | JournalActionScalarFieldEnum[]
  }

  /**
   * JournalAction findMany
   */
  export type JournalActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * Filter, which JournalActions to fetch.
     */
    where?: JournalActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalActions to fetch.
     */
    orderBy?: JournalActionOrderByWithRelationInput | JournalActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JournalActions.
     */
    cursor?: JournalActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalActions.
     */
    skip?: number
    distinct?: JournalActionScalarFieldEnum | JournalActionScalarFieldEnum[]
  }

  /**
   * JournalAction create
   */
  export type JournalActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * The data needed to create a JournalAction.
     */
    data: XOR<JournalActionCreateInput, JournalActionUncheckedCreateInput>
  }

  /**
   * JournalAction createMany
   */
  export type JournalActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JournalActions.
     */
    data: JournalActionCreateManyInput | JournalActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JournalAction createManyAndReturn
   */
  export type JournalActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * The data used to create many JournalActions.
     */
    data: JournalActionCreateManyInput | JournalActionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JournalAction update
   */
  export type JournalActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * The data needed to update a JournalAction.
     */
    data: XOR<JournalActionUpdateInput, JournalActionUncheckedUpdateInput>
    /**
     * Choose, which JournalAction to update.
     */
    where: JournalActionWhereUniqueInput
  }

  /**
   * JournalAction updateMany
   */
  export type JournalActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JournalActions.
     */
    data: XOR<JournalActionUpdateManyMutationInput, JournalActionUncheckedUpdateManyInput>
    /**
     * Filter which JournalActions to update
     */
    where?: JournalActionWhereInput
    /**
     * Limit how many JournalActions to update.
     */
    limit?: number
  }

  /**
   * JournalAction updateManyAndReturn
   */
  export type JournalActionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * The data used to update JournalActions.
     */
    data: XOR<JournalActionUpdateManyMutationInput, JournalActionUncheckedUpdateManyInput>
    /**
     * Filter which JournalActions to update
     */
    where?: JournalActionWhereInput
    /**
     * Limit how many JournalActions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JournalAction upsert
   */
  export type JournalActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * The filter to search for the JournalAction to update in case it exists.
     */
    where: JournalActionWhereUniqueInput
    /**
     * In case the JournalAction found by the `where` argument doesn't exist, create a new JournalAction with this data.
     */
    create: XOR<JournalActionCreateInput, JournalActionUncheckedCreateInput>
    /**
     * In case the JournalAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JournalActionUpdateInput, JournalActionUncheckedUpdateInput>
  }

  /**
   * JournalAction delete
   */
  export type JournalActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * Filter which JournalAction to delete.
     */
    where: JournalActionWhereUniqueInput
  }

  /**
   * JournalAction deleteMany
   */
  export type JournalActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JournalActions to delete
     */
    where?: JournalActionWhereInput
    /**
     * Limit how many JournalActions to delete.
     */
    limit?: number
  }

  /**
   * JournalAction.demandeStage
   */
  export type JournalAction$demandeStageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    where?: DemandeStageWhereInput
  }

  /**
   * JournalAction without action
   */
  export type JournalActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
  }


  /**
   * Model StageRequest
   */

  export type AggregateStageRequest = {
    _count: StageRequestCountAggregateOutputType | null
    _min: StageRequestMinAggregateOutputType | null
    _max: StageRequestMaxAggregateOutputType | null
  }

  export type StageRequestMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
    type: string | null
    departement: string | null
    dateDebut: Date | null
    dateFin: Date | null
    motivation: string | null
    competences: string | null
    experience: string | null
    universite: string | null
    domaineEtude: string | null
    anneeEtude: string | null
    code_suivi: string | null
    photo: string | null
    candidate2Email: string | null
    candidate2Photo: string | null
    requiresSecondCandidateValidation: boolean | null
    secondCandidateValidated: boolean | null
    secondCandidateUserId: string | null
    secondCandidateValidationToken: string | null
    secondCandidateValidationExpiresAt: Date | null
    stagiaireId: string | null
    cv: string | null
    lettreMotivation: string | null
    carteIdentite: string | null
    inscriptionUniversitaire: string | null
    recommandation: string | null
  }

  export type StageRequestMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
    type: string | null
    departement: string | null
    dateDebut: Date | null
    dateFin: Date | null
    motivation: string | null
    competences: string | null
    experience: string | null
    universite: string | null
    domaineEtude: string | null
    anneeEtude: string | null
    code_suivi: string | null
    photo: string | null
    candidate2Email: string | null
    candidate2Photo: string | null
    requiresSecondCandidateValidation: boolean | null
    secondCandidateValidated: boolean | null
    secondCandidateUserId: string | null
    secondCandidateValidationToken: string | null
    secondCandidateValidationExpiresAt: Date | null
    stagiaireId: string | null
    cv: string | null
    lettreMotivation: string | null
    carteIdentite: string | null
    inscriptionUniversitaire: string | null
    recommandation: string | null
  }

  export type StageRequestCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    status: number
    type: number
    departement: number
    dateDebut: number
    dateFin: number
    motivation: number
    competences: number
    experience: number
    universite: number
    domaineEtude: number
    anneeEtude: number
    code_suivi: number
    photo: number
    candidate2Email: number
    candidate2Photo: number
    requiresSecondCandidateValidation: number
    secondCandidateValidated: number
    secondCandidateUserId: number
    secondCandidateValidationToken: number
    secondCandidateValidationExpiresAt: number
    stagiaireId: number
    cv: number
    lettreMotivation: number
    carteIdentite: number
    inscriptionUniversitaire: number
    recommandation: number
    autresDocuments: number
    _all: number
  }


  export type StageRequestMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    type?: true
    departement?: true
    dateDebut?: true
    dateFin?: true
    motivation?: true
    competences?: true
    experience?: true
    universite?: true
    domaineEtude?: true
    anneeEtude?: true
    code_suivi?: true
    photo?: true
    candidate2Email?: true
    candidate2Photo?: true
    requiresSecondCandidateValidation?: true
    secondCandidateValidated?: true
    secondCandidateUserId?: true
    secondCandidateValidationToken?: true
    secondCandidateValidationExpiresAt?: true
    stagiaireId?: true
    cv?: true
    lettreMotivation?: true
    carteIdentite?: true
    inscriptionUniversitaire?: true
    recommandation?: true
  }

  export type StageRequestMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    type?: true
    departement?: true
    dateDebut?: true
    dateFin?: true
    motivation?: true
    competences?: true
    experience?: true
    universite?: true
    domaineEtude?: true
    anneeEtude?: true
    code_suivi?: true
    photo?: true
    candidate2Email?: true
    candidate2Photo?: true
    requiresSecondCandidateValidation?: true
    secondCandidateValidated?: true
    secondCandidateUserId?: true
    secondCandidateValidationToken?: true
    secondCandidateValidationExpiresAt?: true
    stagiaireId?: true
    cv?: true
    lettreMotivation?: true
    carteIdentite?: true
    inscriptionUniversitaire?: true
    recommandation?: true
  }

  export type StageRequestCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    type?: true
    departement?: true
    dateDebut?: true
    dateFin?: true
    motivation?: true
    competences?: true
    experience?: true
    universite?: true
    domaineEtude?: true
    anneeEtude?: true
    code_suivi?: true
    photo?: true
    candidate2Email?: true
    candidate2Photo?: true
    requiresSecondCandidateValidation?: true
    secondCandidateValidated?: true
    secondCandidateUserId?: true
    secondCandidateValidationToken?: true
    secondCandidateValidationExpiresAt?: true
    stagiaireId?: true
    cv?: true
    lettreMotivation?: true
    carteIdentite?: true
    inscriptionUniversitaire?: true
    recommandation?: true
    autresDocuments?: true
    _all?: true
  }

  export type StageRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StageRequest to aggregate.
     */
    where?: StageRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StageRequests to fetch.
     */
    orderBy?: StageRequestOrderByWithRelationInput | StageRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StageRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StageRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StageRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StageRequests
    **/
    _count?: true | StageRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StageRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StageRequestMaxAggregateInputType
  }

  export type GetStageRequestAggregateType<T extends StageRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateStageRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStageRequest[P]>
      : GetScalarType<T[P], AggregateStageRequest[P]>
  }




  export type StageRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageRequestWhereInput
    orderBy?: StageRequestOrderByWithAggregationInput | StageRequestOrderByWithAggregationInput[]
    by: StageRequestScalarFieldEnum[] | StageRequestScalarFieldEnum
    having?: StageRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StageRequestCountAggregateInputType | true
    _min?: StageRequestMinAggregateInputType
    _max?: StageRequestMaxAggregateInputType
  }

  export type StageRequestGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    status: string
    type: string
    departement: string
    dateDebut: Date
    dateFin: Date
    motivation: string
    competences: string
    experience: string
    universite: string
    domaineEtude: string
    anneeEtude: string
    code_suivi: string | null
    photo: string | null
    candidate2Email: string | null
    candidate2Photo: string | null
    requiresSecondCandidateValidation: boolean
    secondCandidateValidated: boolean
    secondCandidateUserId: string | null
    secondCandidateValidationToken: string | null
    secondCandidateValidationExpiresAt: Date | null
    stagiaireId: string
    cv: string | null
    lettreMotivation: string | null
    carteIdentite: string | null
    inscriptionUniversitaire: string | null
    recommandation: string | null
    autresDocuments: JsonValue | null
    _count: StageRequestCountAggregateOutputType | null
    _min: StageRequestMinAggregateOutputType | null
    _max: StageRequestMaxAggregateOutputType | null
  }

  type GetStageRequestGroupByPayload<T extends StageRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StageRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StageRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StageRequestGroupByOutputType[P]>
            : GetScalarType<T[P], StageRequestGroupByOutputType[P]>
        }
      >
    >


  export type StageRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    type?: boolean
    departement?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    motivation?: boolean
    competences?: boolean
    experience?: boolean
    universite?: boolean
    domaineEtude?: boolean
    anneeEtude?: boolean
    code_suivi?: boolean
    photo?: boolean
    candidate2Email?: boolean
    candidate2Photo?: boolean
    requiresSecondCandidateValidation?: boolean
    secondCandidateValidated?: boolean
    secondCandidateUserId?: boolean
    secondCandidateValidationToken?: boolean
    secondCandidateValidationExpiresAt?: boolean
    stagiaireId?: boolean
    cv?: boolean
    lettreMotivation?: boolean
    carteIdentite?: boolean
    inscriptionUniversitaire?: boolean
    recommandation?: boolean
    autresDocuments?: boolean
    stagiaire?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stageRequest"]>

  export type StageRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    type?: boolean
    departement?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    motivation?: boolean
    competences?: boolean
    experience?: boolean
    universite?: boolean
    domaineEtude?: boolean
    anneeEtude?: boolean
    code_suivi?: boolean
    photo?: boolean
    candidate2Email?: boolean
    candidate2Photo?: boolean
    requiresSecondCandidateValidation?: boolean
    secondCandidateValidated?: boolean
    secondCandidateUserId?: boolean
    secondCandidateValidationToken?: boolean
    secondCandidateValidationExpiresAt?: boolean
    stagiaireId?: boolean
    cv?: boolean
    lettreMotivation?: boolean
    carteIdentite?: boolean
    inscriptionUniversitaire?: boolean
    recommandation?: boolean
    autresDocuments?: boolean
    stagiaire?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stageRequest"]>

  export type StageRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    type?: boolean
    departement?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    motivation?: boolean
    competences?: boolean
    experience?: boolean
    universite?: boolean
    domaineEtude?: boolean
    anneeEtude?: boolean
    code_suivi?: boolean
    photo?: boolean
    candidate2Email?: boolean
    candidate2Photo?: boolean
    requiresSecondCandidateValidation?: boolean
    secondCandidateValidated?: boolean
    secondCandidateUserId?: boolean
    secondCandidateValidationToken?: boolean
    secondCandidateValidationExpiresAt?: boolean
    stagiaireId?: boolean
    cv?: boolean
    lettreMotivation?: boolean
    carteIdentite?: boolean
    inscriptionUniversitaire?: boolean
    recommandation?: boolean
    autresDocuments?: boolean
    stagiaire?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stageRequest"]>

  export type StageRequestSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    type?: boolean
    departement?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    motivation?: boolean
    competences?: boolean
    experience?: boolean
    universite?: boolean
    domaineEtude?: boolean
    anneeEtude?: boolean
    code_suivi?: boolean
    photo?: boolean
    candidate2Email?: boolean
    candidate2Photo?: boolean
    requiresSecondCandidateValidation?: boolean
    secondCandidateValidated?: boolean
    secondCandidateUserId?: boolean
    secondCandidateValidationToken?: boolean
    secondCandidateValidationExpiresAt?: boolean
    stagiaireId?: boolean
    cv?: boolean
    lettreMotivation?: boolean
    carteIdentite?: boolean
    inscriptionUniversitaire?: boolean
    recommandation?: boolean
    autresDocuments?: boolean
  }

  export type StageRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "status" | "type" | "departement" | "dateDebut" | "dateFin" | "motivation" | "competences" | "experience" | "universite" | "domaineEtude" | "anneeEtude" | "code_suivi" | "photo" | "candidate2Email" | "candidate2Photo" | "requiresSecondCandidateValidation" | "secondCandidateValidated" | "secondCandidateUserId" | "secondCandidateValidationToken" | "secondCandidateValidationExpiresAt" | "stagiaireId" | "cv" | "lettreMotivation" | "carteIdentite" | "inscriptionUniversitaire" | "recommandation" | "autresDocuments", ExtArgs["result"]["stageRequest"]>
  export type StageRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StageRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StageRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StageRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StageRequest"
    objects: {
      stagiaire: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      status: string
      type: string
      departement: string
      dateDebut: Date
      dateFin: Date
      motivation: string
      competences: string
      experience: string
      universite: string
      domaineEtude: string
      anneeEtude: string
      code_suivi: string | null
      photo: string | null
      candidate2Email: string | null
      candidate2Photo: string | null
      requiresSecondCandidateValidation: boolean
      secondCandidateValidated: boolean
      secondCandidateUserId: string | null
      secondCandidateValidationToken: string | null
      secondCandidateValidationExpiresAt: Date | null
      stagiaireId: string
      cv: string | null
      lettreMotivation: string | null
      carteIdentite: string | null
      inscriptionUniversitaire: string | null
      recommandation: string | null
      autresDocuments: Prisma.JsonValue | null
    }, ExtArgs["result"]["stageRequest"]>
    composites: {}
  }

  type StageRequestGetPayload<S extends boolean | null | undefined | StageRequestDefaultArgs> = $Result.GetResult<Prisma.$StageRequestPayload, S>

  type StageRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StageRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StageRequestCountAggregateInputType | true
    }

  export interface StageRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StageRequest'], meta: { name: 'StageRequest' } }
    /**
     * Find zero or one StageRequest that matches the filter.
     * @param {StageRequestFindUniqueArgs} args - Arguments to find a StageRequest
     * @example
     * // Get one StageRequest
     * const stageRequest = await prisma.stageRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StageRequestFindUniqueArgs>(args: SelectSubset<T, StageRequestFindUniqueArgs<ExtArgs>>): Prisma__StageRequestClient<$Result.GetResult<Prisma.$StageRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StageRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StageRequestFindUniqueOrThrowArgs} args - Arguments to find a StageRequest
     * @example
     * // Get one StageRequest
     * const stageRequest = await prisma.stageRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StageRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, StageRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StageRequestClient<$Result.GetResult<Prisma.$StageRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StageRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageRequestFindFirstArgs} args - Arguments to find a StageRequest
     * @example
     * // Get one StageRequest
     * const stageRequest = await prisma.stageRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StageRequestFindFirstArgs>(args?: SelectSubset<T, StageRequestFindFirstArgs<ExtArgs>>): Prisma__StageRequestClient<$Result.GetResult<Prisma.$StageRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StageRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageRequestFindFirstOrThrowArgs} args - Arguments to find a StageRequest
     * @example
     * // Get one StageRequest
     * const stageRequest = await prisma.stageRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StageRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, StageRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__StageRequestClient<$Result.GetResult<Prisma.$StageRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StageRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StageRequests
     * const stageRequests = await prisma.stageRequest.findMany()
     * 
     * // Get first 10 StageRequests
     * const stageRequests = await prisma.stageRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stageRequestWithIdOnly = await prisma.stageRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StageRequestFindManyArgs>(args?: SelectSubset<T, StageRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StageRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StageRequest.
     * @param {StageRequestCreateArgs} args - Arguments to create a StageRequest.
     * @example
     * // Create one StageRequest
     * const StageRequest = await prisma.stageRequest.create({
     *   data: {
     *     // ... data to create a StageRequest
     *   }
     * })
     * 
     */
    create<T extends StageRequestCreateArgs>(args: SelectSubset<T, StageRequestCreateArgs<ExtArgs>>): Prisma__StageRequestClient<$Result.GetResult<Prisma.$StageRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StageRequests.
     * @param {StageRequestCreateManyArgs} args - Arguments to create many StageRequests.
     * @example
     * // Create many StageRequests
     * const stageRequest = await prisma.stageRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StageRequestCreateManyArgs>(args?: SelectSubset<T, StageRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StageRequests and returns the data saved in the database.
     * @param {StageRequestCreateManyAndReturnArgs} args - Arguments to create many StageRequests.
     * @example
     * // Create many StageRequests
     * const stageRequest = await prisma.stageRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StageRequests and only return the `id`
     * const stageRequestWithIdOnly = await prisma.stageRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StageRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, StageRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StageRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StageRequest.
     * @param {StageRequestDeleteArgs} args - Arguments to delete one StageRequest.
     * @example
     * // Delete one StageRequest
     * const StageRequest = await prisma.stageRequest.delete({
     *   where: {
     *     // ... filter to delete one StageRequest
     *   }
     * })
     * 
     */
    delete<T extends StageRequestDeleteArgs>(args: SelectSubset<T, StageRequestDeleteArgs<ExtArgs>>): Prisma__StageRequestClient<$Result.GetResult<Prisma.$StageRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StageRequest.
     * @param {StageRequestUpdateArgs} args - Arguments to update one StageRequest.
     * @example
     * // Update one StageRequest
     * const stageRequest = await prisma.stageRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StageRequestUpdateArgs>(args: SelectSubset<T, StageRequestUpdateArgs<ExtArgs>>): Prisma__StageRequestClient<$Result.GetResult<Prisma.$StageRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StageRequests.
     * @param {StageRequestDeleteManyArgs} args - Arguments to filter StageRequests to delete.
     * @example
     * // Delete a few StageRequests
     * const { count } = await prisma.stageRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StageRequestDeleteManyArgs>(args?: SelectSubset<T, StageRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StageRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StageRequests
     * const stageRequest = await prisma.stageRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StageRequestUpdateManyArgs>(args: SelectSubset<T, StageRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StageRequests and returns the data updated in the database.
     * @param {StageRequestUpdateManyAndReturnArgs} args - Arguments to update many StageRequests.
     * @example
     * // Update many StageRequests
     * const stageRequest = await prisma.stageRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StageRequests and only return the `id`
     * const stageRequestWithIdOnly = await prisma.stageRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StageRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, StageRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StageRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StageRequest.
     * @param {StageRequestUpsertArgs} args - Arguments to update or create a StageRequest.
     * @example
     * // Update or create a StageRequest
     * const stageRequest = await prisma.stageRequest.upsert({
     *   create: {
     *     // ... data to create a StageRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StageRequest we want to update
     *   }
     * })
     */
    upsert<T extends StageRequestUpsertArgs>(args: SelectSubset<T, StageRequestUpsertArgs<ExtArgs>>): Prisma__StageRequestClient<$Result.GetResult<Prisma.$StageRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StageRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageRequestCountArgs} args - Arguments to filter StageRequests to count.
     * @example
     * // Count the number of StageRequests
     * const count = await prisma.stageRequest.count({
     *   where: {
     *     // ... the filter for the StageRequests we want to count
     *   }
     * })
    **/
    count<T extends StageRequestCountArgs>(
      args?: Subset<T, StageRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StageRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StageRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StageRequestAggregateArgs>(args: Subset<T, StageRequestAggregateArgs>): Prisma.PrismaPromise<GetStageRequestAggregateType<T>>

    /**
     * Group by StageRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StageRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StageRequestGroupByArgs['orderBy'] }
        : { orderBy?: StageRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StageRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStageRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StageRequest model
   */
  readonly fields: StageRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StageRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StageRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stagiaire<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StageRequest model
   */
  interface StageRequestFieldRefs {
    readonly id: FieldRef<"StageRequest", 'String'>
    readonly createdAt: FieldRef<"StageRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"StageRequest", 'DateTime'>
    readonly status: FieldRef<"StageRequest", 'String'>
    readonly type: FieldRef<"StageRequest", 'String'>
    readonly departement: FieldRef<"StageRequest", 'String'>
    readonly dateDebut: FieldRef<"StageRequest", 'DateTime'>
    readonly dateFin: FieldRef<"StageRequest", 'DateTime'>
    readonly motivation: FieldRef<"StageRequest", 'String'>
    readonly competences: FieldRef<"StageRequest", 'String'>
    readonly experience: FieldRef<"StageRequest", 'String'>
    readonly universite: FieldRef<"StageRequest", 'String'>
    readonly domaineEtude: FieldRef<"StageRequest", 'String'>
    readonly anneeEtude: FieldRef<"StageRequest", 'String'>
    readonly code_suivi: FieldRef<"StageRequest", 'String'>
    readonly photo: FieldRef<"StageRequest", 'String'>
    readonly candidate2Email: FieldRef<"StageRequest", 'String'>
    readonly candidate2Photo: FieldRef<"StageRequest", 'String'>
    readonly requiresSecondCandidateValidation: FieldRef<"StageRequest", 'Boolean'>
    readonly secondCandidateValidated: FieldRef<"StageRequest", 'Boolean'>
    readonly secondCandidateUserId: FieldRef<"StageRequest", 'String'>
    readonly secondCandidateValidationToken: FieldRef<"StageRequest", 'String'>
    readonly secondCandidateValidationExpiresAt: FieldRef<"StageRequest", 'DateTime'>
    readonly stagiaireId: FieldRef<"StageRequest", 'String'>
    readonly cv: FieldRef<"StageRequest", 'String'>
    readonly lettreMotivation: FieldRef<"StageRequest", 'String'>
    readonly carteIdentite: FieldRef<"StageRequest", 'String'>
    readonly inscriptionUniversitaire: FieldRef<"StageRequest", 'String'>
    readonly recommandation: FieldRef<"StageRequest", 'String'>
    readonly autresDocuments: FieldRef<"StageRequest", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * StageRequest findUnique
   */
  export type StageRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageRequest
     */
    select?: StageRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageRequest
     */
    omit?: StageRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageRequestInclude<ExtArgs> | null
    /**
     * Filter, which StageRequest to fetch.
     */
    where: StageRequestWhereUniqueInput
  }

  /**
   * StageRequest findUniqueOrThrow
   */
  export type StageRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageRequest
     */
    select?: StageRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageRequest
     */
    omit?: StageRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageRequestInclude<ExtArgs> | null
    /**
     * Filter, which StageRequest to fetch.
     */
    where: StageRequestWhereUniqueInput
  }

  /**
   * StageRequest findFirst
   */
  export type StageRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageRequest
     */
    select?: StageRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageRequest
     */
    omit?: StageRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageRequestInclude<ExtArgs> | null
    /**
     * Filter, which StageRequest to fetch.
     */
    where?: StageRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StageRequests to fetch.
     */
    orderBy?: StageRequestOrderByWithRelationInput | StageRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StageRequests.
     */
    cursor?: StageRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StageRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StageRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StageRequests.
     */
    distinct?: StageRequestScalarFieldEnum | StageRequestScalarFieldEnum[]
  }

  /**
   * StageRequest findFirstOrThrow
   */
  export type StageRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageRequest
     */
    select?: StageRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageRequest
     */
    omit?: StageRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageRequestInclude<ExtArgs> | null
    /**
     * Filter, which StageRequest to fetch.
     */
    where?: StageRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StageRequests to fetch.
     */
    orderBy?: StageRequestOrderByWithRelationInput | StageRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StageRequests.
     */
    cursor?: StageRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StageRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StageRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StageRequests.
     */
    distinct?: StageRequestScalarFieldEnum | StageRequestScalarFieldEnum[]
  }

  /**
   * StageRequest findMany
   */
  export type StageRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageRequest
     */
    select?: StageRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageRequest
     */
    omit?: StageRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageRequestInclude<ExtArgs> | null
    /**
     * Filter, which StageRequests to fetch.
     */
    where?: StageRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StageRequests to fetch.
     */
    orderBy?: StageRequestOrderByWithRelationInput | StageRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StageRequests.
     */
    cursor?: StageRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StageRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StageRequests.
     */
    skip?: number
    distinct?: StageRequestScalarFieldEnum | StageRequestScalarFieldEnum[]
  }

  /**
   * StageRequest create
   */
  export type StageRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageRequest
     */
    select?: StageRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageRequest
     */
    omit?: StageRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a StageRequest.
     */
    data: XOR<StageRequestCreateInput, StageRequestUncheckedCreateInput>
  }

  /**
   * StageRequest createMany
   */
  export type StageRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StageRequests.
     */
    data: StageRequestCreateManyInput | StageRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StageRequest createManyAndReturn
   */
  export type StageRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageRequest
     */
    select?: StageRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StageRequest
     */
    omit?: StageRequestOmit<ExtArgs> | null
    /**
     * The data used to create many StageRequests.
     */
    data: StageRequestCreateManyInput | StageRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StageRequest update
   */
  export type StageRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageRequest
     */
    select?: StageRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageRequest
     */
    omit?: StageRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a StageRequest.
     */
    data: XOR<StageRequestUpdateInput, StageRequestUncheckedUpdateInput>
    /**
     * Choose, which StageRequest to update.
     */
    where: StageRequestWhereUniqueInput
  }

  /**
   * StageRequest updateMany
   */
  export type StageRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StageRequests.
     */
    data: XOR<StageRequestUpdateManyMutationInput, StageRequestUncheckedUpdateManyInput>
    /**
     * Filter which StageRequests to update
     */
    where?: StageRequestWhereInput
    /**
     * Limit how many StageRequests to update.
     */
    limit?: number
  }

  /**
   * StageRequest updateManyAndReturn
   */
  export type StageRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageRequest
     */
    select?: StageRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StageRequest
     */
    omit?: StageRequestOmit<ExtArgs> | null
    /**
     * The data used to update StageRequests.
     */
    data: XOR<StageRequestUpdateManyMutationInput, StageRequestUncheckedUpdateManyInput>
    /**
     * Filter which StageRequests to update
     */
    where?: StageRequestWhereInput
    /**
     * Limit how many StageRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StageRequest upsert
   */
  export type StageRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageRequest
     */
    select?: StageRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageRequest
     */
    omit?: StageRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the StageRequest to update in case it exists.
     */
    where: StageRequestWhereUniqueInput
    /**
     * In case the StageRequest found by the `where` argument doesn't exist, create a new StageRequest with this data.
     */
    create: XOR<StageRequestCreateInput, StageRequestUncheckedCreateInput>
    /**
     * In case the StageRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StageRequestUpdateInput, StageRequestUncheckedUpdateInput>
  }

  /**
   * StageRequest delete
   */
  export type StageRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageRequest
     */
    select?: StageRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageRequest
     */
    omit?: StageRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageRequestInclude<ExtArgs> | null
    /**
     * Filter which StageRequest to delete.
     */
    where: StageRequestWhereUniqueInput
  }

  /**
   * StageRequest deleteMany
   */
  export type StageRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StageRequests to delete
     */
    where?: StageRequestWhereInput
    /**
     * Limit how many StageRequests to delete.
     */
    limit?: number
  }

  /**
   * StageRequest without action
   */
  export type StageRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageRequest
     */
    select?: StageRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageRequest
     */
    omit?: StageRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageRequestInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    message: string | null
    userId: string | null
    role: $Enums.UserRole | null
    read: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    message: string | null
    userId: string | null
    role: $Enums.UserRole | null
    read: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    type: number
    title: number
    message: number
    userId: number
    role: number
    read: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    message?: true
    userId?: true
    role?: true
    read?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    message?: true
    userId?: true
    role?: true
    read?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    message?: true
    userId?: true
    role?: true
    read?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    type: string
    title: string
    message: string
    userId: string | null
    role: $Enums.UserRole | null
    read: boolean
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    userId?: boolean
    role?: boolean
    read?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Notification$userArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    userId?: boolean
    role?: boolean
    read?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Notification$userArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    userId?: boolean
    role?: boolean
    read?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Notification$userArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    userId?: boolean
    role?: boolean
    read?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "title" | "message" | "userId" | "role" | "read" | "createdAt" | "updatedAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Notification$userArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Notification$userArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Notification$userArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      title: string
      message: string
      userId: string | null
      role: $Enums.UserRole | null
      read: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Notification$userArgs<ExtArgs> = {}>(args?: Subset<T, Notification$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly role: FieldRef<"Notification", 'UserRole'>
    readonly read: FieldRef<"Notification", 'Boolean'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification.user
   */
  export type Notification$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Evaluation
   */

  export type AggregateEvaluation = {
    _count: EvaluationCountAggregateOutputType | null
    _min: EvaluationMinAggregateOutputType | null
    _max: EvaluationMaxAggregateOutputType | null
  }

  export type EvaluationMinAggregateOutputType = {
    id: string | null
    stagiaireId: string | null
    tuteurId: string | null
    commentaire: string | null
    createdAt: Date | null
  }

  export type EvaluationMaxAggregateOutputType = {
    id: string | null
    stagiaireId: string | null
    tuteurId: string | null
    commentaire: string | null
    createdAt: Date | null
  }

  export type EvaluationCountAggregateOutputType = {
    id: number
    stagiaireId: number
    tuteurId: number
    criteres: number
    commentaire: number
    createdAt: number
    _all: number
  }


  export type EvaluationMinAggregateInputType = {
    id?: true
    stagiaireId?: true
    tuteurId?: true
    commentaire?: true
    createdAt?: true
  }

  export type EvaluationMaxAggregateInputType = {
    id?: true
    stagiaireId?: true
    tuteurId?: true
    commentaire?: true
    createdAt?: true
  }

  export type EvaluationCountAggregateInputType = {
    id?: true
    stagiaireId?: true
    tuteurId?: true
    criteres?: true
    commentaire?: true
    createdAt?: true
    _all?: true
  }

  export type EvaluationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Evaluation to aggregate.
     */
    where?: EvaluationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluations to fetch.
     */
    orderBy?: EvaluationOrderByWithRelationInput | EvaluationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EvaluationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Evaluations
    **/
    _count?: true | EvaluationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EvaluationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EvaluationMaxAggregateInputType
  }

  export type GetEvaluationAggregateType<T extends EvaluationAggregateArgs> = {
        [P in keyof T & keyof AggregateEvaluation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvaluation[P]>
      : GetScalarType<T[P], AggregateEvaluation[P]>
  }




  export type EvaluationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EvaluationWhereInput
    orderBy?: EvaluationOrderByWithAggregationInput | EvaluationOrderByWithAggregationInput[]
    by: EvaluationScalarFieldEnum[] | EvaluationScalarFieldEnum
    having?: EvaluationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EvaluationCountAggregateInputType | true
    _min?: EvaluationMinAggregateInputType
    _max?: EvaluationMaxAggregateInputType
  }

  export type EvaluationGroupByOutputType = {
    id: string
    stagiaireId: string
    tuteurId: string
    criteres: JsonValue
    commentaire: string | null
    createdAt: Date
    _count: EvaluationCountAggregateOutputType | null
    _min: EvaluationMinAggregateOutputType | null
    _max: EvaluationMaxAggregateOutputType | null
  }

  type GetEvaluationGroupByPayload<T extends EvaluationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EvaluationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EvaluationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EvaluationGroupByOutputType[P]>
            : GetScalarType<T[P], EvaluationGroupByOutputType[P]>
        }
      >
    >


  export type EvaluationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    tuteurId?: boolean
    criteres?: boolean
    commentaire?: boolean
    createdAt?: boolean
    stagiaire?: boolean | UserDefaultArgs<ExtArgs>
    tuteur?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["evaluation"]>

  export type EvaluationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    tuteurId?: boolean
    criteres?: boolean
    commentaire?: boolean
    createdAt?: boolean
    stagiaire?: boolean | UserDefaultArgs<ExtArgs>
    tuteur?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["evaluation"]>

  export type EvaluationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    tuteurId?: boolean
    criteres?: boolean
    commentaire?: boolean
    createdAt?: boolean
    stagiaire?: boolean | UserDefaultArgs<ExtArgs>
    tuteur?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["evaluation"]>

  export type EvaluationSelectScalar = {
    id?: boolean
    stagiaireId?: boolean
    tuteurId?: boolean
    criteres?: boolean
    commentaire?: boolean
    createdAt?: boolean
  }

  export type EvaluationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "stagiaireId" | "tuteurId" | "criteres" | "commentaire" | "createdAt", ExtArgs["result"]["evaluation"]>
  export type EvaluationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | UserDefaultArgs<ExtArgs>
    tuteur?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EvaluationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | UserDefaultArgs<ExtArgs>
    tuteur?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EvaluationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | UserDefaultArgs<ExtArgs>
    tuteur?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EvaluationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Evaluation"
    objects: {
      stagiaire: Prisma.$UserPayload<ExtArgs>
      tuteur: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stagiaireId: string
      tuteurId: string
      criteres: Prisma.JsonValue
      commentaire: string | null
      createdAt: Date
    }, ExtArgs["result"]["evaluation"]>
    composites: {}
  }

  type EvaluationGetPayload<S extends boolean | null | undefined | EvaluationDefaultArgs> = $Result.GetResult<Prisma.$EvaluationPayload, S>

  type EvaluationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EvaluationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EvaluationCountAggregateInputType | true
    }

  export interface EvaluationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Evaluation'], meta: { name: 'Evaluation' } }
    /**
     * Find zero or one Evaluation that matches the filter.
     * @param {EvaluationFindUniqueArgs} args - Arguments to find a Evaluation
     * @example
     * // Get one Evaluation
     * const evaluation = await prisma.evaluation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EvaluationFindUniqueArgs>(args: SelectSubset<T, EvaluationFindUniqueArgs<ExtArgs>>): Prisma__EvaluationClient<$Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Evaluation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EvaluationFindUniqueOrThrowArgs} args - Arguments to find a Evaluation
     * @example
     * // Get one Evaluation
     * const evaluation = await prisma.evaluation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EvaluationFindUniqueOrThrowArgs>(args: SelectSubset<T, EvaluationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EvaluationClient<$Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Evaluation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluationFindFirstArgs} args - Arguments to find a Evaluation
     * @example
     * // Get one Evaluation
     * const evaluation = await prisma.evaluation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EvaluationFindFirstArgs>(args?: SelectSubset<T, EvaluationFindFirstArgs<ExtArgs>>): Prisma__EvaluationClient<$Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Evaluation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluationFindFirstOrThrowArgs} args - Arguments to find a Evaluation
     * @example
     * // Get one Evaluation
     * const evaluation = await prisma.evaluation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EvaluationFindFirstOrThrowArgs>(args?: SelectSubset<T, EvaluationFindFirstOrThrowArgs<ExtArgs>>): Prisma__EvaluationClient<$Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Evaluations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Evaluations
     * const evaluations = await prisma.evaluation.findMany()
     * 
     * // Get first 10 Evaluations
     * const evaluations = await prisma.evaluation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const evaluationWithIdOnly = await prisma.evaluation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EvaluationFindManyArgs>(args?: SelectSubset<T, EvaluationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Evaluation.
     * @param {EvaluationCreateArgs} args - Arguments to create a Evaluation.
     * @example
     * // Create one Evaluation
     * const Evaluation = await prisma.evaluation.create({
     *   data: {
     *     // ... data to create a Evaluation
     *   }
     * })
     * 
     */
    create<T extends EvaluationCreateArgs>(args: SelectSubset<T, EvaluationCreateArgs<ExtArgs>>): Prisma__EvaluationClient<$Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Evaluations.
     * @param {EvaluationCreateManyArgs} args - Arguments to create many Evaluations.
     * @example
     * // Create many Evaluations
     * const evaluation = await prisma.evaluation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EvaluationCreateManyArgs>(args?: SelectSubset<T, EvaluationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Evaluations and returns the data saved in the database.
     * @param {EvaluationCreateManyAndReturnArgs} args - Arguments to create many Evaluations.
     * @example
     * // Create many Evaluations
     * const evaluation = await prisma.evaluation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Evaluations and only return the `id`
     * const evaluationWithIdOnly = await prisma.evaluation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EvaluationCreateManyAndReturnArgs>(args?: SelectSubset<T, EvaluationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Evaluation.
     * @param {EvaluationDeleteArgs} args - Arguments to delete one Evaluation.
     * @example
     * // Delete one Evaluation
     * const Evaluation = await prisma.evaluation.delete({
     *   where: {
     *     // ... filter to delete one Evaluation
     *   }
     * })
     * 
     */
    delete<T extends EvaluationDeleteArgs>(args: SelectSubset<T, EvaluationDeleteArgs<ExtArgs>>): Prisma__EvaluationClient<$Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Evaluation.
     * @param {EvaluationUpdateArgs} args - Arguments to update one Evaluation.
     * @example
     * // Update one Evaluation
     * const evaluation = await prisma.evaluation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EvaluationUpdateArgs>(args: SelectSubset<T, EvaluationUpdateArgs<ExtArgs>>): Prisma__EvaluationClient<$Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Evaluations.
     * @param {EvaluationDeleteManyArgs} args - Arguments to filter Evaluations to delete.
     * @example
     * // Delete a few Evaluations
     * const { count } = await prisma.evaluation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EvaluationDeleteManyArgs>(args?: SelectSubset<T, EvaluationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Evaluations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Evaluations
     * const evaluation = await prisma.evaluation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EvaluationUpdateManyArgs>(args: SelectSubset<T, EvaluationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Evaluations and returns the data updated in the database.
     * @param {EvaluationUpdateManyAndReturnArgs} args - Arguments to update many Evaluations.
     * @example
     * // Update many Evaluations
     * const evaluation = await prisma.evaluation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Evaluations and only return the `id`
     * const evaluationWithIdOnly = await prisma.evaluation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EvaluationUpdateManyAndReturnArgs>(args: SelectSubset<T, EvaluationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Evaluation.
     * @param {EvaluationUpsertArgs} args - Arguments to update or create a Evaluation.
     * @example
     * // Update or create a Evaluation
     * const evaluation = await prisma.evaluation.upsert({
     *   create: {
     *     // ... data to create a Evaluation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Evaluation we want to update
     *   }
     * })
     */
    upsert<T extends EvaluationUpsertArgs>(args: SelectSubset<T, EvaluationUpsertArgs<ExtArgs>>): Prisma__EvaluationClient<$Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Evaluations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluationCountArgs} args - Arguments to filter Evaluations to count.
     * @example
     * // Count the number of Evaluations
     * const count = await prisma.evaluation.count({
     *   where: {
     *     // ... the filter for the Evaluations we want to count
     *   }
     * })
    **/
    count<T extends EvaluationCountArgs>(
      args?: Subset<T, EvaluationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EvaluationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Evaluation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EvaluationAggregateArgs>(args: Subset<T, EvaluationAggregateArgs>): Prisma.PrismaPromise<GetEvaluationAggregateType<T>>

    /**
     * Group by Evaluation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EvaluationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EvaluationGroupByArgs['orderBy'] }
        : { orderBy?: EvaluationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EvaluationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEvaluationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Evaluation model
   */
  readonly fields: EvaluationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Evaluation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EvaluationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stagiaire<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tuteur<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Evaluation model
   */
  interface EvaluationFieldRefs {
    readonly id: FieldRef<"Evaluation", 'String'>
    readonly stagiaireId: FieldRef<"Evaluation", 'String'>
    readonly tuteurId: FieldRef<"Evaluation", 'String'>
    readonly criteres: FieldRef<"Evaluation", 'Json'>
    readonly commentaire: FieldRef<"Evaluation", 'String'>
    readonly createdAt: FieldRef<"Evaluation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Evaluation findUnique
   */
  export type EvaluationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluation
     */
    select?: EvaluationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evaluation
     */
    omit?: EvaluationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluationInclude<ExtArgs> | null
    /**
     * Filter, which Evaluation to fetch.
     */
    where: EvaluationWhereUniqueInput
  }

  /**
   * Evaluation findUniqueOrThrow
   */
  export type EvaluationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluation
     */
    select?: EvaluationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evaluation
     */
    omit?: EvaluationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluationInclude<ExtArgs> | null
    /**
     * Filter, which Evaluation to fetch.
     */
    where: EvaluationWhereUniqueInput
  }

  /**
   * Evaluation findFirst
   */
  export type EvaluationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluation
     */
    select?: EvaluationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evaluation
     */
    omit?: EvaluationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluationInclude<ExtArgs> | null
    /**
     * Filter, which Evaluation to fetch.
     */
    where?: EvaluationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluations to fetch.
     */
    orderBy?: EvaluationOrderByWithRelationInput | EvaluationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Evaluations.
     */
    cursor?: EvaluationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Evaluations.
     */
    distinct?: EvaluationScalarFieldEnum | EvaluationScalarFieldEnum[]
  }

  /**
   * Evaluation findFirstOrThrow
   */
  export type EvaluationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluation
     */
    select?: EvaluationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evaluation
     */
    omit?: EvaluationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluationInclude<ExtArgs> | null
    /**
     * Filter, which Evaluation to fetch.
     */
    where?: EvaluationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluations to fetch.
     */
    orderBy?: EvaluationOrderByWithRelationInput | EvaluationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Evaluations.
     */
    cursor?: EvaluationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Evaluations.
     */
    distinct?: EvaluationScalarFieldEnum | EvaluationScalarFieldEnum[]
  }

  /**
   * Evaluation findMany
   */
  export type EvaluationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluation
     */
    select?: EvaluationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evaluation
     */
    omit?: EvaluationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluationInclude<ExtArgs> | null
    /**
     * Filter, which Evaluations to fetch.
     */
    where?: EvaluationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluations to fetch.
     */
    orderBy?: EvaluationOrderByWithRelationInput | EvaluationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Evaluations.
     */
    cursor?: EvaluationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluations.
     */
    skip?: number
    distinct?: EvaluationScalarFieldEnum | EvaluationScalarFieldEnum[]
  }

  /**
   * Evaluation create
   */
  export type EvaluationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluation
     */
    select?: EvaluationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evaluation
     */
    omit?: EvaluationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluationInclude<ExtArgs> | null
    /**
     * The data needed to create a Evaluation.
     */
    data: XOR<EvaluationCreateInput, EvaluationUncheckedCreateInput>
  }

  /**
   * Evaluation createMany
   */
  export type EvaluationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Evaluations.
     */
    data: EvaluationCreateManyInput | EvaluationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Evaluation createManyAndReturn
   */
  export type EvaluationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluation
     */
    select?: EvaluationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Evaluation
     */
    omit?: EvaluationOmit<ExtArgs> | null
    /**
     * The data used to create many Evaluations.
     */
    data: EvaluationCreateManyInput | EvaluationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Evaluation update
   */
  export type EvaluationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluation
     */
    select?: EvaluationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evaluation
     */
    omit?: EvaluationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluationInclude<ExtArgs> | null
    /**
     * The data needed to update a Evaluation.
     */
    data: XOR<EvaluationUpdateInput, EvaluationUncheckedUpdateInput>
    /**
     * Choose, which Evaluation to update.
     */
    where: EvaluationWhereUniqueInput
  }

  /**
   * Evaluation updateMany
   */
  export type EvaluationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Evaluations.
     */
    data: XOR<EvaluationUpdateManyMutationInput, EvaluationUncheckedUpdateManyInput>
    /**
     * Filter which Evaluations to update
     */
    where?: EvaluationWhereInput
    /**
     * Limit how many Evaluations to update.
     */
    limit?: number
  }

  /**
   * Evaluation updateManyAndReturn
   */
  export type EvaluationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluation
     */
    select?: EvaluationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Evaluation
     */
    omit?: EvaluationOmit<ExtArgs> | null
    /**
     * The data used to update Evaluations.
     */
    data: XOR<EvaluationUpdateManyMutationInput, EvaluationUncheckedUpdateManyInput>
    /**
     * Filter which Evaluations to update
     */
    where?: EvaluationWhereInput
    /**
     * Limit how many Evaluations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Evaluation upsert
   */
  export type EvaluationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluation
     */
    select?: EvaluationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evaluation
     */
    omit?: EvaluationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluationInclude<ExtArgs> | null
    /**
     * The filter to search for the Evaluation to update in case it exists.
     */
    where: EvaluationWhereUniqueInput
    /**
     * In case the Evaluation found by the `where` argument doesn't exist, create a new Evaluation with this data.
     */
    create: XOR<EvaluationCreateInput, EvaluationUncheckedCreateInput>
    /**
     * In case the Evaluation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EvaluationUpdateInput, EvaluationUncheckedUpdateInput>
  }

  /**
   * Evaluation delete
   */
  export type EvaluationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluation
     */
    select?: EvaluationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evaluation
     */
    omit?: EvaluationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluationInclude<ExtArgs> | null
    /**
     * Filter which Evaluation to delete.
     */
    where: EvaluationWhereUniqueInput
  }

  /**
   * Evaluation deleteMany
   */
  export type EvaluationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Evaluations to delete
     */
    where?: EvaluationWhereInput
    /**
     * Limit how many Evaluations to delete.
     */
    limit?: number
  }

  /**
   * Evaluation without action
   */
  export type EvaluationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluation
     */
    select?: EvaluationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evaluation
     */
    omit?: EvaluationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluationInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    name: string | null
    path: string | null
    uploadedAt: Date | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    name: string | null
    path: string | null
    uploadedAt: Date | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    name: number
    path: number
    uploadedAt: number
    _all: number
  }


  export type DocumentMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    name?: true
    path?: true
    uploadedAt?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    name?: true
    path?: true
    uploadedAt?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    name?: true
    path?: true
    uploadedAt?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    userId: string
    type: string
    name: string
    path: string
    uploadedAt: Date
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    name?: boolean
    path?: boolean
    uploadedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    name?: boolean
    path?: boolean
    uploadedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    name?: boolean
    path?: boolean
    uploadedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    name?: boolean
    path?: boolean
    uploadedAt?: boolean
  }

  export type DocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "name" | "path" | "uploadedAt", ExtArgs["result"]["document"]>
  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      name: string
      path: string
      uploadedAt: Date
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents and returns the data updated in the database.
     * @param {DocumentUpdateManyAndReturnArgs} args - Arguments to update many Documents.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly userId: FieldRef<"Document", 'String'>
    readonly type: FieldRef<"Document", 'String'>
    readonly name: FieldRef<"Document", 'String'>
    readonly path: FieldRef<"Document", 'String'>
    readonly uploadedAt: FieldRef<"Document", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
  }

  /**
   * Document updateManyAndReturn
   */
  export type DocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to delete.
     */
    limit?: number
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model Service
   */

  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceAvgAggregateOutputType = {
    id: number | null
    structureId: number | null
  }

  export type ServiceSumAggregateOutputType = {
    id: number | null
    structureId: number | null
  }

  export type ServiceMinAggregateOutputType = {
    id: number | null
    nomService: string | null
    description: string | null
    structureId: number | null
    isDeleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceMaxAggregateOutputType = {
    id: number | null
    nomService: string | null
    description: string | null
    structureId: number | null
    isDeleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceCountAggregateOutputType = {
    id: number
    nomService: number
    description: number
    structureId: number
    isDeleted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServiceAvgAggregateInputType = {
    id?: true
    structureId?: true
  }

  export type ServiceSumAggregateInputType = {
    id?: true
    structureId?: true
  }

  export type ServiceMinAggregateInputType = {
    id?: true
    nomService?: true
    description?: true
    structureId?: true
    isDeleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceMaxAggregateInputType = {
    id?: true
    nomService?: true
    description?: true
    structureId?: true
    isDeleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceCountAggregateInputType = {
    id?: true
    nomService?: true
    description?: true
    structureId?: true
    isDeleted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Service to aggregate.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type ServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithAggregationInput | ServiceOrderByWithAggregationInput[]
    by: ServiceScalarFieldEnum[] | ServiceScalarFieldEnum
    having?: ServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _avg?: ServiceAvgAggregateInputType
    _sum?: ServiceSumAggregateInputType
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }

  export type ServiceGroupByOutputType = {
    id: number
    nomService: string
    description: string | null
    structureId: number
    isDeleted: boolean
    createdAt: Date
    updatedAt: Date
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends ServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type ServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomService?: boolean
    description?: boolean
    structureId?: boolean
    isDeleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    structure?: boolean | StructureDefaultArgs<ExtArgs>
    tuteurs?: boolean | Service$tuteursArgs<ExtArgs>
    stagiaires?: boolean | Service$stagiairesArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomService?: boolean
    description?: boolean
    structureId?: boolean
    isDeleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    structure?: boolean | StructureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomService?: boolean
    description?: boolean
    structureId?: boolean
    isDeleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    structure?: boolean | StructureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectScalar = {
    id?: boolean
    nomService?: boolean
    description?: boolean
    structureId?: boolean
    isDeleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nomService" | "description" | "structureId" | "isDeleted" | "createdAt" | "updatedAt", ExtArgs["result"]["service"]>
  export type ServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    structure?: boolean | StructureDefaultArgs<ExtArgs>
    tuteurs?: boolean | Service$tuteursArgs<ExtArgs>
    stagiaires?: boolean | Service$stagiairesArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    structure?: boolean | StructureDefaultArgs<ExtArgs>
  }
  export type ServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    structure?: boolean | StructureDefaultArgs<ExtArgs>
  }

  export type $ServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Service"
    objects: {
      structure: Prisma.$StructurePayload<ExtArgs>
      tuteurs: Prisma.$TuteurPayload<ExtArgs>[]
      stagiaires: Prisma.$StagiairePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nomService: string
      description: string | null
      structureId: number
      isDeleted: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["service"]>
    composites: {}
  }

  type ServiceGetPayload<S extends boolean | null | undefined | ServiceDefaultArgs> = $Result.GetResult<Prisma.$ServicePayload, S>

  type ServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceCountAggregateInputType | true
    }

  export interface ServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Service'], meta: { name: 'Service' } }
    /**
     * Find zero or one Service that matches the filter.
     * @param {ServiceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceFindUniqueArgs>(args: SelectSubset<T, ServiceFindUniqueArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Service that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceFindFirstArgs>(args?: SelectSubset<T, ServiceFindFirstArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceWithIdOnly = await prisma.service.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceFindManyArgs>(args?: SelectSubset<T, ServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Service.
     * @param {ServiceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
     */
    create<T extends ServiceCreateArgs>(args: SelectSubset<T, ServiceCreateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Services.
     * @param {ServiceCreateManyArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceCreateManyArgs>(args?: SelectSubset<T, ServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Services and returns the data saved in the database.
     * @param {ServiceCreateManyAndReturnArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Service.
     * @param {ServiceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
     */
    delete<T extends ServiceDeleteArgs>(args: SelectSubset<T, ServiceDeleteArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Service.
     * @param {ServiceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceUpdateArgs>(args: SelectSubset<T, ServiceUpdateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Services.
     * @param {ServiceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceDeleteManyArgs>(args?: SelectSubset<T, ServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceUpdateManyArgs>(args: SelectSubset<T, ServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services and returns the data updated in the database.
     * @param {ServiceUpdateManyAndReturnArgs} args - Arguments to update many Services.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Service.
     * @param {ServiceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
     */
    upsert<T extends ServiceUpsertArgs>(args: SelectSubset<T, ServiceUpsertArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServiceCountArgs>(
      args?: Subset<T, ServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): Prisma.PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceGroupByArgs['orderBy'] }
        : { orderBy?: ServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Service model
   */
  readonly fields: ServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    structure<T extends StructureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StructureDefaultArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tuteurs<T extends Service$tuteursArgs<ExtArgs> = {}>(args?: Subset<T, Service$tuteursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stagiaires<T extends Service$stagiairesArgs<ExtArgs> = {}>(args?: Subset<T, Service$stagiairesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Service model
   */
  interface ServiceFieldRefs {
    readonly id: FieldRef<"Service", 'Int'>
    readonly nomService: FieldRef<"Service", 'String'>
    readonly description: FieldRef<"Service", 'String'>
    readonly structureId: FieldRef<"Service", 'Int'>
    readonly isDeleted: FieldRef<"Service", 'Boolean'>
    readonly createdAt: FieldRef<"Service", 'DateTime'>
    readonly updatedAt: FieldRef<"Service", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Service findUnique
   */
  export type ServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findUniqueOrThrow
   */
  export type ServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findFirst
   */
  export type ServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findFirstOrThrow
   */
  export type ServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findMany
   */
  export type ServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service create
   */
  export type ServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Service.
     */
    data: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
  }

  /**
   * Service createMany
   */
  export type ServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Service createManyAndReturn
   */
  export type ServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Service update
   */
  export type ServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Service.
     */
    data: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
    /**
     * Choose, which Service to update.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service updateMany
   */
  export type ServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
  }

  /**
   * Service updateManyAndReturn
   */
  export type ServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Service upsert
   */
  export type ServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Service to update in case it exists.
     */
    where: ServiceWhereUniqueInput
    /**
     * In case the Service found by the `where` argument doesn't exist, create a new Service with this data.
     */
    create: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
    /**
     * In case the Service was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
  }

  /**
   * Service delete
   */
  export type ServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter which Service to delete.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service deleteMany
   */
  export type ServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to delete
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to delete.
     */
    limit?: number
  }

  /**
   * Service.tuteurs
   */
  export type Service$tuteursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    where?: TuteurWhereInput
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    cursor?: TuteurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TuteurScalarFieldEnum | TuteurScalarFieldEnum[]
  }

  /**
   * Service.stagiaires
   */
  export type Service$stagiairesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    where?: StagiaireWhereInput
    orderBy?: StagiaireOrderByWithRelationInput | StagiaireOrderByWithRelationInput[]
    cursor?: StagiaireWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StagiaireScalarFieldEnum | StagiaireScalarFieldEnum[]
  }

  /**
   * Service without action
   */
  export type ServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    structureId: 'structureId',
    notifMessages: 'notifMessages',
    notifEvaluation: 'notifEvaluation',
    notifRapports: 'notifRapports'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    nom: 'nom',
    prenom: 'prenom',
    telephone: 'telephone',
    avatar: 'avatar',
    birthDate: 'birthDate',
    school: 'school',
    major: 'major'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const DPAFScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type DPAFScalarFieldEnum = (typeof DPAFScalarFieldEnum)[keyof typeof DPAFScalarFieldEnum]


  export const StructureScalarFieldEnum: {
    id: 'id',
    nomStructure: 'nomStructure',
    sigle: 'sigle',
    type: 'type',
    isDeleted: 'isDeleted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    parentId: 'parentId'
  };

  export type StructureScalarFieldEnum = (typeof StructureScalarFieldEnum)[keyof typeof StructureScalarFieldEnum]


  export const TuteurScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    structureId: 'structureId',
    serviceId: 'serviceId'
  };

  export type TuteurScalarFieldEnum = (typeof TuteurScalarFieldEnum)[keyof typeof TuteurScalarFieldEnum]


  export const StagiaireScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    structureAffecteeId: 'structureAffecteeId',
    serviceAffecteId: 'serviceAffecteId',
    tuteurId: 'tuteurId'
  };

  export type StagiaireScalarFieldEnum = (typeof StagiaireScalarFieldEnum)[keyof typeof StagiaireScalarFieldEnum]


  export const DemandeStageScalarFieldEnum: {
    id: 'id',
    stagiaireId: 'stagiaireId',
    structureCibleId: 'structureCibleId',
    statut: 'statut',
    dateDebut: 'dateDebut',
    dateFin: 'dateFin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    details: 'details'
  };

  export type DemandeStageScalarFieldEnum = (typeof DemandeStageScalarFieldEnum)[keyof typeof DemandeStageScalarFieldEnum]


  export const StageScalarFieldEnum: {
    id: 'id',
    demandeStageId: 'demandeStageId',
    tuteurId: 'tuteurId',
    structureId: 'structureId',
    stagiaireId: 'stagiaireId',
    dateDebut: 'dateDebut',
    dateFin: 'dateFin',
    statut: 'statut',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StageScalarFieldEnum = (typeof StageScalarFieldEnum)[keyof typeof StageScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    expediteurId: 'expediteurId',
    destinataireId: 'destinataireId',
    contenu: 'contenu',
    lu: 'lu',
    createdAt: 'createdAt'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const ThemeTuteurScalarFieldEnum: {
    id: 'id',
    tuteurId: 'tuteurId',
    titre: 'titre',
    description: 'description',
    disponible: 'disponible'
  };

  export type ThemeTuteurScalarFieldEnum = (typeof ThemeTuteurScalarFieldEnum)[keyof typeof ThemeTuteurScalarFieldEnum]


  export const ParametreSystemeScalarFieldEnum: {
    id: 'id',
    cle: 'cle',
    valeur: 'valeur'
  };

  export type ParametreSystemeScalarFieldEnum = (typeof ParametreSystemeScalarFieldEnum)[keyof typeof ParametreSystemeScalarFieldEnum]


  export const JournalActionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    cible: 'cible',
    timestamp: 'timestamp',
    demandeStageId: 'demandeStageId'
  };

  export type JournalActionScalarFieldEnum = (typeof JournalActionScalarFieldEnum)[keyof typeof JournalActionScalarFieldEnum]


  export const StageRequestScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status',
    type: 'type',
    departement: 'departement',
    dateDebut: 'dateDebut',
    dateFin: 'dateFin',
    motivation: 'motivation',
    competences: 'competences',
    experience: 'experience',
    universite: 'universite',
    domaineEtude: 'domaineEtude',
    anneeEtude: 'anneeEtude',
    code_suivi: 'code_suivi',
    photo: 'photo',
    candidate2Email: 'candidate2Email',
    candidate2Photo: 'candidate2Photo',
    requiresSecondCandidateValidation: 'requiresSecondCandidateValidation',
    secondCandidateValidated: 'secondCandidateValidated',
    secondCandidateUserId: 'secondCandidateUserId',
    secondCandidateValidationToken: 'secondCandidateValidationToken',
    secondCandidateValidationExpiresAt: 'secondCandidateValidationExpiresAt',
    stagiaireId: 'stagiaireId',
    cv: 'cv',
    lettreMotivation: 'lettreMotivation',
    carteIdentite: 'carteIdentite',
    inscriptionUniversitaire: 'inscriptionUniversitaire',
    recommandation: 'recommandation',
    autresDocuments: 'autresDocuments'
  };

  export type StageRequestScalarFieldEnum = (typeof StageRequestScalarFieldEnum)[keyof typeof StageRequestScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    message: 'message',
    userId: 'userId',
    role: 'role',
    read: 'read',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const EvaluationScalarFieldEnum: {
    id: 'id',
    stagiaireId: 'stagiaireId',
    tuteurId: 'tuteurId',
    criteres: 'criteres',
    commentaire: 'commentaire',
    createdAt: 'createdAt'
  };

  export type EvaluationScalarFieldEnum = (typeof EvaluationScalarFieldEnum)[keyof typeof EvaluationScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    name: 'name',
    path: 'path',
    uploadedAt: 'uploadedAt'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    id: 'id',
    nomService: 'nomService',
    description: 'description',
    structureId: 'structureId',
    isDeleted: 'isDeleted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'StatutDemande'
   */
  export type EnumStatutDemandeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutDemande'>
    


  /**
   * Reference to a field of type 'StatutDemande[]'
   */
  export type ListEnumStatutDemandeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutDemande[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'StatutStage'
   */
  export type EnumStatutStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutStage'>
    


  /**
   * Reference to a field of type 'StatutStage[]'
   */
  export type ListEnumStatutStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutStage[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: UuidFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    structureId?: IntNullableFilter<"User"> | number | null
    notifMessages?: BoolNullableFilter<"User"> | boolean | null
    notifEvaluation?: BoolNullableFilter<"User"> | boolean | null
    notifRapports?: BoolNullableFilter<"User"> | boolean | null
    demandesStage?: StageRequestListRelationFilter
    dpaf?: XOR<DPAFNullableScalarRelationFilter, DPAFWhereInput> | null
    journalActions?: JournalActionListRelationFilter
    messagesRecus?: MessageListRelationFilter
    messagesSent?: MessageListRelationFilter
    notifications?: NotificationListRelationFilter
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    stagiaire?: XOR<StagiaireNullableScalarRelationFilter, StagiaireWhereInput> | null
    structure?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    tuteur?: XOR<TuteurNullableScalarRelationFilter, TuteurWhereInput> | null
    evaluationsAsTuteur?: EvaluationListRelationFilter
    evaluationsAsStagiaire?: EvaluationListRelationFilter
    documents?: DocumentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    structureId?: SortOrderInput | SortOrder
    notifMessages?: SortOrderInput | SortOrder
    notifEvaluation?: SortOrderInput | SortOrder
    notifRapports?: SortOrderInput | SortOrder
    demandesStage?: StageRequestOrderByRelationAggregateInput
    dpaf?: DPAFOrderByWithRelationInput
    journalActions?: JournalActionOrderByRelationAggregateInput
    messagesRecus?: MessageOrderByRelationAggregateInput
    messagesSent?: MessageOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    profile?: ProfileOrderByWithRelationInput
    stagiaire?: StagiaireOrderByWithRelationInput
    structure?: StructureOrderByWithRelationInput
    tuteur?: TuteurOrderByWithRelationInput
    evaluationsAsTuteur?: EvaluationOrderByRelationAggregateInput
    evaluationsAsStagiaire?: EvaluationOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    structureId?: IntNullableFilter<"User"> | number | null
    notifMessages?: BoolNullableFilter<"User"> | boolean | null
    notifEvaluation?: BoolNullableFilter<"User"> | boolean | null
    notifRapports?: BoolNullableFilter<"User"> | boolean | null
    demandesStage?: StageRequestListRelationFilter
    dpaf?: XOR<DPAFNullableScalarRelationFilter, DPAFWhereInput> | null
    journalActions?: JournalActionListRelationFilter
    messagesRecus?: MessageListRelationFilter
    messagesSent?: MessageListRelationFilter
    notifications?: NotificationListRelationFilter
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    stagiaire?: XOR<StagiaireNullableScalarRelationFilter, StagiaireWhereInput> | null
    structure?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    tuteur?: XOR<TuteurNullableScalarRelationFilter, TuteurWhereInput> | null
    evaluationsAsTuteur?: EvaluationListRelationFilter
    evaluationsAsStagiaire?: EvaluationListRelationFilter
    documents?: DocumentListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    structureId?: SortOrderInput | SortOrder
    notifMessages?: SortOrderInput | SortOrder
    notifEvaluation?: SortOrderInput | SortOrder
    notifRapports?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    structureId?: IntNullableWithAggregatesFilter<"User"> | number | null
    notifMessages?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    notifEvaluation?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    notifRapports?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: UuidFilter<"Profile"> | string
    userId?: UuidFilter<"Profile"> | string
    nom?: StringFilter<"Profile"> | string
    prenom?: StringFilter<"Profile"> | string
    telephone?: StringNullableFilter<"Profile"> | string | null
    avatar?: StringNullableFilter<"Profile"> | string | null
    birthDate?: DateTimeNullableFilter<"Profile"> | Date | string | null
    school?: StringNullableFilter<"Profile"> | string | null
    major?: StringNullableFilter<"Profile"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    school?: SortOrderInput | SortOrder
    major?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    nom?: StringFilter<"Profile"> | string
    prenom?: StringFilter<"Profile"> | string
    telephone?: StringNullableFilter<"Profile"> | string | null
    avatar?: StringNullableFilter<"Profile"> | string | null
    birthDate?: DateTimeNullableFilter<"Profile"> | Date | string | null
    school?: StringNullableFilter<"Profile"> | string | null
    major?: StringNullableFilter<"Profile"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    school?: SortOrderInput | SortOrder
    major?: SortOrderInput | SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Profile"> | string
    userId?: UuidWithAggregatesFilter<"Profile"> | string
    nom?: StringWithAggregatesFilter<"Profile"> | string
    prenom?: StringWithAggregatesFilter<"Profile"> | string
    telephone?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    birthDate?: DateTimeNullableWithAggregatesFilter<"Profile"> | Date | string | null
    school?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    major?: StringNullableWithAggregatesFilter<"Profile"> | string | null
  }

  export type DPAFWhereInput = {
    AND?: DPAFWhereInput | DPAFWhereInput[]
    OR?: DPAFWhereInput[]
    NOT?: DPAFWhereInput | DPAFWhereInput[]
    id?: UuidFilter<"DPAF"> | string
    userId?: UuidFilter<"DPAF"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DPAFOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DPAFWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: DPAFWhereInput | DPAFWhereInput[]
    OR?: DPAFWhereInput[]
    NOT?: DPAFWhereInput | DPAFWhereInput[]
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type DPAFOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    _count?: DPAFCountOrderByAggregateInput
    _max?: DPAFMaxOrderByAggregateInput
    _min?: DPAFMinOrderByAggregateInput
  }

  export type DPAFScalarWhereWithAggregatesInput = {
    AND?: DPAFScalarWhereWithAggregatesInput | DPAFScalarWhereWithAggregatesInput[]
    OR?: DPAFScalarWhereWithAggregatesInput[]
    NOT?: DPAFScalarWhereWithAggregatesInput | DPAFScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"DPAF"> | string
    userId?: UuidWithAggregatesFilter<"DPAF"> | string
  }

  export type StructureWhereInput = {
    AND?: StructureWhereInput | StructureWhereInput[]
    OR?: StructureWhereInput[]
    NOT?: StructureWhereInput | StructureWhereInput[]
    id?: IntFilter<"Structure"> | number
    nomStructure?: StringFilter<"Structure"> | string
    sigle?: StringNullableFilter<"Structure"> | string | null
    type?: StringNullableFilter<"Structure"> | string | null
    isDeleted?: BoolFilter<"Structure"> | boolean
    createdAt?: DateTimeFilter<"Structure"> | Date | string
    updatedAt?: DateTimeFilter<"Structure"> | Date | string
    parentId?: IntNullableFilter<"Structure"> | number | null
    demandesStages?: DemandeStageListRelationFilter
    stages?: StageListRelationFilter
    stagiaires?: StagiaireListRelationFilter
    parent?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    children?: StructureListRelationFilter
    users?: UserListRelationFilter
    tuteurs?: TuteurListRelationFilter
    services?: ServiceListRelationFilter
  }

  export type StructureOrderByWithRelationInput = {
    id?: SortOrder
    nomStructure?: SortOrder
    sigle?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrderInput | SortOrder
    demandesStages?: DemandeStageOrderByRelationAggregateInput
    stages?: StageOrderByRelationAggregateInput
    stagiaires?: StagiaireOrderByRelationAggregateInput
    parent?: StructureOrderByWithRelationInput
    children?: StructureOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    tuteurs?: TuteurOrderByRelationAggregateInput
    services?: ServiceOrderByRelationAggregateInput
  }

  export type StructureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nomStructure?: string
    sigle?: string
    AND?: StructureWhereInput | StructureWhereInput[]
    OR?: StructureWhereInput[]
    NOT?: StructureWhereInput | StructureWhereInput[]
    type?: StringNullableFilter<"Structure"> | string | null
    isDeleted?: BoolFilter<"Structure"> | boolean
    createdAt?: DateTimeFilter<"Structure"> | Date | string
    updatedAt?: DateTimeFilter<"Structure"> | Date | string
    parentId?: IntNullableFilter<"Structure"> | number | null
    demandesStages?: DemandeStageListRelationFilter
    stages?: StageListRelationFilter
    stagiaires?: StagiaireListRelationFilter
    parent?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    children?: StructureListRelationFilter
    users?: UserListRelationFilter
    tuteurs?: TuteurListRelationFilter
    services?: ServiceListRelationFilter
  }, "id" | "nomStructure" | "sigle">

  export type StructureOrderByWithAggregationInput = {
    id?: SortOrder
    nomStructure?: SortOrder
    sigle?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrderInput | SortOrder
    _count?: StructureCountOrderByAggregateInput
    _avg?: StructureAvgOrderByAggregateInput
    _max?: StructureMaxOrderByAggregateInput
    _min?: StructureMinOrderByAggregateInput
    _sum?: StructureSumOrderByAggregateInput
  }

  export type StructureScalarWhereWithAggregatesInput = {
    AND?: StructureScalarWhereWithAggregatesInput | StructureScalarWhereWithAggregatesInput[]
    OR?: StructureScalarWhereWithAggregatesInput[]
    NOT?: StructureScalarWhereWithAggregatesInput | StructureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Structure"> | number
    nomStructure?: StringWithAggregatesFilter<"Structure"> | string
    sigle?: StringNullableWithAggregatesFilter<"Structure"> | string | null
    type?: StringNullableWithAggregatesFilter<"Structure"> | string | null
    isDeleted?: BoolWithAggregatesFilter<"Structure"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Structure"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Structure"> | Date | string
    parentId?: IntNullableWithAggregatesFilter<"Structure"> | number | null
  }

  export type TuteurWhereInput = {
    AND?: TuteurWhereInput | TuteurWhereInput[]
    OR?: TuteurWhereInput[]
    NOT?: TuteurWhereInput | TuteurWhereInput[]
    id?: UuidFilter<"Tuteur"> | string
    userId?: UuidFilter<"Tuteur"> | string
    structureId?: IntNullableFilter<"Tuteur"> | number | null
    serviceId?: IntNullableFilter<"Tuteur"> | number | null
    stages?: StageListRelationFilter
    stagiaires?: StagiaireListRelationFilter
    themes?: ThemeTuteurListRelationFilter
    structure?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    service?: XOR<ServiceNullableScalarRelationFilter, ServiceWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TuteurOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    structureId?: SortOrderInput | SortOrder
    serviceId?: SortOrderInput | SortOrder
    stages?: StageOrderByRelationAggregateInput
    stagiaires?: StagiaireOrderByRelationAggregateInput
    themes?: ThemeTuteurOrderByRelationAggregateInput
    structure?: StructureOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TuteurWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: TuteurWhereInput | TuteurWhereInput[]
    OR?: TuteurWhereInput[]
    NOT?: TuteurWhereInput | TuteurWhereInput[]
    structureId?: IntNullableFilter<"Tuteur"> | number | null
    serviceId?: IntNullableFilter<"Tuteur"> | number | null
    stages?: StageListRelationFilter
    stagiaires?: StagiaireListRelationFilter
    themes?: ThemeTuteurListRelationFilter
    structure?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    service?: XOR<ServiceNullableScalarRelationFilter, ServiceWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type TuteurOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    structureId?: SortOrderInput | SortOrder
    serviceId?: SortOrderInput | SortOrder
    _count?: TuteurCountOrderByAggregateInput
    _avg?: TuteurAvgOrderByAggregateInput
    _max?: TuteurMaxOrderByAggregateInput
    _min?: TuteurMinOrderByAggregateInput
    _sum?: TuteurSumOrderByAggregateInput
  }

  export type TuteurScalarWhereWithAggregatesInput = {
    AND?: TuteurScalarWhereWithAggregatesInput | TuteurScalarWhereWithAggregatesInput[]
    OR?: TuteurScalarWhereWithAggregatesInput[]
    NOT?: TuteurScalarWhereWithAggregatesInput | TuteurScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Tuteur"> | string
    userId?: UuidWithAggregatesFilter<"Tuteur"> | string
    structureId?: IntNullableWithAggregatesFilter<"Tuteur"> | number | null
    serviceId?: IntNullableWithAggregatesFilter<"Tuteur"> | number | null
  }

  export type StagiaireWhereInput = {
    AND?: StagiaireWhereInput | StagiaireWhereInput[]
    OR?: StagiaireWhereInput[]
    NOT?: StagiaireWhereInput | StagiaireWhereInput[]
    id?: UuidFilter<"Stagiaire"> | string
    userId?: UuidFilter<"Stagiaire"> | string
    structureAffecteeId?: IntNullableFilter<"Stagiaire"> | number | null
    serviceAffecteId?: IntNullableFilter<"Stagiaire"> | number | null
    tuteurId?: UuidNullableFilter<"Stagiaire"> | string | null
    demandesStages?: DemandeStageListRelationFilter
    stages?: StageListRelationFilter
    structure?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    service?: XOR<ServiceNullableScalarRelationFilter, ServiceWhereInput> | null
    tuteur?: XOR<TuteurNullableScalarRelationFilter, TuteurWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StagiaireOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    structureAffecteeId?: SortOrderInput | SortOrder
    serviceAffecteId?: SortOrderInput | SortOrder
    tuteurId?: SortOrderInput | SortOrder
    demandesStages?: DemandeStageOrderByRelationAggregateInput
    stages?: StageOrderByRelationAggregateInput
    structure?: StructureOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
    tuteur?: TuteurOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type StagiaireWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: StagiaireWhereInput | StagiaireWhereInput[]
    OR?: StagiaireWhereInput[]
    NOT?: StagiaireWhereInput | StagiaireWhereInput[]
    structureAffecteeId?: IntNullableFilter<"Stagiaire"> | number | null
    serviceAffecteId?: IntNullableFilter<"Stagiaire"> | number | null
    tuteurId?: UuidNullableFilter<"Stagiaire"> | string | null
    demandesStages?: DemandeStageListRelationFilter
    stages?: StageListRelationFilter
    structure?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    service?: XOR<ServiceNullableScalarRelationFilter, ServiceWhereInput> | null
    tuteur?: XOR<TuteurNullableScalarRelationFilter, TuteurWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type StagiaireOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    structureAffecteeId?: SortOrderInput | SortOrder
    serviceAffecteId?: SortOrderInput | SortOrder
    tuteurId?: SortOrderInput | SortOrder
    _count?: StagiaireCountOrderByAggregateInput
    _avg?: StagiaireAvgOrderByAggregateInput
    _max?: StagiaireMaxOrderByAggregateInput
    _min?: StagiaireMinOrderByAggregateInput
    _sum?: StagiaireSumOrderByAggregateInput
  }

  export type StagiaireScalarWhereWithAggregatesInput = {
    AND?: StagiaireScalarWhereWithAggregatesInput | StagiaireScalarWhereWithAggregatesInput[]
    OR?: StagiaireScalarWhereWithAggregatesInput[]
    NOT?: StagiaireScalarWhereWithAggregatesInput | StagiaireScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Stagiaire"> | string
    userId?: UuidWithAggregatesFilter<"Stagiaire"> | string
    structureAffecteeId?: IntNullableWithAggregatesFilter<"Stagiaire"> | number | null
    serviceAffecteId?: IntNullableWithAggregatesFilter<"Stagiaire"> | number | null
    tuteurId?: UuidNullableWithAggregatesFilter<"Stagiaire"> | string | null
  }

  export type DemandeStageWhereInput = {
    AND?: DemandeStageWhereInput | DemandeStageWhereInput[]
    OR?: DemandeStageWhereInput[]
    NOT?: DemandeStageWhereInput | DemandeStageWhereInput[]
    id?: UuidFilter<"DemandeStage"> | string
    stagiaireId?: UuidFilter<"DemandeStage"> | string
    structureCibleId?: IntNullableFilter<"DemandeStage"> | number | null
    statut?: EnumStatutDemandeFilter<"DemandeStage"> | $Enums.StatutDemande
    dateDebut?: DateTimeFilter<"DemandeStage"> | Date | string
    dateFin?: DateTimeFilter<"DemandeStage"> | Date | string
    createdAt?: DateTimeFilter<"DemandeStage"> | Date | string
    updatedAt?: DateTimeFilter<"DemandeStage"> | Date | string
    details?: JsonNullableFilter<"DemandeStage">
    stagiaire?: XOR<StagiaireScalarRelationFilter, StagiaireWhereInput>
    structureCible?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    journalActions?: JournalActionListRelationFilter
    stage?: XOR<StageNullableScalarRelationFilter, StageWhereInput> | null
  }

  export type DemandeStageOrderByWithRelationInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    structureCibleId?: SortOrderInput | SortOrder
    statut?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    details?: SortOrderInput | SortOrder
    stagiaire?: StagiaireOrderByWithRelationInput
    structureCible?: StructureOrderByWithRelationInput
    journalActions?: JournalActionOrderByRelationAggregateInput
    stage?: StageOrderByWithRelationInput
  }

  export type DemandeStageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DemandeStageWhereInput | DemandeStageWhereInput[]
    OR?: DemandeStageWhereInput[]
    NOT?: DemandeStageWhereInput | DemandeStageWhereInput[]
    stagiaireId?: UuidFilter<"DemandeStage"> | string
    structureCibleId?: IntNullableFilter<"DemandeStage"> | number | null
    statut?: EnumStatutDemandeFilter<"DemandeStage"> | $Enums.StatutDemande
    dateDebut?: DateTimeFilter<"DemandeStage"> | Date | string
    dateFin?: DateTimeFilter<"DemandeStage"> | Date | string
    createdAt?: DateTimeFilter<"DemandeStage"> | Date | string
    updatedAt?: DateTimeFilter<"DemandeStage"> | Date | string
    details?: JsonNullableFilter<"DemandeStage">
    stagiaire?: XOR<StagiaireScalarRelationFilter, StagiaireWhereInput>
    structureCible?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    journalActions?: JournalActionListRelationFilter
    stage?: XOR<StageNullableScalarRelationFilter, StageWhereInput> | null
  }, "id">

  export type DemandeStageOrderByWithAggregationInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    structureCibleId?: SortOrderInput | SortOrder
    statut?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    details?: SortOrderInput | SortOrder
    _count?: DemandeStageCountOrderByAggregateInput
    _avg?: DemandeStageAvgOrderByAggregateInput
    _max?: DemandeStageMaxOrderByAggregateInput
    _min?: DemandeStageMinOrderByAggregateInput
    _sum?: DemandeStageSumOrderByAggregateInput
  }

  export type DemandeStageScalarWhereWithAggregatesInput = {
    AND?: DemandeStageScalarWhereWithAggregatesInput | DemandeStageScalarWhereWithAggregatesInput[]
    OR?: DemandeStageScalarWhereWithAggregatesInput[]
    NOT?: DemandeStageScalarWhereWithAggregatesInput | DemandeStageScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"DemandeStage"> | string
    stagiaireId?: UuidWithAggregatesFilter<"DemandeStage"> | string
    structureCibleId?: IntNullableWithAggregatesFilter<"DemandeStage"> | number | null
    statut?: EnumStatutDemandeWithAggregatesFilter<"DemandeStage"> | $Enums.StatutDemande
    dateDebut?: DateTimeWithAggregatesFilter<"DemandeStage"> | Date | string
    dateFin?: DateTimeWithAggregatesFilter<"DemandeStage"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"DemandeStage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DemandeStage"> | Date | string
    details?: JsonNullableWithAggregatesFilter<"DemandeStage">
  }

  export type StageWhereInput = {
    AND?: StageWhereInput | StageWhereInput[]
    OR?: StageWhereInput[]
    NOT?: StageWhereInput | StageWhereInput[]
    id?: UuidFilter<"Stage"> | string
    demandeStageId?: UuidFilter<"Stage"> | string
    tuteurId?: UuidFilter<"Stage"> | string
    structureId?: IntFilter<"Stage"> | number
    stagiaireId?: UuidFilter<"Stage"> | string
    dateDebut?: DateTimeFilter<"Stage"> | Date | string
    dateFin?: DateTimeFilter<"Stage"> | Date | string
    statut?: EnumStatutStageFilter<"Stage"> | $Enums.StatutStage
    createdAt?: DateTimeFilter<"Stage"> | Date | string
    updatedAt?: DateTimeFilter<"Stage"> | Date | string
    demandeStage?: XOR<DemandeStageScalarRelationFilter, DemandeStageWhereInput>
    stagiaire?: XOR<StagiaireScalarRelationFilter, StagiaireWhereInput>
    structure?: XOR<StructureScalarRelationFilter, StructureWhereInput>
    tuteur?: XOR<TuteurScalarRelationFilter, TuteurWhereInput>
  }

  export type StageOrderByWithRelationInput = {
    id?: SortOrder
    demandeStageId?: SortOrder
    tuteurId?: SortOrder
    structureId?: SortOrder
    stagiaireId?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    statut?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    demandeStage?: DemandeStageOrderByWithRelationInput
    stagiaire?: StagiaireOrderByWithRelationInput
    structure?: StructureOrderByWithRelationInput
    tuteur?: TuteurOrderByWithRelationInput
  }

  export type StageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    demandeStageId?: string
    AND?: StageWhereInput | StageWhereInput[]
    OR?: StageWhereInput[]
    NOT?: StageWhereInput | StageWhereInput[]
    tuteurId?: UuidFilter<"Stage"> | string
    structureId?: IntFilter<"Stage"> | number
    stagiaireId?: UuidFilter<"Stage"> | string
    dateDebut?: DateTimeFilter<"Stage"> | Date | string
    dateFin?: DateTimeFilter<"Stage"> | Date | string
    statut?: EnumStatutStageFilter<"Stage"> | $Enums.StatutStage
    createdAt?: DateTimeFilter<"Stage"> | Date | string
    updatedAt?: DateTimeFilter<"Stage"> | Date | string
    demandeStage?: XOR<DemandeStageScalarRelationFilter, DemandeStageWhereInput>
    stagiaire?: XOR<StagiaireScalarRelationFilter, StagiaireWhereInput>
    structure?: XOR<StructureScalarRelationFilter, StructureWhereInput>
    tuteur?: XOR<TuteurScalarRelationFilter, TuteurWhereInput>
  }, "id" | "demandeStageId">

  export type StageOrderByWithAggregationInput = {
    id?: SortOrder
    demandeStageId?: SortOrder
    tuteurId?: SortOrder
    structureId?: SortOrder
    stagiaireId?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    statut?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StageCountOrderByAggregateInput
    _avg?: StageAvgOrderByAggregateInput
    _max?: StageMaxOrderByAggregateInput
    _min?: StageMinOrderByAggregateInput
    _sum?: StageSumOrderByAggregateInput
  }

  export type StageScalarWhereWithAggregatesInput = {
    AND?: StageScalarWhereWithAggregatesInput | StageScalarWhereWithAggregatesInput[]
    OR?: StageScalarWhereWithAggregatesInput[]
    NOT?: StageScalarWhereWithAggregatesInput | StageScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Stage"> | string
    demandeStageId?: UuidWithAggregatesFilter<"Stage"> | string
    tuteurId?: UuidWithAggregatesFilter<"Stage"> | string
    structureId?: IntWithAggregatesFilter<"Stage"> | number
    stagiaireId?: UuidWithAggregatesFilter<"Stage"> | string
    dateDebut?: DateTimeWithAggregatesFilter<"Stage"> | Date | string
    dateFin?: DateTimeWithAggregatesFilter<"Stage"> | Date | string
    statut?: EnumStatutStageWithAggregatesFilter<"Stage"> | $Enums.StatutStage
    createdAt?: DateTimeWithAggregatesFilter<"Stage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Stage"> | Date | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: UuidFilter<"Message"> | string
    expediteurId?: UuidFilter<"Message"> | string
    destinataireId?: UuidFilter<"Message"> | string
    contenu?: StringFilter<"Message"> | string
    lu?: BoolFilter<"Message"> | boolean
    createdAt?: DateTimeFilter<"Message"> | Date | string
    destinataire?: XOR<UserScalarRelationFilter, UserWhereInput>
    expediteur?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    expediteurId?: SortOrder
    destinataireId?: SortOrder
    contenu?: SortOrder
    lu?: SortOrder
    createdAt?: SortOrder
    destinataire?: UserOrderByWithRelationInput
    expediteur?: UserOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    expediteurId?: UuidFilter<"Message"> | string
    destinataireId?: UuidFilter<"Message"> | string
    contenu?: StringFilter<"Message"> | string
    lu?: BoolFilter<"Message"> | boolean
    createdAt?: DateTimeFilter<"Message"> | Date | string
    destinataire?: XOR<UserScalarRelationFilter, UserWhereInput>
    expediteur?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    expediteurId?: SortOrder
    destinataireId?: SortOrder
    contenu?: SortOrder
    lu?: SortOrder
    createdAt?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Message"> | string
    expediteurId?: UuidWithAggregatesFilter<"Message"> | string
    destinataireId?: UuidWithAggregatesFilter<"Message"> | string
    contenu?: StringWithAggregatesFilter<"Message"> | string
    lu?: BoolWithAggregatesFilter<"Message"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type ThemeTuteurWhereInput = {
    AND?: ThemeTuteurWhereInput | ThemeTuteurWhereInput[]
    OR?: ThemeTuteurWhereInput[]
    NOT?: ThemeTuteurWhereInput | ThemeTuteurWhereInput[]
    id?: UuidFilter<"ThemeTuteur"> | string
    tuteurId?: UuidFilter<"ThemeTuteur"> | string
    titre?: StringFilter<"ThemeTuteur"> | string
    description?: StringNullableFilter<"ThemeTuteur"> | string | null
    disponible?: BoolFilter<"ThemeTuteur"> | boolean
    tuteur?: XOR<TuteurScalarRelationFilter, TuteurWhereInput>
  }

  export type ThemeTuteurOrderByWithRelationInput = {
    id?: SortOrder
    tuteurId?: SortOrder
    titre?: SortOrder
    description?: SortOrderInput | SortOrder
    disponible?: SortOrder
    tuteur?: TuteurOrderByWithRelationInput
  }

  export type ThemeTuteurWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ThemeTuteurWhereInput | ThemeTuteurWhereInput[]
    OR?: ThemeTuteurWhereInput[]
    NOT?: ThemeTuteurWhereInput | ThemeTuteurWhereInput[]
    tuteurId?: UuidFilter<"ThemeTuteur"> | string
    titre?: StringFilter<"ThemeTuteur"> | string
    description?: StringNullableFilter<"ThemeTuteur"> | string | null
    disponible?: BoolFilter<"ThemeTuteur"> | boolean
    tuteur?: XOR<TuteurScalarRelationFilter, TuteurWhereInput>
  }, "id">

  export type ThemeTuteurOrderByWithAggregationInput = {
    id?: SortOrder
    tuteurId?: SortOrder
    titre?: SortOrder
    description?: SortOrderInput | SortOrder
    disponible?: SortOrder
    _count?: ThemeTuteurCountOrderByAggregateInput
    _max?: ThemeTuteurMaxOrderByAggregateInput
    _min?: ThemeTuteurMinOrderByAggregateInput
  }

  export type ThemeTuteurScalarWhereWithAggregatesInput = {
    AND?: ThemeTuteurScalarWhereWithAggregatesInput | ThemeTuteurScalarWhereWithAggregatesInput[]
    OR?: ThemeTuteurScalarWhereWithAggregatesInput[]
    NOT?: ThemeTuteurScalarWhereWithAggregatesInput | ThemeTuteurScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ThemeTuteur"> | string
    tuteurId?: UuidWithAggregatesFilter<"ThemeTuteur"> | string
    titre?: StringWithAggregatesFilter<"ThemeTuteur"> | string
    description?: StringNullableWithAggregatesFilter<"ThemeTuteur"> | string | null
    disponible?: BoolWithAggregatesFilter<"ThemeTuteur"> | boolean
  }

  export type ParametreSystemeWhereInput = {
    AND?: ParametreSystemeWhereInput | ParametreSystemeWhereInput[]
    OR?: ParametreSystemeWhereInput[]
    NOT?: ParametreSystemeWhereInput | ParametreSystemeWhereInput[]
    id?: IntFilter<"ParametreSysteme"> | number
    cle?: StringFilter<"ParametreSysteme"> | string
    valeur?: StringFilter<"ParametreSysteme"> | string
  }

  export type ParametreSystemeOrderByWithRelationInput = {
    id?: SortOrder
    cle?: SortOrder
    valeur?: SortOrder
  }

  export type ParametreSystemeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cle?: string
    AND?: ParametreSystemeWhereInput | ParametreSystemeWhereInput[]
    OR?: ParametreSystemeWhereInput[]
    NOT?: ParametreSystemeWhereInput | ParametreSystemeWhereInput[]
    valeur?: StringFilter<"ParametreSysteme"> | string
  }, "id" | "cle">

  export type ParametreSystemeOrderByWithAggregationInput = {
    id?: SortOrder
    cle?: SortOrder
    valeur?: SortOrder
    _count?: ParametreSystemeCountOrderByAggregateInput
    _avg?: ParametreSystemeAvgOrderByAggregateInput
    _max?: ParametreSystemeMaxOrderByAggregateInput
    _min?: ParametreSystemeMinOrderByAggregateInput
    _sum?: ParametreSystemeSumOrderByAggregateInput
  }

  export type ParametreSystemeScalarWhereWithAggregatesInput = {
    AND?: ParametreSystemeScalarWhereWithAggregatesInput | ParametreSystemeScalarWhereWithAggregatesInput[]
    OR?: ParametreSystemeScalarWhereWithAggregatesInput[]
    NOT?: ParametreSystemeScalarWhereWithAggregatesInput | ParametreSystemeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ParametreSysteme"> | number
    cle?: StringWithAggregatesFilter<"ParametreSysteme"> | string
    valeur?: StringWithAggregatesFilter<"ParametreSysteme"> | string
  }

  export type JournalActionWhereInput = {
    AND?: JournalActionWhereInput | JournalActionWhereInput[]
    OR?: JournalActionWhereInput[]
    NOT?: JournalActionWhereInput | JournalActionWhereInput[]
    id?: UuidFilter<"JournalAction"> | string
    userId?: UuidFilter<"JournalAction"> | string
    action?: StringFilter<"JournalAction"> | string
    cible?: StringFilter<"JournalAction"> | string
    timestamp?: DateTimeFilter<"JournalAction"> | Date | string
    demandeStageId?: UuidNullableFilter<"JournalAction"> | string | null
    demandeStage?: XOR<DemandeStageNullableScalarRelationFilter, DemandeStageWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type JournalActionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    cible?: SortOrder
    timestamp?: SortOrder
    demandeStageId?: SortOrderInput | SortOrder
    demandeStage?: DemandeStageOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type JournalActionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JournalActionWhereInput | JournalActionWhereInput[]
    OR?: JournalActionWhereInput[]
    NOT?: JournalActionWhereInput | JournalActionWhereInput[]
    userId?: UuidFilter<"JournalAction"> | string
    action?: StringFilter<"JournalAction"> | string
    cible?: StringFilter<"JournalAction"> | string
    timestamp?: DateTimeFilter<"JournalAction"> | Date | string
    demandeStageId?: UuidNullableFilter<"JournalAction"> | string | null
    demandeStage?: XOR<DemandeStageNullableScalarRelationFilter, DemandeStageWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type JournalActionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    cible?: SortOrder
    timestamp?: SortOrder
    demandeStageId?: SortOrderInput | SortOrder
    _count?: JournalActionCountOrderByAggregateInput
    _max?: JournalActionMaxOrderByAggregateInput
    _min?: JournalActionMinOrderByAggregateInput
  }

  export type JournalActionScalarWhereWithAggregatesInput = {
    AND?: JournalActionScalarWhereWithAggregatesInput | JournalActionScalarWhereWithAggregatesInput[]
    OR?: JournalActionScalarWhereWithAggregatesInput[]
    NOT?: JournalActionScalarWhereWithAggregatesInput | JournalActionScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"JournalAction"> | string
    userId?: UuidWithAggregatesFilter<"JournalAction"> | string
    action?: StringWithAggregatesFilter<"JournalAction"> | string
    cible?: StringWithAggregatesFilter<"JournalAction"> | string
    timestamp?: DateTimeWithAggregatesFilter<"JournalAction"> | Date | string
    demandeStageId?: UuidNullableWithAggregatesFilter<"JournalAction"> | string | null
  }

  export type StageRequestWhereInput = {
    AND?: StageRequestWhereInput | StageRequestWhereInput[]
    OR?: StageRequestWhereInput[]
    NOT?: StageRequestWhereInput | StageRequestWhereInput[]
    id?: UuidFilter<"StageRequest"> | string
    createdAt?: DateTimeFilter<"StageRequest"> | Date | string
    updatedAt?: DateTimeFilter<"StageRequest"> | Date | string
    status?: StringFilter<"StageRequest"> | string
    type?: StringFilter<"StageRequest"> | string
    departement?: StringFilter<"StageRequest"> | string
    dateDebut?: DateTimeFilter<"StageRequest"> | Date | string
    dateFin?: DateTimeFilter<"StageRequest"> | Date | string
    motivation?: StringFilter<"StageRequest"> | string
    competences?: StringFilter<"StageRequest"> | string
    experience?: StringFilter<"StageRequest"> | string
    universite?: StringFilter<"StageRequest"> | string
    domaineEtude?: StringFilter<"StageRequest"> | string
    anneeEtude?: StringFilter<"StageRequest"> | string
    code_suivi?: StringNullableFilter<"StageRequest"> | string | null
    photo?: StringNullableFilter<"StageRequest"> | string | null
    candidate2Email?: StringNullableFilter<"StageRequest"> | string | null
    candidate2Photo?: StringNullableFilter<"StageRequest"> | string | null
    requiresSecondCandidateValidation?: BoolFilter<"StageRequest"> | boolean
    secondCandidateValidated?: BoolFilter<"StageRequest"> | boolean
    secondCandidateUserId?: UuidNullableFilter<"StageRequest"> | string | null
    secondCandidateValidationToken?: StringNullableFilter<"StageRequest"> | string | null
    secondCandidateValidationExpiresAt?: DateTimeNullableFilter<"StageRequest"> | Date | string | null
    stagiaireId?: UuidFilter<"StageRequest"> | string
    cv?: StringNullableFilter<"StageRequest"> | string | null
    lettreMotivation?: StringNullableFilter<"StageRequest"> | string | null
    carteIdentite?: StringNullableFilter<"StageRequest"> | string | null
    inscriptionUniversitaire?: StringNullableFilter<"StageRequest"> | string | null
    recommandation?: StringNullableFilter<"StageRequest"> | string | null
    autresDocuments?: JsonNullableFilter<"StageRequest">
    stagiaire?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StageRequestOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    type?: SortOrder
    departement?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    motivation?: SortOrder
    competences?: SortOrder
    experience?: SortOrder
    universite?: SortOrder
    domaineEtude?: SortOrder
    anneeEtude?: SortOrder
    code_suivi?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    candidate2Email?: SortOrderInput | SortOrder
    candidate2Photo?: SortOrderInput | SortOrder
    requiresSecondCandidateValidation?: SortOrder
    secondCandidateValidated?: SortOrder
    secondCandidateUserId?: SortOrderInput | SortOrder
    secondCandidateValidationToken?: SortOrderInput | SortOrder
    secondCandidateValidationExpiresAt?: SortOrderInput | SortOrder
    stagiaireId?: SortOrder
    cv?: SortOrderInput | SortOrder
    lettreMotivation?: SortOrderInput | SortOrder
    carteIdentite?: SortOrderInput | SortOrder
    inscriptionUniversitaire?: SortOrderInput | SortOrder
    recommandation?: SortOrderInput | SortOrder
    autresDocuments?: SortOrderInput | SortOrder
    stagiaire?: UserOrderByWithRelationInput
  }

  export type StageRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code_suivi?: string
    AND?: StageRequestWhereInput | StageRequestWhereInput[]
    OR?: StageRequestWhereInput[]
    NOT?: StageRequestWhereInput | StageRequestWhereInput[]
    createdAt?: DateTimeFilter<"StageRequest"> | Date | string
    updatedAt?: DateTimeFilter<"StageRequest"> | Date | string
    status?: StringFilter<"StageRequest"> | string
    type?: StringFilter<"StageRequest"> | string
    departement?: StringFilter<"StageRequest"> | string
    dateDebut?: DateTimeFilter<"StageRequest"> | Date | string
    dateFin?: DateTimeFilter<"StageRequest"> | Date | string
    motivation?: StringFilter<"StageRequest"> | string
    competences?: StringFilter<"StageRequest"> | string
    experience?: StringFilter<"StageRequest"> | string
    universite?: StringFilter<"StageRequest"> | string
    domaineEtude?: StringFilter<"StageRequest"> | string
    anneeEtude?: StringFilter<"StageRequest"> | string
    photo?: StringNullableFilter<"StageRequest"> | string | null
    candidate2Email?: StringNullableFilter<"StageRequest"> | string | null
    candidate2Photo?: StringNullableFilter<"StageRequest"> | string | null
    requiresSecondCandidateValidation?: BoolFilter<"StageRequest"> | boolean
    secondCandidateValidated?: BoolFilter<"StageRequest"> | boolean
    secondCandidateUserId?: UuidNullableFilter<"StageRequest"> | string | null
    secondCandidateValidationToken?: StringNullableFilter<"StageRequest"> | string | null
    secondCandidateValidationExpiresAt?: DateTimeNullableFilter<"StageRequest"> | Date | string | null
    stagiaireId?: UuidFilter<"StageRequest"> | string
    cv?: StringNullableFilter<"StageRequest"> | string | null
    lettreMotivation?: StringNullableFilter<"StageRequest"> | string | null
    carteIdentite?: StringNullableFilter<"StageRequest"> | string | null
    inscriptionUniversitaire?: StringNullableFilter<"StageRequest"> | string | null
    recommandation?: StringNullableFilter<"StageRequest"> | string | null
    autresDocuments?: JsonNullableFilter<"StageRequest">
    stagiaire?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "code_suivi">

  export type StageRequestOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    type?: SortOrder
    departement?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    motivation?: SortOrder
    competences?: SortOrder
    experience?: SortOrder
    universite?: SortOrder
    domaineEtude?: SortOrder
    anneeEtude?: SortOrder
    code_suivi?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    candidate2Email?: SortOrderInput | SortOrder
    candidate2Photo?: SortOrderInput | SortOrder
    requiresSecondCandidateValidation?: SortOrder
    secondCandidateValidated?: SortOrder
    secondCandidateUserId?: SortOrderInput | SortOrder
    secondCandidateValidationToken?: SortOrderInput | SortOrder
    secondCandidateValidationExpiresAt?: SortOrderInput | SortOrder
    stagiaireId?: SortOrder
    cv?: SortOrderInput | SortOrder
    lettreMotivation?: SortOrderInput | SortOrder
    carteIdentite?: SortOrderInput | SortOrder
    inscriptionUniversitaire?: SortOrderInput | SortOrder
    recommandation?: SortOrderInput | SortOrder
    autresDocuments?: SortOrderInput | SortOrder
    _count?: StageRequestCountOrderByAggregateInput
    _max?: StageRequestMaxOrderByAggregateInput
    _min?: StageRequestMinOrderByAggregateInput
  }

  export type StageRequestScalarWhereWithAggregatesInput = {
    AND?: StageRequestScalarWhereWithAggregatesInput | StageRequestScalarWhereWithAggregatesInput[]
    OR?: StageRequestScalarWhereWithAggregatesInput[]
    NOT?: StageRequestScalarWhereWithAggregatesInput | StageRequestScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"StageRequest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"StageRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StageRequest"> | Date | string
    status?: StringWithAggregatesFilter<"StageRequest"> | string
    type?: StringWithAggregatesFilter<"StageRequest"> | string
    departement?: StringWithAggregatesFilter<"StageRequest"> | string
    dateDebut?: DateTimeWithAggregatesFilter<"StageRequest"> | Date | string
    dateFin?: DateTimeWithAggregatesFilter<"StageRequest"> | Date | string
    motivation?: StringWithAggregatesFilter<"StageRequest"> | string
    competences?: StringWithAggregatesFilter<"StageRequest"> | string
    experience?: StringWithAggregatesFilter<"StageRequest"> | string
    universite?: StringWithAggregatesFilter<"StageRequest"> | string
    domaineEtude?: StringWithAggregatesFilter<"StageRequest"> | string
    anneeEtude?: StringWithAggregatesFilter<"StageRequest"> | string
    code_suivi?: StringNullableWithAggregatesFilter<"StageRequest"> | string | null
    photo?: StringNullableWithAggregatesFilter<"StageRequest"> | string | null
    candidate2Email?: StringNullableWithAggregatesFilter<"StageRequest"> | string | null
    candidate2Photo?: StringNullableWithAggregatesFilter<"StageRequest"> | string | null
    requiresSecondCandidateValidation?: BoolWithAggregatesFilter<"StageRequest"> | boolean
    secondCandidateValidated?: BoolWithAggregatesFilter<"StageRequest"> | boolean
    secondCandidateUserId?: UuidNullableWithAggregatesFilter<"StageRequest"> | string | null
    secondCandidateValidationToken?: StringNullableWithAggregatesFilter<"StageRequest"> | string | null
    secondCandidateValidationExpiresAt?: DateTimeNullableWithAggregatesFilter<"StageRequest"> | Date | string | null
    stagiaireId?: UuidWithAggregatesFilter<"StageRequest"> | string
    cv?: StringNullableWithAggregatesFilter<"StageRequest"> | string | null
    lettreMotivation?: StringNullableWithAggregatesFilter<"StageRequest"> | string | null
    carteIdentite?: StringNullableWithAggregatesFilter<"StageRequest"> | string | null
    inscriptionUniversitaire?: StringNullableWithAggregatesFilter<"StageRequest"> | string | null
    recommandation?: StringNullableWithAggregatesFilter<"StageRequest"> | string | null
    autresDocuments?: JsonNullableWithAggregatesFilter<"StageRequest">
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: UuidFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    userId?: UuidNullableFilter<"Notification"> | string | null
    role?: EnumUserRoleNullableFilter<"Notification"> | $Enums.UserRole | null
    read?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    userId?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    userId?: UuidNullableFilter<"Notification"> | string | null
    role?: EnumUserRoleNullableFilter<"Notification"> | $Enums.UserRole | null
    read?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    userId?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    userId?: UuidNullableWithAggregatesFilter<"Notification"> | string | null
    role?: EnumUserRoleNullableWithAggregatesFilter<"Notification"> | $Enums.UserRole | null
    read?: BoolWithAggregatesFilter<"Notification"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type EvaluationWhereInput = {
    AND?: EvaluationWhereInput | EvaluationWhereInput[]
    OR?: EvaluationWhereInput[]
    NOT?: EvaluationWhereInput | EvaluationWhereInput[]
    id?: UuidFilter<"Evaluation"> | string
    stagiaireId?: UuidFilter<"Evaluation"> | string
    tuteurId?: UuidFilter<"Evaluation"> | string
    criteres?: JsonFilter<"Evaluation">
    commentaire?: StringNullableFilter<"Evaluation"> | string | null
    createdAt?: DateTimeFilter<"Evaluation"> | Date | string
    stagiaire?: XOR<UserScalarRelationFilter, UserWhereInput>
    tuteur?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type EvaluationOrderByWithRelationInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    criteres?: SortOrder
    commentaire?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    stagiaire?: UserOrderByWithRelationInput
    tuteur?: UserOrderByWithRelationInput
  }

  export type EvaluationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EvaluationWhereInput | EvaluationWhereInput[]
    OR?: EvaluationWhereInput[]
    NOT?: EvaluationWhereInput | EvaluationWhereInput[]
    stagiaireId?: UuidFilter<"Evaluation"> | string
    tuteurId?: UuidFilter<"Evaluation"> | string
    criteres?: JsonFilter<"Evaluation">
    commentaire?: StringNullableFilter<"Evaluation"> | string | null
    createdAt?: DateTimeFilter<"Evaluation"> | Date | string
    stagiaire?: XOR<UserScalarRelationFilter, UserWhereInput>
    tuteur?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type EvaluationOrderByWithAggregationInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    criteres?: SortOrder
    commentaire?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: EvaluationCountOrderByAggregateInput
    _max?: EvaluationMaxOrderByAggregateInput
    _min?: EvaluationMinOrderByAggregateInput
  }

  export type EvaluationScalarWhereWithAggregatesInput = {
    AND?: EvaluationScalarWhereWithAggregatesInput | EvaluationScalarWhereWithAggregatesInput[]
    OR?: EvaluationScalarWhereWithAggregatesInput[]
    NOT?: EvaluationScalarWhereWithAggregatesInput | EvaluationScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Evaluation"> | string
    stagiaireId?: UuidWithAggregatesFilter<"Evaluation"> | string
    tuteurId?: UuidWithAggregatesFilter<"Evaluation"> | string
    criteres?: JsonWithAggregatesFilter<"Evaluation">
    commentaire?: StringNullableWithAggregatesFilter<"Evaluation"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Evaluation"> | Date | string
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: UuidFilter<"Document"> | string
    userId?: UuidFilter<"Document"> | string
    type?: StringFilter<"Document"> | string
    name?: StringFilter<"Document"> | string
    path?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    path?: SortOrder
    uploadedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    userId?: UuidFilter<"Document"> | string
    type?: StringFilter<"Document"> | string
    name?: StringFilter<"Document"> | string
    path?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    path?: SortOrder
    uploadedAt?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Document"> | string
    userId?: UuidWithAggregatesFilter<"Document"> | string
    type?: StringWithAggregatesFilter<"Document"> | string
    name?: StringWithAggregatesFilter<"Document"> | string
    path?: StringWithAggregatesFilter<"Document"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
  }

  export type ServiceWhereInput = {
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    id?: IntFilter<"Service"> | number
    nomService?: StringFilter<"Service"> | string
    description?: StringNullableFilter<"Service"> | string | null
    structureId?: IntFilter<"Service"> | number
    isDeleted?: BoolFilter<"Service"> | boolean
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
    structure?: XOR<StructureScalarRelationFilter, StructureWhereInput>
    tuteurs?: TuteurListRelationFilter
    stagiaires?: StagiaireListRelationFilter
  }

  export type ServiceOrderByWithRelationInput = {
    id?: SortOrder
    nomService?: SortOrder
    description?: SortOrderInput | SortOrder
    structureId?: SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    structure?: StructureOrderByWithRelationInput
    tuteurs?: TuteurOrderByRelationAggregateInput
    stagiaires?: StagiaireOrderByRelationAggregateInput
  }

  export type ServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nomService?: string
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    description?: StringNullableFilter<"Service"> | string | null
    structureId?: IntFilter<"Service"> | number
    isDeleted?: BoolFilter<"Service"> | boolean
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
    structure?: XOR<StructureScalarRelationFilter, StructureWhereInput>
    tuteurs?: TuteurListRelationFilter
    stagiaires?: StagiaireListRelationFilter
  }, "id" | "nomService">

  export type ServiceOrderByWithAggregationInput = {
    id?: SortOrder
    nomService?: SortOrder
    description?: SortOrderInput | SortOrder
    structureId?: SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServiceCountOrderByAggregateInput
    _avg?: ServiceAvgOrderByAggregateInput
    _max?: ServiceMaxOrderByAggregateInput
    _min?: ServiceMinOrderByAggregateInput
    _sum?: ServiceSumOrderByAggregateInput
  }

  export type ServiceScalarWhereWithAggregatesInput = {
    AND?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    OR?: ServiceScalarWhereWithAggregatesInput[]
    NOT?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Service"> | number
    nomService?: StringWithAggregatesFilter<"Service"> | string
    description?: StringNullableWithAggregatesFilter<"Service"> | string | null
    structureId?: IntWithAggregatesFilter<"Service"> | number
    isDeleted?: BoolWithAggregatesFilter<"Service"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Service"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Service"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
    messagesRecus?: MessageCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUsersInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationCreateNestedManyWithoutStagiaireInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structureId?: number | null
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestUncheckedCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
    messagesRecus?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationUncheckedCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationUncheckedCreateNestedManyWithoutStagiaireInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUsersNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUncheckedUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUncheckedUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUncheckedUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structureId?: number | null
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ProfileCreateInput = {
    id?: string
    nom: string
    prenom: string
    telephone?: string | null
    avatar?: string | null
    birthDate?: Date | string | null
    school?: string | null
    major?: string | null
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    userId: string
    nom: string
    prenom: string
    telephone?: string | null
    avatar?: string | null
    birthDate?: Date | string | null
    school?: string | null
    major?: string | null
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileCreateManyInput = {
    id?: string
    userId: string
    nom: string
    prenom: string
    telephone?: string | null
    avatar?: string | null
    birthDate?: Date | string | null
    school?: string | null
    major?: string | null
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DPAFCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutDpafInput
  }

  export type DPAFUncheckedCreateInput = {
    id?: string
    userId: string
  }

  export type DPAFUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutDpafNestedInput
  }

  export type DPAFUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DPAFCreateManyInput = {
    id?: string
    userId: string
  }

  export type DPAFUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type DPAFUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StructureCreateInput = {
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    demandesStages?: DemandeStageCreateNestedManyWithoutStructureCibleInput
    stages?: StageCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireCreateNestedManyWithoutStructureInput
    parent?: StructureCreateNestedOneWithoutChildrenInput
    children?: StructureCreateNestedManyWithoutParentInput
    users?: UserCreateNestedManyWithoutStructureInput
    tuteurs?: TuteurCreateNestedManyWithoutStructureInput
    services?: ServiceCreateNestedManyWithoutStructureInput
  }

  export type StructureUncheckedCreateInput = {
    id?: number
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: number | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput
    stages?: StageUncheckedCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutStructureInput
    children?: StructureUncheckedCreateNestedManyWithoutParentInput
    users?: UserUncheckedCreateNestedManyWithoutStructureInput
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutStructureInput
    services?: ServiceUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructureUpdateInput = {
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demandesStages?: DemandeStageUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUpdateManyWithoutStructureNestedInput
    parent?: StructureUpdateOneWithoutChildrenNestedInput
    children?: StructureUpdateManyWithoutParentNestedInput
    users?: UserUpdateManyWithoutStructureNestedInput
    tuteurs?: TuteurUpdateManyWithoutStructureNestedInput
    services?: ServiceUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUncheckedUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutStructureNestedInput
    children?: StructureUncheckedUpdateManyWithoutParentNestedInput
    users?: UserUncheckedUpdateManyWithoutStructureNestedInput
    tuteurs?: TuteurUncheckedUpdateManyWithoutStructureNestedInput
    services?: ServiceUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type StructureCreateManyInput = {
    id?: number
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: number | null
  }

  export type StructureUpdateManyMutationInput = {
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StructureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TuteurCreateInput = {
    id?: string
    stages?: StageCreateNestedManyWithoutTuteurInput
    stagiaires?: StagiaireCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurCreateNestedManyWithoutTuteurInput
    structure?: StructureCreateNestedOneWithoutTuteursInput
    service?: ServiceCreateNestedOneWithoutTuteursInput
    user: UserCreateNestedOneWithoutTuteurInput
  }

  export type TuteurUncheckedCreateInput = {
    id?: string
    userId: string
    structureId?: number | null
    serviceId?: number | null
    stages?: StageUncheckedCreateNestedManyWithoutTuteurInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurUncheckedCreateNestedManyWithoutTuteurInput
  }

  export type TuteurUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stages?: StageUpdateManyWithoutTuteurNestedInput
    stagiaires?: StagiaireUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUpdateManyWithoutTuteurNestedInput
    structure?: StructureUpdateOneWithoutTuteursNestedInput
    service?: ServiceUpdateOneWithoutTuteursNestedInput
    user?: UserUpdateOneRequiredWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceId?: NullableIntFieldUpdateOperationsInput | number | null
    stages?: StageUncheckedUpdateManyWithoutTuteurNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUncheckedUpdateManyWithoutTuteurNestedInput
  }

  export type TuteurCreateManyInput = {
    id?: string
    userId: string
    structureId?: number | null
    serviceId?: number | null
  }

  export type TuteurUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type TuteurUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StagiaireCreateInput = {
    id?: string
    demandesStages?: DemandeStageCreateNestedManyWithoutStagiaireInput
    stages?: StageCreateNestedManyWithoutStagiaireInput
    structure?: StructureCreateNestedOneWithoutStagiairesInput
    service?: ServiceCreateNestedOneWithoutStagiairesInput
    tuteur?: TuteurCreateNestedOneWithoutStagiairesInput
    user: UserCreateNestedOneWithoutStagiaireInput
  }

  export type StagiaireUncheckedCreateInput = {
    id?: string
    userId: string
    structureAffecteeId?: number | null
    serviceAffecteId?: number | null
    tuteurId?: string | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput
    stages?: StageUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    demandesStages?: DemandeStageUpdateManyWithoutStagiaireNestedInput
    stages?: StageUpdateManyWithoutStagiaireNestedInput
    structure?: StructureUpdateOneWithoutStagiairesNestedInput
    service?: ServiceUpdateOneWithoutStagiairesNestedInput
    tuteur?: TuteurUpdateOneWithoutStagiairesNestedInput
    user?: UserUpdateOneRequiredWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureAffecteeId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceAffecteId?: NullableIntFieldUpdateOperationsInput | number | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput
    stages?: StageUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireCreateManyInput = {
    id?: string
    userId: string
    structureAffecteeId?: number | null
    serviceAffecteId?: number | null
    tuteurId?: string | null
  }

  export type StagiaireUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type StagiaireUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureAffecteeId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceAffecteId?: NullableIntFieldUpdateOperationsInput | number | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DemandeStageCreateInput = {
    id?: string
    statut?: $Enums.StatutDemande
    dateDebut: Date | string
    dateFin: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    stagiaire: StagiaireCreateNestedOneWithoutDemandesStagesInput
    structureCible?: StructureCreateNestedOneWithoutDemandesStagesInput
    journalActions?: JournalActionCreateNestedManyWithoutDemandeStageInput
    stage?: StageCreateNestedOneWithoutDemandeStageInput
  }

  export type DemandeStageUncheckedCreateInput = {
    id?: string
    stagiaireId: string
    structureCibleId?: number | null
    statut?: $Enums.StatutDemande
    dateDebut: Date | string
    dateFin: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutDemandeStageInput
    stage?: StageUncheckedCreateNestedOneWithoutDemandeStageInput
  }

  export type DemandeStageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    stagiaire?: StagiaireUpdateOneRequiredWithoutDemandesStagesNestedInput
    structureCible?: StructureUpdateOneWithoutDemandesStagesNestedInput
    journalActions?: JournalActionUpdateManyWithoutDemandeStageNestedInput
    stage?: StageUpdateOneWithoutDemandeStageNestedInput
  }

  export type DemandeStageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    structureCibleId?: NullableIntFieldUpdateOperationsInput | number | null
    statut?: EnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    journalActions?: JournalActionUncheckedUpdateManyWithoutDemandeStageNestedInput
    stage?: StageUncheckedUpdateOneWithoutDemandeStageNestedInput
  }

  export type DemandeStageCreateManyInput = {
    id?: string
    stagiaireId: string
    structureCibleId?: number | null
    statut?: $Enums.StatutDemande
    dateDebut: Date | string
    dateFin: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DemandeStageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DemandeStageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    structureCibleId?: NullableIntFieldUpdateOperationsInput | number | null
    statut?: EnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StageCreateInput = {
    id?: string
    dateDebut: Date | string
    dateFin: Date | string
    statut?: $Enums.StatutStage
    createdAt?: Date | string
    updatedAt?: Date | string
    demandeStage: DemandeStageCreateNestedOneWithoutStageInput
    stagiaire: StagiaireCreateNestedOneWithoutStagesInput
    structure: StructureCreateNestedOneWithoutStagesInput
    tuteur: TuteurCreateNestedOneWithoutStagesInput
  }

  export type StageUncheckedCreateInput = {
    id?: string
    demandeStageId: string
    tuteurId: string
    structureId: number
    stagiaireId: string
    dateDebut: Date | string
    dateFin: Date | string
    statut?: $Enums.StatutStage
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demandeStage?: DemandeStageUpdateOneRequiredWithoutStageNestedInput
    stagiaire?: StagiaireUpdateOneRequiredWithoutStagesNestedInput
    structure?: StructureUpdateOneRequiredWithoutStagesNestedInput
    tuteur?: TuteurUpdateOneRequiredWithoutStagesNestedInput
  }

  export type StageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    demandeStageId?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    structureId?: IntFieldUpdateOperationsInput | number
    stagiaireId?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StageCreateManyInput = {
    id?: string
    demandeStageId: string
    tuteurId: string
    structureId: number
    stagiaireId: string
    dateDebut: Date | string
    dateFin: Date | string
    statut?: $Enums.StatutStage
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    demandeStageId?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    structureId?: IntFieldUpdateOperationsInput | number
    stagiaireId?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    id?: string
    contenu: string
    lu?: boolean
    createdAt?: Date | string
    destinataire: UserCreateNestedOneWithoutMessagesRecusInput
    expediteur: UserCreateNestedOneWithoutMessagesSentInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    expediteurId: string
    destinataireId: string
    contenu: string
    lu?: boolean
    createdAt?: Date | string
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    destinataire?: UserUpdateOneRequiredWithoutMessagesRecusNestedInput
    expediteur?: UserUpdateOneRequiredWithoutMessagesSentNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expediteurId?: StringFieldUpdateOperationsInput | string
    destinataireId?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyInput = {
    id?: string
    expediteurId: string
    destinataireId: string
    contenu: string
    lu?: boolean
    createdAt?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    expediteurId?: StringFieldUpdateOperationsInput | string
    destinataireId?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThemeTuteurCreateInput = {
    id?: string
    titre: string
    description?: string | null
    disponible?: boolean
    tuteur: TuteurCreateNestedOneWithoutThemesInput
  }

  export type ThemeTuteurUncheckedCreateInput = {
    id?: string
    tuteurId: string
    titre: string
    description?: string | null
    disponible?: boolean
  }

  export type ThemeTuteurUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disponible?: BoolFieldUpdateOperationsInput | boolean
    tuteur?: TuteurUpdateOneRequiredWithoutThemesNestedInput
  }

  export type ThemeTuteurUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disponible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ThemeTuteurCreateManyInput = {
    id?: string
    tuteurId: string
    titre: string
    description?: string | null
    disponible?: boolean
  }

  export type ThemeTuteurUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disponible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ThemeTuteurUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disponible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParametreSystemeCreateInput = {
    cle: string
    valeur: string
  }

  export type ParametreSystemeUncheckedCreateInput = {
    id?: number
    cle: string
    valeur: string
  }

  export type ParametreSystemeUpdateInput = {
    cle?: StringFieldUpdateOperationsInput | string
    valeur?: StringFieldUpdateOperationsInput | string
  }

  export type ParametreSystemeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cle?: StringFieldUpdateOperationsInput | string
    valeur?: StringFieldUpdateOperationsInput | string
  }

  export type ParametreSystemeCreateManyInput = {
    id?: number
    cle: string
    valeur: string
  }

  export type ParametreSystemeUpdateManyMutationInput = {
    cle?: StringFieldUpdateOperationsInput | string
    valeur?: StringFieldUpdateOperationsInput | string
  }

  export type ParametreSystemeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cle?: StringFieldUpdateOperationsInput | string
    valeur?: StringFieldUpdateOperationsInput | string
  }

  export type JournalActionCreateInput = {
    id?: string
    action: string
    cible: string
    timestamp?: Date | string
    demandeStage?: DemandeStageCreateNestedOneWithoutJournalActionsInput
    user: UserCreateNestedOneWithoutJournalActionsInput
  }

  export type JournalActionUncheckedCreateInput = {
    id?: string
    userId: string
    action: string
    cible: string
    timestamp?: Date | string
    demandeStageId?: string | null
  }

  export type JournalActionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    demandeStage?: DemandeStageUpdateOneWithoutJournalActionsNestedInput
    user?: UserUpdateOneRequiredWithoutJournalActionsNestedInput
  }

  export type JournalActionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    demandeStageId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JournalActionCreateManyInput = {
    id?: string
    userId: string
    action: string
    cible: string
    timestamp?: Date | string
    demandeStageId?: string | null
  }

  export type JournalActionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalActionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    demandeStageId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageRequestCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    type: string
    departement: string
    dateDebut: Date | string
    dateFin: Date | string
    motivation: string
    competences: string
    experience: string
    universite: string
    domaineEtude: string
    anneeEtude: string
    code_suivi?: string | null
    photo?: string | null
    candidate2Email?: string | null
    candidate2Photo?: string | null
    requiresSecondCandidateValidation?: boolean
    secondCandidateValidated?: boolean
    secondCandidateUserId?: string | null
    secondCandidateValidationToken?: string | null
    secondCandidateValidationExpiresAt?: Date | string | null
    cv?: string | null
    lettreMotivation?: string | null
    carteIdentite?: string | null
    inscriptionUniversitaire?: string | null
    recommandation?: string | null
    autresDocuments?: NullableJsonNullValueInput | InputJsonValue
    stagiaire: UserCreateNestedOneWithoutDemandesStageInput
  }

  export type StageRequestUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    type: string
    departement: string
    dateDebut: Date | string
    dateFin: Date | string
    motivation: string
    competences: string
    experience: string
    universite: string
    domaineEtude: string
    anneeEtude: string
    code_suivi?: string | null
    photo?: string | null
    candidate2Email?: string | null
    candidate2Photo?: string | null
    requiresSecondCandidateValidation?: boolean
    secondCandidateValidated?: boolean
    secondCandidateUserId?: string | null
    secondCandidateValidationToken?: string | null
    secondCandidateValidationExpiresAt?: Date | string | null
    stagiaireId: string
    cv?: string | null
    lettreMotivation?: string | null
    carteIdentite?: string | null
    inscriptionUniversitaire?: string | null
    recommandation?: string | null
    autresDocuments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StageRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    motivation?: StringFieldUpdateOperationsInput | string
    competences?: StringFieldUpdateOperationsInput | string
    experience?: StringFieldUpdateOperationsInput | string
    universite?: StringFieldUpdateOperationsInput | string
    domaineEtude?: StringFieldUpdateOperationsInput | string
    anneeEtude?: StringFieldUpdateOperationsInput | string
    code_suivi?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    candidate2Email?: NullableStringFieldUpdateOperationsInput | string | null
    candidate2Photo?: NullableStringFieldUpdateOperationsInput | string | null
    requiresSecondCandidateValidation?: BoolFieldUpdateOperationsInput | boolean
    secondCandidateValidated?: BoolFieldUpdateOperationsInput | boolean
    secondCandidateUserId?: NullableStringFieldUpdateOperationsInput | string | null
    secondCandidateValidationToken?: NullableStringFieldUpdateOperationsInput | string | null
    secondCandidateValidationExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    lettreMotivation?: NullableStringFieldUpdateOperationsInput | string | null
    carteIdentite?: NullableStringFieldUpdateOperationsInput | string | null
    inscriptionUniversitaire?: NullableStringFieldUpdateOperationsInput | string | null
    recommandation?: NullableStringFieldUpdateOperationsInput | string | null
    autresDocuments?: NullableJsonNullValueInput | InputJsonValue
    stagiaire?: UserUpdateOneRequiredWithoutDemandesStageNestedInput
  }

  export type StageRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    motivation?: StringFieldUpdateOperationsInput | string
    competences?: StringFieldUpdateOperationsInput | string
    experience?: StringFieldUpdateOperationsInput | string
    universite?: StringFieldUpdateOperationsInput | string
    domaineEtude?: StringFieldUpdateOperationsInput | string
    anneeEtude?: StringFieldUpdateOperationsInput | string
    code_suivi?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    candidate2Email?: NullableStringFieldUpdateOperationsInput | string | null
    candidate2Photo?: NullableStringFieldUpdateOperationsInput | string | null
    requiresSecondCandidateValidation?: BoolFieldUpdateOperationsInput | boolean
    secondCandidateValidated?: BoolFieldUpdateOperationsInput | boolean
    secondCandidateUserId?: NullableStringFieldUpdateOperationsInput | string | null
    secondCandidateValidationToken?: NullableStringFieldUpdateOperationsInput | string | null
    secondCandidateValidationExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stagiaireId?: StringFieldUpdateOperationsInput | string
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    lettreMotivation?: NullableStringFieldUpdateOperationsInput | string | null
    carteIdentite?: NullableStringFieldUpdateOperationsInput | string | null
    inscriptionUniversitaire?: NullableStringFieldUpdateOperationsInput | string | null
    recommandation?: NullableStringFieldUpdateOperationsInput | string | null
    autresDocuments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StageRequestCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    type: string
    departement: string
    dateDebut: Date | string
    dateFin: Date | string
    motivation: string
    competences: string
    experience: string
    universite: string
    domaineEtude: string
    anneeEtude: string
    code_suivi?: string | null
    photo?: string | null
    candidate2Email?: string | null
    candidate2Photo?: string | null
    requiresSecondCandidateValidation?: boolean
    secondCandidateValidated?: boolean
    secondCandidateUserId?: string | null
    secondCandidateValidationToken?: string | null
    secondCandidateValidationExpiresAt?: Date | string | null
    stagiaireId: string
    cv?: string | null
    lettreMotivation?: string | null
    carteIdentite?: string | null
    inscriptionUniversitaire?: string | null
    recommandation?: string | null
    autresDocuments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StageRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    motivation?: StringFieldUpdateOperationsInput | string
    competences?: StringFieldUpdateOperationsInput | string
    experience?: StringFieldUpdateOperationsInput | string
    universite?: StringFieldUpdateOperationsInput | string
    domaineEtude?: StringFieldUpdateOperationsInput | string
    anneeEtude?: StringFieldUpdateOperationsInput | string
    code_suivi?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    candidate2Email?: NullableStringFieldUpdateOperationsInput | string | null
    candidate2Photo?: NullableStringFieldUpdateOperationsInput | string | null
    requiresSecondCandidateValidation?: BoolFieldUpdateOperationsInput | boolean
    secondCandidateValidated?: BoolFieldUpdateOperationsInput | boolean
    secondCandidateUserId?: NullableStringFieldUpdateOperationsInput | string | null
    secondCandidateValidationToken?: NullableStringFieldUpdateOperationsInput | string | null
    secondCandidateValidationExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    lettreMotivation?: NullableStringFieldUpdateOperationsInput | string | null
    carteIdentite?: NullableStringFieldUpdateOperationsInput | string | null
    inscriptionUniversitaire?: NullableStringFieldUpdateOperationsInput | string | null
    recommandation?: NullableStringFieldUpdateOperationsInput | string | null
    autresDocuments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StageRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    motivation?: StringFieldUpdateOperationsInput | string
    competences?: StringFieldUpdateOperationsInput | string
    experience?: StringFieldUpdateOperationsInput | string
    universite?: StringFieldUpdateOperationsInput | string
    domaineEtude?: StringFieldUpdateOperationsInput | string
    anneeEtude?: StringFieldUpdateOperationsInput | string
    code_suivi?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    candidate2Email?: NullableStringFieldUpdateOperationsInput | string | null
    candidate2Photo?: NullableStringFieldUpdateOperationsInput | string | null
    requiresSecondCandidateValidation?: BoolFieldUpdateOperationsInput | boolean
    secondCandidateValidated?: BoolFieldUpdateOperationsInput | boolean
    secondCandidateUserId?: NullableStringFieldUpdateOperationsInput | string | null
    secondCandidateValidationToken?: NullableStringFieldUpdateOperationsInput | string | null
    secondCandidateValidationExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stagiaireId?: StringFieldUpdateOperationsInput | string
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    lettreMotivation?: NullableStringFieldUpdateOperationsInput | string | null
    carteIdentite?: NullableStringFieldUpdateOperationsInput | string | null
    inscriptionUniversitaire?: NullableStringFieldUpdateOperationsInput | string | null
    recommandation?: NullableStringFieldUpdateOperationsInput | string | null
    autresDocuments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationCreateInput = {
    id?: string
    type: string
    title: string
    message: string
    role?: $Enums.UserRole | null
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    type: string
    title: string
    message: string
    userId?: string | null
    role?: $Enums.UserRole | null
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    type: string
    title: string
    message: string
    userId?: string | null
    role?: $Enums.UserRole | null
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EvaluationCreateInput = {
    id?: string
    criteres: JsonNullValueInput | InputJsonValue
    commentaire?: string | null
    createdAt?: Date | string
    stagiaire: UserCreateNestedOneWithoutEvaluationsAsStagiaireInput
    tuteur: UserCreateNestedOneWithoutEvaluationsAsTuteurInput
  }

  export type EvaluationUncheckedCreateInput = {
    id?: string
    stagiaireId: string
    tuteurId: string
    criteres: JsonNullValueInput | InputJsonValue
    commentaire?: string | null
    createdAt?: Date | string
  }

  export type EvaluationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    criteres?: JsonNullValueInput | InputJsonValue
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stagiaire?: UserUpdateOneRequiredWithoutEvaluationsAsStagiaireNestedInput
    tuteur?: UserUpdateOneRequiredWithoutEvaluationsAsTuteurNestedInput
  }

  export type EvaluationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    criteres?: JsonNullValueInput | InputJsonValue
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EvaluationCreateManyInput = {
    id?: string
    stagiaireId: string
    tuteurId: string
    criteres: JsonNullValueInput | InputJsonValue
    commentaire?: string | null
    createdAt?: Date | string
  }

  export type EvaluationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    criteres?: JsonNullValueInput | InputJsonValue
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EvaluationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    criteres?: JsonNullValueInput | InputJsonValue
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateInput = {
    id?: string
    type: string
    name: string
    path: string
    uploadedAt?: Date | string
    user: UserCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    name: string
    path: string
    uploadedAt?: Date | string
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateManyInput = {
    id?: string
    userId: string
    type: string
    name: string
    path: string
    uploadedAt?: Date | string
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCreateInput = {
    nomService: string
    description?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structure: StructureCreateNestedOneWithoutServicesInput
    tuteurs?: TuteurCreateNestedManyWithoutServiceInput
    stagiaires?: StagiaireCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateInput = {
    id?: number
    nomService: string
    description?: string | null
    structureId: number
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutServiceInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceUpdateInput = {
    nomService?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structure?: StructureUpdateOneRequiredWithoutServicesNestedInput
    tuteurs?: TuteurUpdateManyWithoutServiceNestedInput
    stagiaires?: StagiaireUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomService?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    structureId?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tuteurs?: TuteurUncheckedUpdateManyWithoutServiceNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceCreateManyInput = {
    id?: number
    nomService: string
    description?: string | null
    structureId: number
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceUpdateManyMutationInput = {
    nomService?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomService?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    structureId?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type StageRequestListRelationFilter = {
    every?: StageRequestWhereInput
    some?: StageRequestWhereInput
    none?: StageRequestWhereInput
  }

  export type DPAFNullableScalarRelationFilter = {
    is?: DPAFWhereInput | null
    isNot?: DPAFWhereInput | null
  }

  export type JournalActionListRelationFilter = {
    every?: JournalActionWhereInput
    some?: JournalActionWhereInput
    none?: JournalActionWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type ProfileNullableScalarRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type StagiaireNullableScalarRelationFilter = {
    is?: StagiaireWhereInput | null
    isNot?: StagiaireWhereInput | null
  }

  export type StructureNullableScalarRelationFilter = {
    is?: StructureWhereInput | null
    isNot?: StructureWhereInput | null
  }

  export type TuteurNullableScalarRelationFilter = {
    is?: TuteurWhereInput | null
    isNot?: TuteurWhereInput | null
  }

  export type EvaluationListRelationFilter = {
    every?: EvaluationWhereInput
    some?: EvaluationWhereInput
    none?: EvaluationWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type StageRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JournalActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EvaluationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    structureId?: SortOrder
    notifMessages?: SortOrder
    notifEvaluation?: SortOrder
    notifRapports?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    structureId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    structureId?: SortOrder
    notifMessages?: SortOrder
    notifEvaluation?: SortOrder
    notifRapports?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    structureId?: SortOrder
    notifMessages?: SortOrder
    notifEvaluation?: SortOrder
    notifRapports?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    structureId?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrder
    avatar?: SortOrder
    birthDate?: SortOrder
    school?: SortOrder
    major?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrder
    avatar?: SortOrder
    birthDate?: SortOrder
    school?: SortOrder
    major?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrder
    avatar?: SortOrder
    birthDate?: SortOrder
    school?: SortOrder
    major?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DPAFCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DPAFMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DPAFMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DemandeStageListRelationFilter = {
    every?: DemandeStageWhereInput
    some?: DemandeStageWhereInput
    none?: DemandeStageWhereInput
  }

  export type StageListRelationFilter = {
    every?: StageWhereInput
    some?: StageWhereInput
    none?: StageWhereInput
  }

  export type StagiaireListRelationFilter = {
    every?: StagiaireWhereInput
    some?: StagiaireWhereInput
    none?: StagiaireWhereInput
  }

  export type StructureListRelationFilter = {
    every?: StructureWhereInput
    some?: StructureWhereInput
    none?: StructureWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type TuteurListRelationFilter = {
    every?: TuteurWhereInput
    some?: TuteurWhereInput
    none?: TuteurWhereInput
  }

  export type ServiceListRelationFilter = {
    every?: ServiceWhereInput
    some?: ServiceWhereInput
    none?: ServiceWhereInput
  }

  export type DemandeStageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StagiaireOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StructureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TuteurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StructureCountOrderByAggregateInput = {
    id?: SortOrder
    nomStructure?: SortOrder
    sigle?: SortOrder
    type?: SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrder
  }

  export type StructureAvgOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
  }

  export type StructureMaxOrderByAggregateInput = {
    id?: SortOrder
    nomStructure?: SortOrder
    sigle?: SortOrder
    type?: SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrder
  }

  export type StructureMinOrderByAggregateInput = {
    id?: SortOrder
    nomStructure?: SortOrder
    sigle?: SortOrder
    type?: SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrder
  }

  export type StructureSumOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ThemeTuteurListRelationFilter = {
    every?: ThemeTuteurWhereInput
    some?: ThemeTuteurWhereInput
    none?: ThemeTuteurWhereInput
  }

  export type ServiceNullableScalarRelationFilter = {
    is?: ServiceWhereInput | null
    isNot?: ServiceWhereInput | null
  }

  export type ThemeTuteurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TuteurCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    structureId?: SortOrder
    serviceId?: SortOrder
  }

  export type TuteurAvgOrderByAggregateInput = {
    structureId?: SortOrder
    serviceId?: SortOrder
  }

  export type TuteurMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    structureId?: SortOrder
    serviceId?: SortOrder
  }

  export type TuteurMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    structureId?: SortOrder
    serviceId?: SortOrder
  }

  export type TuteurSumOrderByAggregateInput = {
    structureId?: SortOrder
    serviceId?: SortOrder
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type StagiaireCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    structureAffecteeId?: SortOrder
    serviceAffecteId?: SortOrder
    tuteurId?: SortOrder
  }

  export type StagiaireAvgOrderByAggregateInput = {
    structureAffecteeId?: SortOrder
    serviceAffecteId?: SortOrder
  }

  export type StagiaireMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    structureAffecteeId?: SortOrder
    serviceAffecteId?: SortOrder
    tuteurId?: SortOrder
  }

  export type StagiaireMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    structureAffecteeId?: SortOrder
    serviceAffecteId?: SortOrder
    tuteurId?: SortOrder
  }

  export type StagiaireSumOrderByAggregateInput = {
    structureAffecteeId?: SortOrder
    serviceAffecteId?: SortOrder
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumStatutDemandeFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutDemande | EnumStatutDemandeFieldRefInput<$PrismaModel>
    in?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutDemandeFilter<$PrismaModel> | $Enums.StatutDemande
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StagiaireScalarRelationFilter = {
    is?: StagiaireWhereInput
    isNot?: StagiaireWhereInput
  }

  export type StageNullableScalarRelationFilter = {
    is?: StageWhereInput | null
    isNot?: StageWhereInput | null
  }

  export type DemandeStageCountOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    structureCibleId?: SortOrder
    statut?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    details?: SortOrder
  }

  export type DemandeStageAvgOrderByAggregateInput = {
    structureCibleId?: SortOrder
  }

  export type DemandeStageMaxOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    structureCibleId?: SortOrder
    statut?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DemandeStageMinOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    structureCibleId?: SortOrder
    statut?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DemandeStageSumOrderByAggregateInput = {
    structureCibleId?: SortOrder
  }

  export type EnumStatutDemandeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutDemande | EnumStatutDemandeFieldRefInput<$PrismaModel>
    in?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutDemandeWithAggregatesFilter<$PrismaModel> | $Enums.StatutDemande
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutDemandeFilter<$PrismaModel>
    _max?: NestedEnumStatutDemandeFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumStatutStageFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutStage | EnumStatutStageFieldRefInput<$PrismaModel>
    in?: $Enums.StatutStage[] | ListEnumStatutStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutStage[] | ListEnumStatutStageFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutStageFilter<$PrismaModel> | $Enums.StatutStage
  }

  export type DemandeStageScalarRelationFilter = {
    is?: DemandeStageWhereInput
    isNot?: DemandeStageWhereInput
  }

  export type StructureScalarRelationFilter = {
    is?: StructureWhereInput
    isNot?: StructureWhereInput
  }

  export type TuteurScalarRelationFilter = {
    is?: TuteurWhereInput
    isNot?: TuteurWhereInput
  }

  export type StageCountOrderByAggregateInput = {
    id?: SortOrder
    demandeStageId?: SortOrder
    tuteurId?: SortOrder
    structureId?: SortOrder
    stagiaireId?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    statut?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StageAvgOrderByAggregateInput = {
    structureId?: SortOrder
  }

  export type StageMaxOrderByAggregateInput = {
    id?: SortOrder
    demandeStageId?: SortOrder
    tuteurId?: SortOrder
    structureId?: SortOrder
    stagiaireId?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    statut?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StageMinOrderByAggregateInput = {
    id?: SortOrder
    demandeStageId?: SortOrder
    tuteurId?: SortOrder
    structureId?: SortOrder
    stagiaireId?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    statut?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StageSumOrderByAggregateInput = {
    structureId?: SortOrder
  }

  export type EnumStatutStageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutStage | EnumStatutStageFieldRefInput<$PrismaModel>
    in?: $Enums.StatutStage[] | ListEnumStatutStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutStage[] | ListEnumStatutStageFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutStageWithAggregatesFilter<$PrismaModel> | $Enums.StatutStage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutStageFilter<$PrismaModel>
    _max?: NestedEnumStatutStageFilter<$PrismaModel>
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    expediteurId?: SortOrder
    destinataireId?: SortOrder
    contenu?: SortOrder
    lu?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    expediteurId?: SortOrder
    destinataireId?: SortOrder
    contenu?: SortOrder
    lu?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    expediteurId?: SortOrder
    destinataireId?: SortOrder
    contenu?: SortOrder
    lu?: SortOrder
    createdAt?: SortOrder
  }

  export type ThemeTuteurCountOrderByAggregateInput = {
    id?: SortOrder
    tuteurId?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    disponible?: SortOrder
  }

  export type ThemeTuteurMaxOrderByAggregateInput = {
    id?: SortOrder
    tuteurId?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    disponible?: SortOrder
  }

  export type ThemeTuteurMinOrderByAggregateInput = {
    id?: SortOrder
    tuteurId?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    disponible?: SortOrder
  }

  export type ParametreSystemeCountOrderByAggregateInput = {
    id?: SortOrder
    cle?: SortOrder
    valeur?: SortOrder
  }

  export type ParametreSystemeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ParametreSystemeMaxOrderByAggregateInput = {
    id?: SortOrder
    cle?: SortOrder
    valeur?: SortOrder
  }

  export type ParametreSystemeMinOrderByAggregateInput = {
    id?: SortOrder
    cle?: SortOrder
    valeur?: SortOrder
  }

  export type ParametreSystemeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DemandeStageNullableScalarRelationFilter = {
    is?: DemandeStageWhereInput | null
    isNot?: DemandeStageWhereInput | null
  }

  export type JournalActionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    cible?: SortOrder
    timestamp?: SortOrder
    demandeStageId?: SortOrder
  }

  export type JournalActionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    cible?: SortOrder
    timestamp?: SortOrder
    demandeStageId?: SortOrder
  }

  export type JournalActionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    cible?: SortOrder
    timestamp?: SortOrder
    demandeStageId?: SortOrder
  }

  export type StageRequestCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    type?: SortOrder
    departement?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    motivation?: SortOrder
    competences?: SortOrder
    experience?: SortOrder
    universite?: SortOrder
    domaineEtude?: SortOrder
    anneeEtude?: SortOrder
    code_suivi?: SortOrder
    photo?: SortOrder
    candidate2Email?: SortOrder
    candidate2Photo?: SortOrder
    requiresSecondCandidateValidation?: SortOrder
    secondCandidateValidated?: SortOrder
    secondCandidateUserId?: SortOrder
    secondCandidateValidationToken?: SortOrder
    secondCandidateValidationExpiresAt?: SortOrder
    stagiaireId?: SortOrder
    cv?: SortOrder
    lettreMotivation?: SortOrder
    carteIdentite?: SortOrder
    inscriptionUniversitaire?: SortOrder
    recommandation?: SortOrder
    autresDocuments?: SortOrder
  }

  export type StageRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    type?: SortOrder
    departement?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    motivation?: SortOrder
    competences?: SortOrder
    experience?: SortOrder
    universite?: SortOrder
    domaineEtude?: SortOrder
    anneeEtude?: SortOrder
    code_suivi?: SortOrder
    photo?: SortOrder
    candidate2Email?: SortOrder
    candidate2Photo?: SortOrder
    requiresSecondCandidateValidation?: SortOrder
    secondCandidateValidated?: SortOrder
    secondCandidateUserId?: SortOrder
    secondCandidateValidationToken?: SortOrder
    secondCandidateValidationExpiresAt?: SortOrder
    stagiaireId?: SortOrder
    cv?: SortOrder
    lettreMotivation?: SortOrder
    carteIdentite?: SortOrder
    inscriptionUniversitaire?: SortOrder
    recommandation?: SortOrder
  }

  export type StageRequestMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    type?: SortOrder
    departement?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    motivation?: SortOrder
    competences?: SortOrder
    experience?: SortOrder
    universite?: SortOrder
    domaineEtude?: SortOrder
    anneeEtude?: SortOrder
    code_suivi?: SortOrder
    photo?: SortOrder
    candidate2Email?: SortOrder
    candidate2Photo?: SortOrder
    requiresSecondCandidateValidation?: SortOrder
    secondCandidateValidated?: SortOrder
    secondCandidateUserId?: SortOrder
    secondCandidateValidationToken?: SortOrder
    secondCandidateValidationExpiresAt?: SortOrder
    stagiaireId?: SortOrder
    cv?: SortOrder
    lettreMotivation?: SortOrder
    carteIdentite?: SortOrder
    inscriptionUniversitaire?: SortOrder
    recommandation?: SortOrder
  }

  export type EnumUserRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EvaluationCountOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    criteres?: SortOrder
    commentaire?: SortOrder
    createdAt?: SortOrder
  }

  export type EvaluationMaxOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    commentaire?: SortOrder
    createdAt?: SortOrder
  }

  export type EvaluationMinOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    commentaire?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    path?: SortOrder
    uploadedAt?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    path?: SortOrder
    uploadedAt?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    path?: SortOrder
    uploadedAt?: SortOrder
  }

  export type ServiceCountOrderByAggregateInput = {
    id?: SortOrder
    nomService?: SortOrder
    description?: SortOrder
    structureId?: SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceAvgOrderByAggregateInput = {
    id?: SortOrder
    structureId?: SortOrder
  }

  export type ServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    nomService?: SortOrder
    description?: SortOrder
    structureId?: SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceMinOrderByAggregateInput = {
    id?: SortOrder
    nomService?: SortOrder
    description?: SortOrder
    structureId?: SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceSumOrderByAggregateInput = {
    id?: SortOrder
    structureId?: SortOrder
  }

  export type StageRequestCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<StageRequestCreateWithoutStagiaireInput, StageRequestUncheckedCreateWithoutStagiaireInput> | StageRequestCreateWithoutStagiaireInput[] | StageRequestUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: StageRequestCreateOrConnectWithoutStagiaireInput | StageRequestCreateOrConnectWithoutStagiaireInput[]
    createMany?: StageRequestCreateManyStagiaireInputEnvelope
    connect?: StageRequestWhereUniqueInput | StageRequestWhereUniqueInput[]
  }

  export type DPAFCreateNestedOneWithoutUserInput = {
    create?: XOR<DPAFCreateWithoutUserInput, DPAFUncheckedCreateWithoutUserInput>
    connectOrCreate?: DPAFCreateOrConnectWithoutUserInput
    connect?: DPAFWhereUniqueInput
  }

  export type JournalActionCreateNestedManyWithoutUserInput = {
    create?: XOR<JournalActionCreateWithoutUserInput, JournalActionUncheckedCreateWithoutUserInput> | JournalActionCreateWithoutUserInput[] | JournalActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JournalActionCreateOrConnectWithoutUserInput | JournalActionCreateOrConnectWithoutUserInput[]
    createMany?: JournalActionCreateManyUserInputEnvelope
    connect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutDestinataireInput = {
    create?: XOR<MessageCreateWithoutDestinataireInput, MessageUncheckedCreateWithoutDestinataireInput> | MessageCreateWithoutDestinataireInput[] | MessageUncheckedCreateWithoutDestinataireInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDestinataireInput | MessageCreateOrConnectWithoutDestinataireInput[]
    createMany?: MessageCreateManyDestinataireInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutExpediteurInput = {
    create?: XOR<MessageCreateWithoutExpediteurInput, MessageUncheckedCreateWithoutExpediteurInput> | MessageCreateWithoutExpediteurInput[] | MessageUncheckedCreateWithoutExpediteurInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutExpediteurInput | MessageCreateOrConnectWithoutExpediteurInput[]
    createMany?: MessageCreateManyExpediteurInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type StagiaireCreateNestedOneWithoutUserInput = {
    create?: XOR<StagiaireCreateWithoutUserInput, StagiaireUncheckedCreateWithoutUserInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutUserInput
    connect?: StagiaireWhereUniqueInput
  }

  export type StructureCreateNestedOneWithoutUsersInput = {
    create?: XOR<StructureCreateWithoutUsersInput, StructureUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StructureCreateOrConnectWithoutUsersInput
    connect?: StructureWhereUniqueInput
  }

  export type TuteurCreateNestedOneWithoutUserInput = {
    create?: XOR<TuteurCreateWithoutUserInput, TuteurUncheckedCreateWithoutUserInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutUserInput
    connect?: TuteurWhereUniqueInput
  }

  export type EvaluationCreateNestedManyWithoutTuteurInput = {
    create?: XOR<EvaluationCreateWithoutTuteurInput, EvaluationUncheckedCreateWithoutTuteurInput> | EvaluationCreateWithoutTuteurInput[] | EvaluationUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: EvaluationCreateOrConnectWithoutTuteurInput | EvaluationCreateOrConnectWithoutTuteurInput[]
    createMany?: EvaluationCreateManyTuteurInputEnvelope
    connect?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
  }

  export type EvaluationCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<EvaluationCreateWithoutStagiaireInput, EvaluationUncheckedCreateWithoutStagiaireInput> | EvaluationCreateWithoutStagiaireInput[] | EvaluationUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: EvaluationCreateOrConnectWithoutStagiaireInput | EvaluationCreateOrConnectWithoutStagiaireInput[]
    createMany?: EvaluationCreateManyStagiaireInputEnvelope
    connect?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutUserInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type StageRequestUncheckedCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<StageRequestCreateWithoutStagiaireInput, StageRequestUncheckedCreateWithoutStagiaireInput> | StageRequestCreateWithoutStagiaireInput[] | StageRequestUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: StageRequestCreateOrConnectWithoutStagiaireInput | StageRequestCreateOrConnectWithoutStagiaireInput[]
    createMany?: StageRequestCreateManyStagiaireInputEnvelope
    connect?: StageRequestWhereUniqueInput | StageRequestWhereUniqueInput[]
  }

  export type DPAFUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<DPAFCreateWithoutUserInput, DPAFUncheckedCreateWithoutUserInput>
    connectOrCreate?: DPAFCreateOrConnectWithoutUserInput
    connect?: DPAFWhereUniqueInput
  }

  export type JournalActionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<JournalActionCreateWithoutUserInput, JournalActionUncheckedCreateWithoutUserInput> | JournalActionCreateWithoutUserInput[] | JournalActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JournalActionCreateOrConnectWithoutUserInput | JournalActionCreateOrConnectWithoutUserInput[]
    createMany?: JournalActionCreateManyUserInputEnvelope
    connect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutDestinataireInput = {
    create?: XOR<MessageCreateWithoutDestinataireInput, MessageUncheckedCreateWithoutDestinataireInput> | MessageCreateWithoutDestinataireInput[] | MessageUncheckedCreateWithoutDestinataireInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDestinataireInput | MessageCreateOrConnectWithoutDestinataireInput[]
    createMany?: MessageCreateManyDestinataireInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutExpediteurInput = {
    create?: XOR<MessageCreateWithoutExpediteurInput, MessageUncheckedCreateWithoutExpediteurInput> | MessageCreateWithoutExpediteurInput[] | MessageUncheckedCreateWithoutExpediteurInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutExpediteurInput | MessageCreateOrConnectWithoutExpediteurInput[]
    createMany?: MessageCreateManyExpediteurInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type StagiaireUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StagiaireCreateWithoutUserInput, StagiaireUncheckedCreateWithoutUserInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutUserInput
    connect?: StagiaireWhereUniqueInput
  }

  export type TuteurUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<TuteurCreateWithoutUserInput, TuteurUncheckedCreateWithoutUserInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutUserInput
    connect?: TuteurWhereUniqueInput
  }

  export type EvaluationUncheckedCreateNestedManyWithoutTuteurInput = {
    create?: XOR<EvaluationCreateWithoutTuteurInput, EvaluationUncheckedCreateWithoutTuteurInput> | EvaluationCreateWithoutTuteurInput[] | EvaluationUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: EvaluationCreateOrConnectWithoutTuteurInput | EvaluationCreateOrConnectWithoutTuteurInput[]
    createMany?: EvaluationCreateManyTuteurInputEnvelope
    connect?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
  }

  export type EvaluationUncheckedCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<EvaluationCreateWithoutStagiaireInput, EvaluationUncheckedCreateWithoutStagiaireInput> | EvaluationCreateWithoutStagiaireInput[] | EvaluationUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: EvaluationCreateOrConnectWithoutStagiaireInput | EvaluationCreateOrConnectWithoutStagiaireInput[]
    createMany?: EvaluationCreateManyStagiaireInputEnvelope
    connect?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type StageRequestUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<StageRequestCreateWithoutStagiaireInput, StageRequestUncheckedCreateWithoutStagiaireInput> | StageRequestCreateWithoutStagiaireInput[] | StageRequestUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: StageRequestCreateOrConnectWithoutStagiaireInput | StageRequestCreateOrConnectWithoutStagiaireInput[]
    upsert?: StageRequestUpsertWithWhereUniqueWithoutStagiaireInput | StageRequestUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: StageRequestCreateManyStagiaireInputEnvelope
    set?: StageRequestWhereUniqueInput | StageRequestWhereUniqueInput[]
    disconnect?: StageRequestWhereUniqueInput | StageRequestWhereUniqueInput[]
    delete?: StageRequestWhereUniqueInput | StageRequestWhereUniqueInput[]
    connect?: StageRequestWhereUniqueInput | StageRequestWhereUniqueInput[]
    update?: StageRequestUpdateWithWhereUniqueWithoutStagiaireInput | StageRequestUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: StageRequestUpdateManyWithWhereWithoutStagiaireInput | StageRequestUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: StageRequestScalarWhereInput | StageRequestScalarWhereInput[]
  }

  export type DPAFUpdateOneWithoutUserNestedInput = {
    create?: XOR<DPAFCreateWithoutUserInput, DPAFUncheckedCreateWithoutUserInput>
    connectOrCreate?: DPAFCreateOrConnectWithoutUserInput
    upsert?: DPAFUpsertWithoutUserInput
    disconnect?: DPAFWhereInput | boolean
    delete?: DPAFWhereInput | boolean
    connect?: DPAFWhereUniqueInput
    update?: XOR<XOR<DPAFUpdateToOneWithWhereWithoutUserInput, DPAFUpdateWithoutUserInput>, DPAFUncheckedUpdateWithoutUserInput>
  }

  export type JournalActionUpdateManyWithoutUserNestedInput = {
    create?: XOR<JournalActionCreateWithoutUserInput, JournalActionUncheckedCreateWithoutUserInput> | JournalActionCreateWithoutUserInput[] | JournalActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JournalActionCreateOrConnectWithoutUserInput | JournalActionCreateOrConnectWithoutUserInput[]
    upsert?: JournalActionUpsertWithWhereUniqueWithoutUserInput | JournalActionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JournalActionCreateManyUserInputEnvelope
    set?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    disconnect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    delete?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    connect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    update?: JournalActionUpdateWithWhereUniqueWithoutUserInput | JournalActionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JournalActionUpdateManyWithWhereWithoutUserInput | JournalActionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JournalActionScalarWhereInput | JournalActionScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutDestinataireNestedInput = {
    create?: XOR<MessageCreateWithoutDestinataireInput, MessageUncheckedCreateWithoutDestinataireInput> | MessageCreateWithoutDestinataireInput[] | MessageUncheckedCreateWithoutDestinataireInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDestinataireInput | MessageCreateOrConnectWithoutDestinataireInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutDestinataireInput | MessageUpsertWithWhereUniqueWithoutDestinataireInput[]
    createMany?: MessageCreateManyDestinataireInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutDestinataireInput | MessageUpdateWithWhereUniqueWithoutDestinataireInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutDestinataireInput | MessageUpdateManyWithWhereWithoutDestinataireInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutExpediteurNestedInput = {
    create?: XOR<MessageCreateWithoutExpediteurInput, MessageUncheckedCreateWithoutExpediteurInput> | MessageCreateWithoutExpediteurInput[] | MessageUncheckedCreateWithoutExpediteurInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutExpediteurInput | MessageCreateOrConnectWithoutExpediteurInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutExpediteurInput | MessageUpsertWithWhereUniqueWithoutExpediteurInput[]
    createMany?: MessageCreateManyExpediteurInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutExpediteurInput | MessageUpdateWithWhereUniqueWithoutExpediteurInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutExpediteurInput | MessageUpdateManyWithWhereWithoutExpediteurInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type StagiaireUpdateOneWithoutUserNestedInput = {
    create?: XOR<StagiaireCreateWithoutUserInput, StagiaireUncheckedCreateWithoutUserInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutUserInput
    upsert?: StagiaireUpsertWithoutUserInput
    disconnect?: StagiaireWhereInput | boolean
    delete?: StagiaireWhereInput | boolean
    connect?: StagiaireWhereUniqueInput
    update?: XOR<XOR<StagiaireUpdateToOneWithWhereWithoutUserInput, StagiaireUpdateWithoutUserInput>, StagiaireUncheckedUpdateWithoutUserInput>
  }

  export type StructureUpdateOneWithoutUsersNestedInput = {
    create?: XOR<StructureCreateWithoutUsersInput, StructureUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StructureCreateOrConnectWithoutUsersInput
    upsert?: StructureUpsertWithoutUsersInput
    disconnect?: StructureWhereInput | boolean
    delete?: StructureWhereInput | boolean
    connect?: StructureWhereUniqueInput
    update?: XOR<XOR<StructureUpdateToOneWithWhereWithoutUsersInput, StructureUpdateWithoutUsersInput>, StructureUncheckedUpdateWithoutUsersInput>
  }

  export type TuteurUpdateOneWithoutUserNestedInput = {
    create?: XOR<TuteurCreateWithoutUserInput, TuteurUncheckedCreateWithoutUserInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutUserInput
    upsert?: TuteurUpsertWithoutUserInput
    disconnect?: TuteurWhereInput | boolean
    delete?: TuteurWhereInput | boolean
    connect?: TuteurWhereUniqueInput
    update?: XOR<XOR<TuteurUpdateToOneWithWhereWithoutUserInput, TuteurUpdateWithoutUserInput>, TuteurUncheckedUpdateWithoutUserInput>
  }

  export type EvaluationUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<EvaluationCreateWithoutTuteurInput, EvaluationUncheckedCreateWithoutTuteurInput> | EvaluationCreateWithoutTuteurInput[] | EvaluationUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: EvaluationCreateOrConnectWithoutTuteurInput | EvaluationCreateOrConnectWithoutTuteurInput[]
    upsert?: EvaluationUpsertWithWhereUniqueWithoutTuteurInput | EvaluationUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: EvaluationCreateManyTuteurInputEnvelope
    set?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    disconnect?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    delete?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    connect?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    update?: EvaluationUpdateWithWhereUniqueWithoutTuteurInput | EvaluationUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: EvaluationUpdateManyWithWhereWithoutTuteurInput | EvaluationUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: EvaluationScalarWhereInput | EvaluationScalarWhereInput[]
  }

  export type EvaluationUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<EvaluationCreateWithoutStagiaireInput, EvaluationUncheckedCreateWithoutStagiaireInput> | EvaluationCreateWithoutStagiaireInput[] | EvaluationUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: EvaluationCreateOrConnectWithoutStagiaireInput | EvaluationCreateOrConnectWithoutStagiaireInput[]
    upsert?: EvaluationUpsertWithWhereUniqueWithoutStagiaireInput | EvaluationUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: EvaluationCreateManyStagiaireInputEnvelope
    set?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    disconnect?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    delete?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    connect?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    update?: EvaluationUpdateWithWhereUniqueWithoutStagiaireInput | EvaluationUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: EvaluationUpdateManyWithWhereWithoutStagiaireInput | EvaluationUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: EvaluationScalarWhereInput | EvaluationScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutUserNestedInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUserInput | DocumentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUserInput | DocumentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUserInput | DocumentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StageRequestUncheckedUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<StageRequestCreateWithoutStagiaireInput, StageRequestUncheckedCreateWithoutStagiaireInput> | StageRequestCreateWithoutStagiaireInput[] | StageRequestUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: StageRequestCreateOrConnectWithoutStagiaireInput | StageRequestCreateOrConnectWithoutStagiaireInput[]
    upsert?: StageRequestUpsertWithWhereUniqueWithoutStagiaireInput | StageRequestUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: StageRequestCreateManyStagiaireInputEnvelope
    set?: StageRequestWhereUniqueInput | StageRequestWhereUniqueInput[]
    disconnect?: StageRequestWhereUniqueInput | StageRequestWhereUniqueInput[]
    delete?: StageRequestWhereUniqueInput | StageRequestWhereUniqueInput[]
    connect?: StageRequestWhereUniqueInput | StageRequestWhereUniqueInput[]
    update?: StageRequestUpdateWithWhereUniqueWithoutStagiaireInput | StageRequestUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: StageRequestUpdateManyWithWhereWithoutStagiaireInput | StageRequestUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: StageRequestScalarWhereInput | StageRequestScalarWhereInput[]
  }

  export type DPAFUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<DPAFCreateWithoutUserInput, DPAFUncheckedCreateWithoutUserInput>
    connectOrCreate?: DPAFCreateOrConnectWithoutUserInput
    upsert?: DPAFUpsertWithoutUserInput
    disconnect?: DPAFWhereInput | boolean
    delete?: DPAFWhereInput | boolean
    connect?: DPAFWhereUniqueInput
    update?: XOR<XOR<DPAFUpdateToOneWithWhereWithoutUserInput, DPAFUpdateWithoutUserInput>, DPAFUncheckedUpdateWithoutUserInput>
  }

  export type JournalActionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<JournalActionCreateWithoutUserInput, JournalActionUncheckedCreateWithoutUserInput> | JournalActionCreateWithoutUserInput[] | JournalActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JournalActionCreateOrConnectWithoutUserInput | JournalActionCreateOrConnectWithoutUserInput[]
    upsert?: JournalActionUpsertWithWhereUniqueWithoutUserInput | JournalActionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JournalActionCreateManyUserInputEnvelope
    set?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    disconnect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    delete?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    connect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    update?: JournalActionUpdateWithWhereUniqueWithoutUserInput | JournalActionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JournalActionUpdateManyWithWhereWithoutUserInput | JournalActionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JournalActionScalarWhereInput | JournalActionScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutDestinataireNestedInput = {
    create?: XOR<MessageCreateWithoutDestinataireInput, MessageUncheckedCreateWithoutDestinataireInput> | MessageCreateWithoutDestinataireInput[] | MessageUncheckedCreateWithoutDestinataireInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDestinataireInput | MessageCreateOrConnectWithoutDestinataireInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutDestinataireInput | MessageUpsertWithWhereUniqueWithoutDestinataireInput[]
    createMany?: MessageCreateManyDestinataireInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutDestinataireInput | MessageUpdateWithWhereUniqueWithoutDestinataireInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutDestinataireInput | MessageUpdateManyWithWhereWithoutDestinataireInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutExpediteurNestedInput = {
    create?: XOR<MessageCreateWithoutExpediteurInput, MessageUncheckedCreateWithoutExpediteurInput> | MessageCreateWithoutExpediteurInput[] | MessageUncheckedCreateWithoutExpediteurInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutExpediteurInput | MessageCreateOrConnectWithoutExpediteurInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutExpediteurInput | MessageUpsertWithWhereUniqueWithoutExpediteurInput[]
    createMany?: MessageCreateManyExpediteurInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutExpediteurInput | MessageUpdateWithWhereUniqueWithoutExpediteurInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutExpediteurInput | MessageUpdateManyWithWhereWithoutExpediteurInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type StagiaireUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StagiaireCreateWithoutUserInput, StagiaireUncheckedCreateWithoutUserInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutUserInput
    upsert?: StagiaireUpsertWithoutUserInput
    disconnect?: StagiaireWhereInput | boolean
    delete?: StagiaireWhereInput | boolean
    connect?: StagiaireWhereUniqueInput
    update?: XOR<XOR<StagiaireUpdateToOneWithWhereWithoutUserInput, StagiaireUpdateWithoutUserInput>, StagiaireUncheckedUpdateWithoutUserInput>
  }

  export type TuteurUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<TuteurCreateWithoutUserInput, TuteurUncheckedCreateWithoutUserInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutUserInput
    upsert?: TuteurUpsertWithoutUserInput
    disconnect?: TuteurWhereInput | boolean
    delete?: TuteurWhereInput | boolean
    connect?: TuteurWhereUniqueInput
    update?: XOR<XOR<TuteurUpdateToOneWithWhereWithoutUserInput, TuteurUpdateWithoutUserInput>, TuteurUncheckedUpdateWithoutUserInput>
  }

  export type EvaluationUncheckedUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<EvaluationCreateWithoutTuteurInput, EvaluationUncheckedCreateWithoutTuteurInput> | EvaluationCreateWithoutTuteurInput[] | EvaluationUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: EvaluationCreateOrConnectWithoutTuteurInput | EvaluationCreateOrConnectWithoutTuteurInput[]
    upsert?: EvaluationUpsertWithWhereUniqueWithoutTuteurInput | EvaluationUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: EvaluationCreateManyTuteurInputEnvelope
    set?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    disconnect?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    delete?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    connect?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    update?: EvaluationUpdateWithWhereUniqueWithoutTuteurInput | EvaluationUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: EvaluationUpdateManyWithWhereWithoutTuteurInput | EvaluationUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: EvaluationScalarWhereInput | EvaluationScalarWhereInput[]
  }

  export type EvaluationUncheckedUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<EvaluationCreateWithoutStagiaireInput, EvaluationUncheckedCreateWithoutStagiaireInput> | EvaluationCreateWithoutStagiaireInput[] | EvaluationUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: EvaluationCreateOrConnectWithoutStagiaireInput | EvaluationCreateOrConnectWithoutStagiaireInput[]
    upsert?: EvaluationUpsertWithWhereUniqueWithoutStagiaireInput | EvaluationUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: EvaluationCreateManyStagiaireInputEnvelope
    set?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    disconnect?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    delete?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    connect?: EvaluationWhereUniqueInput | EvaluationWhereUniqueInput[]
    update?: EvaluationUpdateWithWhereUniqueWithoutStagiaireInput | EvaluationUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: EvaluationUpdateManyWithWhereWithoutStagiaireInput | EvaluationUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: EvaluationScalarWhereInput | EvaluationScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUserInput | DocumentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUserInput | DocumentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUserInput | DocumentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserCreateNestedOneWithoutDpafInput = {
    create?: XOR<UserCreateWithoutDpafInput, UserUncheckedCreateWithoutDpafInput>
    connectOrCreate?: UserCreateOrConnectWithoutDpafInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDpafNestedInput = {
    create?: XOR<UserCreateWithoutDpafInput, UserUncheckedCreateWithoutDpafInput>
    connectOrCreate?: UserCreateOrConnectWithoutDpafInput
    upsert?: UserUpsertWithoutDpafInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDpafInput, UserUpdateWithoutDpafInput>, UserUncheckedUpdateWithoutDpafInput>
  }

  export type DemandeStageCreateNestedManyWithoutStructureCibleInput = {
    create?: XOR<DemandeStageCreateWithoutStructureCibleInput, DemandeStageUncheckedCreateWithoutStructureCibleInput> | DemandeStageCreateWithoutStructureCibleInput[] | DemandeStageUncheckedCreateWithoutStructureCibleInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStructureCibleInput | DemandeStageCreateOrConnectWithoutStructureCibleInput[]
    createMany?: DemandeStageCreateManyStructureCibleInputEnvelope
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
  }

  export type StageCreateNestedManyWithoutStructureInput = {
    create?: XOR<StageCreateWithoutStructureInput, StageUncheckedCreateWithoutStructureInput> | StageCreateWithoutStructureInput[] | StageUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStructureInput | StageCreateOrConnectWithoutStructureInput[]
    createMany?: StageCreateManyStructureInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type StagiaireCreateNestedManyWithoutStructureInput = {
    create?: XOR<StagiaireCreateWithoutStructureInput, StagiaireUncheckedCreateWithoutStructureInput> | StagiaireCreateWithoutStructureInput[] | StagiaireUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutStructureInput | StagiaireCreateOrConnectWithoutStructureInput[]
    createMany?: StagiaireCreateManyStructureInputEnvelope
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
  }

  export type StructureCreateNestedOneWithoutChildrenInput = {
    create?: XOR<StructureCreateWithoutChildrenInput, StructureUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: StructureCreateOrConnectWithoutChildrenInput
    connect?: StructureWhereUniqueInput
  }

  export type StructureCreateNestedManyWithoutParentInput = {
    create?: XOR<StructureCreateWithoutParentInput, StructureUncheckedCreateWithoutParentInput> | StructureCreateWithoutParentInput[] | StructureUncheckedCreateWithoutParentInput[]
    connectOrCreate?: StructureCreateOrConnectWithoutParentInput | StructureCreateOrConnectWithoutParentInput[]
    createMany?: StructureCreateManyParentInputEnvelope
    connect?: StructureWhereUniqueInput | StructureWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutStructureInput = {
    create?: XOR<UserCreateWithoutStructureInput, UserUncheckedCreateWithoutStructureInput> | UserCreateWithoutStructureInput[] | UserUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStructureInput | UserCreateOrConnectWithoutStructureInput[]
    createMany?: UserCreateManyStructureInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TuteurCreateNestedManyWithoutStructureInput = {
    create?: XOR<TuteurCreateWithoutStructureInput, TuteurUncheckedCreateWithoutStructureInput> | TuteurCreateWithoutStructureInput[] | TuteurUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: TuteurCreateOrConnectWithoutStructureInput | TuteurCreateOrConnectWithoutStructureInput[]
    createMany?: TuteurCreateManyStructureInputEnvelope
    connect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
  }

  export type ServiceCreateNestedManyWithoutStructureInput = {
    create?: XOR<ServiceCreateWithoutStructureInput, ServiceUncheckedCreateWithoutStructureInput> | ServiceCreateWithoutStructureInput[] | ServiceUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutStructureInput | ServiceCreateOrConnectWithoutStructureInput[]
    createMany?: ServiceCreateManyStructureInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput = {
    create?: XOR<DemandeStageCreateWithoutStructureCibleInput, DemandeStageUncheckedCreateWithoutStructureCibleInput> | DemandeStageCreateWithoutStructureCibleInput[] | DemandeStageUncheckedCreateWithoutStructureCibleInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStructureCibleInput | DemandeStageCreateOrConnectWithoutStructureCibleInput[]
    createMany?: DemandeStageCreateManyStructureCibleInputEnvelope
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
  }

  export type StageUncheckedCreateNestedManyWithoutStructureInput = {
    create?: XOR<StageCreateWithoutStructureInput, StageUncheckedCreateWithoutStructureInput> | StageCreateWithoutStructureInput[] | StageUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStructureInput | StageCreateOrConnectWithoutStructureInput[]
    createMany?: StageCreateManyStructureInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type StagiaireUncheckedCreateNestedManyWithoutStructureInput = {
    create?: XOR<StagiaireCreateWithoutStructureInput, StagiaireUncheckedCreateWithoutStructureInput> | StagiaireCreateWithoutStructureInput[] | StagiaireUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutStructureInput | StagiaireCreateOrConnectWithoutStructureInput[]
    createMany?: StagiaireCreateManyStructureInputEnvelope
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
  }

  export type StructureUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<StructureCreateWithoutParentInput, StructureUncheckedCreateWithoutParentInput> | StructureCreateWithoutParentInput[] | StructureUncheckedCreateWithoutParentInput[]
    connectOrCreate?: StructureCreateOrConnectWithoutParentInput | StructureCreateOrConnectWithoutParentInput[]
    createMany?: StructureCreateManyParentInputEnvelope
    connect?: StructureWhereUniqueInput | StructureWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutStructureInput = {
    create?: XOR<UserCreateWithoutStructureInput, UserUncheckedCreateWithoutStructureInput> | UserCreateWithoutStructureInput[] | UserUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStructureInput | UserCreateOrConnectWithoutStructureInput[]
    createMany?: UserCreateManyStructureInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TuteurUncheckedCreateNestedManyWithoutStructureInput = {
    create?: XOR<TuteurCreateWithoutStructureInput, TuteurUncheckedCreateWithoutStructureInput> | TuteurCreateWithoutStructureInput[] | TuteurUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: TuteurCreateOrConnectWithoutStructureInput | TuteurCreateOrConnectWithoutStructureInput[]
    createMany?: TuteurCreateManyStructureInputEnvelope
    connect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
  }

  export type ServiceUncheckedCreateNestedManyWithoutStructureInput = {
    create?: XOR<ServiceCreateWithoutStructureInput, ServiceUncheckedCreateWithoutStructureInput> | ServiceCreateWithoutStructureInput[] | ServiceUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutStructureInput | ServiceCreateOrConnectWithoutStructureInput[]
    createMany?: ServiceCreateManyStructureInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type DemandeStageUpdateManyWithoutStructureCibleNestedInput = {
    create?: XOR<DemandeStageCreateWithoutStructureCibleInput, DemandeStageUncheckedCreateWithoutStructureCibleInput> | DemandeStageCreateWithoutStructureCibleInput[] | DemandeStageUncheckedCreateWithoutStructureCibleInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStructureCibleInput | DemandeStageCreateOrConnectWithoutStructureCibleInput[]
    upsert?: DemandeStageUpsertWithWhereUniqueWithoutStructureCibleInput | DemandeStageUpsertWithWhereUniqueWithoutStructureCibleInput[]
    createMany?: DemandeStageCreateManyStructureCibleInputEnvelope
    set?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    disconnect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    delete?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    update?: DemandeStageUpdateWithWhereUniqueWithoutStructureCibleInput | DemandeStageUpdateWithWhereUniqueWithoutStructureCibleInput[]
    updateMany?: DemandeStageUpdateManyWithWhereWithoutStructureCibleInput | DemandeStageUpdateManyWithWhereWithoutStructureCibleInput[]
    deleteMany?: DemandeStageScalarWhereInput | DemandeStageScalarWhereInput[]
  }

  export type StageUpdateManyWithoutStructureNestedInput = {
    create?: XOR<StageCreateWithoutStructureInput, StageUncheckedCreateWithoutStructureInput> | StageCreateWithoutStructureInput[] | StageUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStructureInput | StageCreateOrConnectWithoutStructureInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutStructureInput | StageUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: StageCreateManyStructureInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutStructureInput | StageUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: StageUpdateManyWithWhereWithoutStructureInput | StageUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type StagiaireUpdateManyWithoutStructureNestedInput = {
    create?: XOR<StagiaireCreateWithoutStructureInput, StagiaireUncheckedCreateWithoutStructureInput> | StagiaireCreateWithoutStructureInput[] | StagiaireUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutStructureInput | StagiaireCreateOrConnectWithoutStructureInput[]
    upsert?: StagiaireUpsertWithWhereUniqueWithoutStructureInput | StagiaireUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: StagiaireCreateManyStructureInputEnvelope
    set?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    disconnect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    delete?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    update?: StagiaireUpdateWithWhereUniqueWithoutStructureInput | StagiaireUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: StagiaireUpdateManyWithWhereWithoutStructureInput | StagiaireUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: StagiaireScalarWhereInput | StagiaireScalarWhereInput[]
  }

  export type StructureUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<StructureCreateWithoutChildrenInput, StructureUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: StructureCreateOrConnectWithoutChildrenInput
    upsert?: StructureUpsertWithoutChildrenInput
    disconnect?: StructureWhereInput | boolean
    delete?: StructureWhereInput | boolean
    connect?: StructureWhereUniqueInput
    update?: XOR<XOR<StructureUpdateToOneWithWhereWithoutChildrenInput, StructureUpdateWithoutChildrenInput>, StructureUncheckedUpdateWithoutChildrenInput>
  }

  export type StructureUpdateManyWithoutParentNestedInput = {
    create?: XOR<StructureCreateWithoutParentInput, StructureUncheckedCreateWithoutParentInput> | StructureCreateWithoutParentInput[] | StructureUncheckedCreateWithoutParentInput[]
    connectOrCreate?: StructureCreateOrConnectWithoutParentInput | StructureCreateOrConnectWithoutParentInput[]
    upsert?: StructureUpsertWithWhereUniqueWithoutParentInput | StructureUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: StructureCreateManyParentInputEnvelope
    set?: StructureWhereUniqueInput | StructureWhereUniqueInput[]
    disconnect?: StructureWhereUniqueInput | StructureWhereUniqueInput[]
    delete?: StructureWhereUniqueInput | StructureWhereUniqueInput[]
    connect?: StructureWhereUniqueInput | StructureWhereUniqueInput[]
    update?: StructureUpdateWithWhereUniqueWithoutParentInput | StructureUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: StructureUpdateManyWithWhereWithoutParentInput | StructureUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: StructureScalarWhereInput | StructureScalarWhereInput[]
  }

  export type UserUpdateManyWithoutStructureNestedInput = {
    create?: XOR<UserCreateWithoutStructureInput, UserUncheckedCreateWithoutStructureInput> | UserCreateWithoutStructureInput[] | UserUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStructureInput | UserCreateOrConnectWithoutStructureInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStructureInput | UserUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: UserCreateManyStructureInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStructureInput | UserUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStructureInput | UserUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TuteurUpdateManyWithoutStructureNestedInput = {
    create?: XOR<TuteurCreateWithoutStructureInput, TuteurUncheckedCreateWithoutStructureInput> | TuteurCreateWithoutStructureInput[] | TuteurUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: TuteurCreateOrConnectWithoutStructureInput | TuteurCreateOrConnectWithoutStructureInput[]
    upsert?: TuteurUpsertWithWhereUniqueWithoutStructureInput | TuteurUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: TuteurCreateManyStructureInputEnvelope
    set?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    disconnect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    delete?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    connect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    update?: TuteurUpdateWithWhereUniqueWithoutStructureInput | TuteurUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: TuteurUpdateManyWithWhereWithoutStructureInput | TuteurUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: TuteurScalarWhereInput | TuteurScalarWhereInput[]
  }

  export type ServiceUpdateManyWithoutStructureNestedInput = {
    create?: XOR<ServiceCreateWithoutStructureInput, ServiceUncheckedCreateWithoutStructureInput> | ServiceCreateWithoutStructureInput[] | ServiceUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutStructureInput | ServiceCreateOrConnectWithoutStructureInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutStructureInput | ServiceUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: ServiceCreateManyStructureInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutStructureInput | ServiceUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutStructureInput | ServiceUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput = {
    create?: XOR<DemandeStageCreateWithoutStructureCibleInput, DemandeStageUncheckedCreateWithoutStructureCibleInput> | DemandeStageCreateWithoutStructureCibleInput[] | DemandeStageUncheckedCreateWithoutStructureCibleInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStructureCibleInput | DemandeStageCreateOrConnectWithoutStructureCibleInput[]
    upsert?: DemandeStageUpsertWithWhereUniqueWithoutStructureCibleInput | DemandeStageUpsertWithWhereUniqueWithoutStructureCibleInput[]
    createMany?: DemandeStageCreateManyStructureCibleInputEnvelope
    set?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    disconnect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    delete?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    update?: DemandeStageUpdateWithWhereUniqueWithoutStructureCibleInput | DemandeStageUpdateWithWhereUniqueWithoutStructureCibleInput[]
    updateMany?: DemandeStageUpdateManyWithWhereWithoutStructureCibleInput | DemandeStageUpdateManyWithWhereWithoutStructureCibleInput[]
    deleteMany?: DemandeStageScalarWhereInput | DemandeStageScalarWhereInput[]
  }

  export type StageUncheckedUpdateManyWithoutStructureNestedInput = {
    create?: XOR<StageCreateWithoutStructureInput, StageUncheckedCreateWithoutStructureInput> | StageCreateWithoutStructureInput[] | StageUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStructureInput | StageCreateOrConnectWithoutStructureInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutStructureInput | StageUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: StageCreateManyStructureInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutStructureInput | StageUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: StageUpdateManyWithWhereWithoutStructureInput | StageUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type StagiaireUncheckedUpdateManyWithoutStructureNestedInput = {
    create?: XOR<StagiaireCreateWithoutStructureInput, StagiaireUncheckedCreateWithoutStructureInput> | StagiaireCreateWithoutStructureInput[] | StagiaireUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutStructureInput | StagiaireCreateOrConnectWithoutStructureInput[]
    upsert?: StagiaireUpsertWithWhereUniqueWithoutStructureInput | StagiaireUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: StagiaireCreateManyStructureInputEnvelope
    set?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    disconnect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    delete?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    update?: StagiaireUpdateWithWhereUniqueWithoutStructureInput | StagiaireUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: StagiaireUpdateManyWithWhereWithoutStructureInput | StagiaireUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: StagiaireScalarWhereInput | StagiaireScalarWhereInput[]
  }

  export type StructureUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<StructureCreateWithoutParentInput, StructureUncheckedCreateWithoutParentInput> | StructureCreateWithoutParentInput[] | StructureUncheckedCreateWithoutParentInput[]
    connectOrCreate?: StructureCreateOrConnectWithoutParentInput | StructureCreateOrConnectWithoutParentInput[]
    upsert?: StructureUpsertWithWhereUniqueWithoutParentInput | StructureUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: StructureCreateManyParentInputEnvelope
    set?: StructureWhereUniqueInput | StructureWhereUniqueInput[]
    disconnect?: StructureWhereUniqueInput | StructureWhereUniqueInput[]
    delete?: StructureWhereUniqueInput | StructureWhereUniqueInput[]
    connect?: StructureWhereUniqueInput | StructureWhereUniqueInput[]
    update?: StructureUpdateWithWhereUniqueWithoutParentInput | StructureUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: StructureUpdateManyWithWhereWithoutParentInput | StructureUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: StructureScalarWhereInput | StructureScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutStructureNestedInput = {
    create?: XOR<UserCreateWithoutStructureInput, UserUncheckedCreateWithoutStructureInput> | UserCreateWithoutStructureInput[] | UserUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStructureInput | UserCreateOrConnectWithoutStructureInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStructureInput | UserUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: UserCreateManyStructureInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStructureInput | UserUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStructureInput | UserUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TuteurUncheckedUpdateManyWithoutStructureNestedInput = {
    create?: XOR<TuteurCreateWithoutStructureInput, TuteurUncheckedCreateWithoutStructureInput> | TuteurCreateWithoutStructureInput[] | TuteurUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: TuteurCreateOrConnectWithoutStructureInput | TuteurCreateOrConnectWithoutStructureInput[]
    upsert?: TuteurUpsertWithWhereUniqueWithoutStructureInput | TuteurUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: TuteurCreateManyStructureInputEnvelope
    set?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    disconnect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    delete?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    connect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    update?: TuteurUpdateWithWhereUniqueWithoutStructureInput | TuteurUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: TuteurUpdateManyWithWhereWithoutStructureInput | TuteurUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: TuteurScalarWhereInput | TuteurScalarWhereInput[]
  }

  export type ServiceUncheckedUpdateManyWithoutStructureNestedInput = {
    create?: XOR<ServiceCreateWithoutStructureInput, ServiceUncheckedCreateWithoutStructureInput> | ServiceCreateWithoutStructureInput[] | ServiceUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutStructureInput | ServiceCreateOrConnectWithoutStructureInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutStructureInput | ServiceUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: ServiceCreateManyStructureInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutStructureInput | ServiceUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutStructureInput | ServiceUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type StageCreateNestedManyWithoutTuteurInput = {
    create?: XOR<StageCreateWithoutTuteurInput, StageUncheckedCreateWithoutTuteurInput> | StageCreateWithoutTuteurInput[] | StageUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTuteurInput | StageCreateOrConnectWithoutTuteurInput[]
    createMany?: StageCreateManyTuteurInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type StagiaireCreateNestedManyWithoutTuteurInput = {
    create?: XOR<StagiaireCreateWithoutTuteurInput, StagiaireUncheckedCreateWithoutTuteurInput> | StagiaireCreateWithoutTuteurInput[] | StagiaireUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutTuteurInput | StagiaireCreateOrConnectWithoutTuteurInput[]
    createMany?: StagiaireCreateManyTuteurInputEnvelope
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
  }

  export type ThemeTuteurCreateNestedManyWithoutTuteurInput = {
    create?: XOR<ThemeTuteurCreateWithoutTuteurInput, ThemeTuteurUncheckedCreateWithoutTuteurInput> | ThemeTuteurCreateWithoutTuteurInput[] | ThemeTuteurUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: ThemeTuteurCreateOrConnectWithoutTuteurInput | ThemeTuteurCreateOrConnectWithoutTuteurInput[]
    createMany?: ThemeTuteurCreateManyTuteurInputEnvelope
    connect?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
  }

  export type StructureCreateNestedOneWithoutTuteursInput = {
    create?: XOR<StructureCreateWithoutTuteursInput, StructureUncheckedCreateWithoutTuteursInput>
    connectOrCreate?: StructureCreateOrConnectWithoutTuteursInput
    connect?: StructureWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutTuteursInput = {
    create?: XOR<ServiceCreateWithoutTuteursInput, ServiceUncheckedCreateWithoutTuteursInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutTuteursInput
    connect?: ServiceWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTuteurInput = {
    create?: XOR<UserCreateWithoutTuteurInput, UserUncheckedCreateWithoutTuteurInput>
    connectOrCreate?: UserCreateOrConnectWithoutTuteurInput
    connect?: UserWhereUniqueInput
  }

  export type StageUncheckedCreateNestedManyWithoutTuteurInput = {
    create?: XOR<StageCreateWithoutTuteurInput, StageUncheckedCreateWithoutTuteurInput> | StageCreateWithoutTuteurInput[] | StageUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTuteurInput | StageCreateOrConnectWithoutTuteurInput[]
    createMany?: StageCreateManyTuteurInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type StagiaireUncheckedCreateNestedManyWithoutTuteurInput = {
    create?: XOR<StagiaireCreateWithoutTuteurInput, StagiaireUncheckedCreateWithoutTuteurInput> | StagiaireCreateWithoutTuteurInput[] | StagiaireUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutTuteurInput | StagiaireCreateOrConnectWithoutTuteurInput[]
    createMany?: StagiaireCreateManyTuteurInputEnvelope
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
  }

  export type ThemeTuteurUncheckedCreateNestedManyWithoutTuteurInput = {
    create?: XOR<ThemeTuteurCreateWithoutTuteurInput, ThemeTuteurUncheckedCreateWithoutTuteurInput> | ThemeTuteurCreateWithoutTuteurInput[] | ThemeTuteurUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: ThemeTuteurCreateOrConnectWithoutTuteurInput | ThemeTuteurCreateOrConnectWithoutTuteurInput[]
    createMany?: ThemeTuteurCreateManyTuteurInputEnvelope
    connect?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
  }

  export type StageUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<StageCreateWithoutTuteurInput, StageUncheckedCreateWithoutTuteurInput> | StageCreateWithoutTuteurInput[] | StageUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTuteurInput | StageCreateOrConnectWithoutTuteurInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutTuteurInput | StageUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: StageCreateManyTuteurInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutTuteurInput | StageUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: StageUpdateManyWithWhereWithoutTuteurInput | StageUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type StagiaireUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<StagiaireCreateWithoutTuteurInput, StagiaireUncheckedCreateWithoutTuteurInput> | StagiaireCreateWithoutTuteurInput[] | StagiaireUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutTuteurInput | StagiaireCreateOrConnectWithoutTuteurInput[]
    upsert?: StagiaireUpsertWithWhereUniqueWithoutTuteurInput | StagiaireUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: StagiaireCreateManyTuteurInputEnvelope
    set?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    disconnect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    delete?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    update?: StagiaireUpdateWithWhereUniqueWithoutTuteurInput | StagiaireUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: StagiaireUpdateManyWithWhereWithoutTuteurInput | StagiaireUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: StagiaireScalarWhereInput | StagiaireScalarWhereInput[]
  }

  export type ThemeTuteurUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<ThemeTuteurCreateWithoutTuteurInput, ThemeTuteurUncheckedCreateWithoutTuteurInput> | ThemeTuteurCreateWithoutTuteurInput[] | ThemeTuteurUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: ThemeTuteurCreateOrConnectWithoutTuteurInput | ThemeTuteurCreateOrConnectWithoutTuteurInput[]
    upsert?: ThemeTuteurUpsertWithWhereUniqueWithoutTuteurInput | ThemeTuteurUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: ThemeTuteurCreateManyTuteurInputEnvelope
    set?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    disconnect?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    delete?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    connect?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    update?: ThemeTuteurUpdateWithWhereUniqueWithoutTuteurInput | ThemeTuteurUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: ThemeTuteurUpdateManyWithWhereWithoutTuteurInput | ThemeTuteurUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: ThemeTuteurScalarWhereInput | ThemeTuteurScalarWhereInput[]
  }

  export type StructureUpdateOneWithoutTuteursNestedInput = {
    create?: XOR<StructureCreateWithoutTuteursInput, StructureUncheckedCreateWithoutTuteursInput>
    connectOrCreate?: StructureCreateOrConnectWithoutTuteursInput
    upsert?: StructureUpsertWithoutTuteursInput
    disconnect?: StructureWhereInput | boolean
    delete?: StructureWhereInput | boolean
    connect?: StructureWhereUniqueInput
    update?: XOR<XOR<StructureUpdateToOneWithWhereWithoutTuteursInput, StructureUpdateWithoutTuteursInput>, StructureUncheckedUpdateWithoutTuteursInput>
  }

  export type ServiceUpdateOneWithoutTuteursNestedInput = {
    create?: XOR<ServiceCreateWithoutTuteursInput, ServiceUncheckedCreateWithoutTuteursInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutTuteursInput
    upsert?: ServiceUpsertWithoutTuteursInput
    disconnect?: ServiceWhereInput | boolean
    delete?: ServiceWhereInput | boolean
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutTuteursInput, ServiceUpdateWithoutTuteursInput>, ServiceUncheckedUpdateWithoutTuteursInput>
  }

  export type UserUpdateOneRequiredWithoutTuteurNestedInput = {
    create?: XOR<UserCreateWithoutTuteurInput, UserUncheckedCreateWithoutTuteurInput>
    connectOrCreate?: UserCreateOrConnectWithoutTuteurInput
    upsert?: UserUpsertWithoutTuteurInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTuteurInput, UserUpdateWithoutTuteurInput>, UserUncheckedUpdateWithoutTuteurInput>
  }

  export type StageUncheckedUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<StageCreateWithoutTuteurInput, StageUncheckedCreateWithoutTuteurInput> | StageCreateWithoutTuteurInput[] | StageUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTuteurInput | StageCreateOrConnectWithoutTuteurInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutTuteurInput | StageUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: StageCreateManyTuteurInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutTuteurInput | StageUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: StageUpdateManyWithWhereWithoutTuteurInput | StageUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type StagiaireUncheckedUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<StagiaireCreateWithoutTuteurInput, StagiaireUncheckedCreateWithoutTuteurInput> | StagiaireCreateWithoutTuteurInput[] | StagiaireUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutTuteurInput | StagiaireCreateOrConnectWithoutTuteurInput[]
    upsert?: StagiaireUpsertWithWhereUniqueWithoutTuteurInput | StagiaireUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: StagiaireCreateManyTuteurInputEnvelope
    set?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    disconnect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    delete?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    update?: StagiaireUpdateWithWhereUniqueWithoutTuteurInput | StagiaireUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: StagiaireUpdateManyWithWhereWithoutTuteurInput | StagiaireUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: StagiaireScalarWhereInput | StagiaireScalarWhereInput[]
  }

  export type ThemeTuteurUncheckedUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<ThemeTuteurCreateWithoutTuteurInput, ThemeTuteurUncheckedCreateWithoutTuteurInput> | ThemeTuteurCreateWithoutTuteurInput[] | ThemeTuteurUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: ThemeTuteurCreateOrConnectWithoutTuteurInput | ThemeTuteurCreateOrConnectWithoutTuteurInput[]
    upsert?: ThemeTuteurUpsertWithWhereUniqueWithoutTuteurInput | ThemeTuteurUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: ThemeTuteurCreateManyTuteurInputEnvelope
    set?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    disconnect?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    delete?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    connect?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    update?: ThemeTuteurUpdateWithWhereUniqueWithoutTuteurInput | ThemeTuteurUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: ThemeTuteurUpdateManyWithWhereWithoutTuteurInput | ThemeTuteurUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: ThemeTuteurScalarWhereInput | ThemeTuteurScalarWhereInput[]
  }

  export type DemandeStageCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<DemandeStageCreateWithoutStagiaireInput, DemandeStageUncheckedCreateWithoutStagiaireInput> | DemandeStageCreateWithoutStagiaireInput[] | DemandeStageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStagiaireInput | DemandeStageCreateOrConnectWithoutStagiaireInput[]
    createMany?: DemandeStageCreateManyStagiaireInputEnvelope
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
  }

  export type StageCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<StageCreateWithoutStagiaireInput, StageUncheckedCreateWithoutStagiaireInput> | StageCreateWithoutStagiaireInput[] | StageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStagiaireInput | StageCreateOrConnectWithoutStagiaireInput[]
    createMany?: StageCreateManyStagiaireInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type StructureCreateNestedOneWithoutStagiairesInput = {
    create?: XOR<StructureCreateWithoutStagiairesInput, StructureUncheckedCreateWithoutStagiairesInput>
    connectOrCreate?: StructureCreateOrConnectWithoutStagiairesInput
    connect?: StructureWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutStagiairesInput = {
    create?: XOR<ServiceCreateWithoutStagiairesInput, ServiceUncheckedCreateWithoutStagiairesInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutStagiairesInput
    connect?: ServiceWhereUniqueInput
  }

  export type TuteurCreateNestedOneWithoutStagiairesInput = {
    create?: XOR<TuteurCreateWithoutStagiairesInput, TuteurUncheckedCreateWithoutStagiairesInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutStagiairesInput
    connect?: TuteurWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStagiaireInput = {
    create?: XOR<UserCreateWithoutStagiaireInput, UserUncheckedCreateWithoutStagiaireInput>
    connectOrCreate?: UserCreateOrConnectWithoutStagiaireInput
    connect?: UserWhereUniqueInput
  }

  export type DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<DemandeStageCreateWithoutStagiaireInput, DemandeStageUncheckedCreateWithoutStagiaireInput> | DemandeStageCreateWithoutStagiaireInput[] | DemandeStageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStagiaireInput | DemandeStageCreateOrConnectWithoutStagiaireInput[]
    createMany?: DemandeStageCreateManyStagiaireInputEnvelope
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
  }

  export type StageUncheckedCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<StageCreateWithoutStagiaireInput, StageUncheckedCreateWithoutStagiaireInput> | StageCreateWithoutStagiaireInput[] | StageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStagiaireInput | StageCreateOrConnectWithoutStagiaireInput[]
    createMany?: StageCreateManyStagiaireInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type DemandeStageUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<DemandeStageCreateWithoutStagiaireInput, DemandeStageUncheckedCreateWithoutStagiaireInput> | DemandeStageCreateWithoutStagiaireInput[] | DemandeStageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStagiaireInput | DemandeStageCreateOrConnectWithoutStagiaireInput[]
    upsert?: DemandeStageUpsertWithWhereUniqueWithoutStagiaireInput | DemandeStageUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: DemandeStageCreateManyStagiaireInputEnvelope
    set?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    disconnect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    delete?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    update?: DemandeStageUpdateWithWhereUniqueWithoutStagiaireInput | DemandeStageUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: DemandeStageUpdateManyWithWhereWithoutStagiaireInput | DemandeStageUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: DemandeStageScalarWhereInput | DemandeStageScalarWhereInput[]
  }

  export type StageUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<StageCreateWithoutStagiaireInput, StageUncheckedCreateWithoutStagiaireInput> | StageCreateWithoutStagiaireInput[] | StageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStagiaireInput | StageCreateOrConnectWithoutStagiaireInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutStagiaireInput | StageUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: StageCreateManyStagiaireInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutStagiaireInput | StageUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: StageUpdateManyWithWhereWithoutStagiaireInput | StageUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type StructureUpdateOneWithoutStagiairesNestedInput = {
    create?: XOR<StructureCreateWithoutStagiairesInput, StructureUncheckedCreateWithoutStagiairesInput>
    connectOrCreate?: StructureCreateOrConnectWithoutStagiairesInput
    upsert?: StructureUpsertWithoutStagiairesInput
    disconnect?: StructureWhereInput | boolean
    delete?: StructureWhereInput | boolean
    connect?: StructureWhereUniqueInput
    update?: XOR<XOR<StructureUpdateToOneWithWhereWithoutStagiairesInput, StructureUpdateWithoutStagiairesInput>, StructureUncheckedUpdateWithoutStagiairesInput>
  }

  export type ServiceUpdateOneWithoutStagiairesNestedInput = {
    create?: XOR<ServiceCreateWithoutStagiairesInput, ServiceUncheckedCreateWithoutStagiairesInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutStagiairesInput
    upsert?: ServiceUpsertWithoutStagiairesInput
    disconnect?: ServiceWhereInput | boolean
    delete?: ServiceWhereInput | boolean
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutStagiairesInput, ServiceUpdateWithoutStagiairesInput>, ServiceUncheckedUpdateWithoutStagiairesInput>
  }

  export type TuteurUpdateOneWithoutStagiairesNestedInput = {
    create?: XOR<TuteurCreateWithoutStagiairesInput, TuteurUncheckedCreateWithoutStagiairesInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutStagiairesInput
    upsert?: TuteurUpsertWithoutStagiairesInput
    disconnect?: TuteurWhereInput | boolean
    delete?: TuteurWhereInput | boolean
    connect?: TuteurWhereUniqueInput
    update?: XOR<XOR<TuteurUpdateToOneWithWhereWithoutStagiairesInput, TuteurUpdateWithoutStagiairesInput>, TuteurUncheckedUpdateWithoutStagiairesInput>
  }

  export type UserUpdateOneRequiredWithoutStagiaireNestedInput = {
    create?: XOR<UserCreateWithoutStagiaireInput, UserUncheckedCreateWithoutStagiaireInput>
    connectOrCreate?: UserCreateOrConnectWithoutStagiaireInput
    upsert?: UserUpsertWithoutStagiaireInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStagiaireInput, UserUpdateWithoutStagiaireInput>, UserUncheckedUpdateWithoutStagiaireInput>
  }

  export type DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<DemandeStageCreateWithoutStagiaireInput, DemandeStageUncheckedCreateWithoutStagiaireInput> | DemandeStageCreateWithoutStagiaireInput[] | DemandeStageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStagiaireInput | DemandeStageCreateOrConnectWithoutStagiaireInput[]
    upsert?: DemandeStageUpsertWithWhereUniqueWithoutStagiaireInput | DemandeStageUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: DemandeStageCreateManyStagiaireInputEnvelope
    set?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    disconnect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    delete?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    update?: DemandeStageUpdateWithWhereUniqueWithoutStagiaireInput | DemandeStageUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: DemandeStageUpdateManyWithWhereWithoutStagiaireInput | DemandeStageUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: DemandeStageScalarWhereInput | DemandeStageScalarWhereInput[]
  }

  export type StageUncheckedUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<StageCreateWithoutStagiaireInput, StageUncheckedCreateWithoutStagiaireInput> | StageCreateWithoutStagiaireInput[] | StageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStagiaireInput | StageCreateOrConnectWithoutStagiaireInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutStagiaireInput | StageUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: StageCreateManyStagiaireInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutStagiaireInput | StageUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: StageUpdateManyWithWhereWithoutStagiaireInput | StageUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type StagiaireCreateNestedOneWithoutDemandesStagesInput = {
    create?: XOR<StagiaireCreateWithoutDemandesStagesInput, StagiaireUncheckedCreateWithoutDemandesStagesInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutDemandesStagesInput
    connect?: StagiaireWhereUniqueInput
  }

  export type StructureCreateNestedOneWithoutDemandesStagesInput = {
    create?: XOR<StructureCreateWithoutDemandesStagesInput, StructureUncheckedCreateWithoutDemandesStagesInput>
    connectOrCreate?: StructureCreateOrConnectWithoutDemandesStagesInput
    connect?: StructureWhereUniqueInput
  }

  export type JournalActionCreateNestedManyWithoutDemandeStageInput = {
    create?: XOR<JournalActionCreateWithoutDemandeStageInput, JournalActionUncheckedCreateWithoutDemandeStageInput> | JournalActionCreateWithoutDemandeStageInput[] | JournalActionUncheckedCreateWithoutDemandeStageInput[]
    connectOrCreate?: JournalActionCreateOrConnectWithoutDemandeStageInput | JournalActionCreateOrConnectWithoutDemandeStageInput[]
    createMany?: JournalActionCreateManyDemandeStageInputEnvelope
    connect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
  }

  export type StageCreateNestedOneWithoutDemandeStageInput = {
    create?: XOR<StageCreateWithoutDemandeStageInput, StageUncheckedCreateWithoutDemandeStageInput>
    connectOrCreate?: StageCreateOrConnectWithoutDemandeStageInput
    connect?: StageWhereUniqueInput
  }

  export type JournalActionUncheckedCreateNestedManyWithoutDemandeStageInput = {
    create?: XOR<JournalActionCreateWithoutDemandeStageInput, JournalActionUncheckedCreateWithoutDemandeStageInput> | JournalActionCreateWithoutDemandeStageInput[] | JournalActionUncheckedCreateWithoutDemandeStageInput[]
    connectOrCreate?: JournalActionCreateOrConnectWithoutDemandeStageInput | JournalActionCreateOrConnectWithoutDemandeStageInput[]
    createMany?: JournalActionCreateManyDemandeStageInputEnvelope
    connect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
  }

  export type StageUncheckedCreateNestedOneWithoutDemandeStageInput = {
    create?: XOR<StageCreateWithoutDemandeStageInput, StageUncheckedCreateWithoutDemandeStageInput>
    connectOrCreate?: StageCreateOrConnectWithoutDemandeStageInput
    connect?: StageWhereUniqueInput
  }

  export type EnumStatutDemandeFieldUpdateOperationsInput = {
    set?: $Enums.StatutDemande
  }

  export type StagiaireUpdateOneRequiredWithoutDemandesStagesNestedInput = {
    create?: XOR<StagiaireCreateWithoutDemandesStagesInput, StagiaireUncheckedCreateWithoutDemandesStagesInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutDemandesStagesInput
    upsert?: StagiaireUpsertWithoutDemandesStagesInput
    connect?: StagiaireWhereUniqueInput
    update?: XOR<XOR<StagiaireUpdateToOneWithWhereWithoutDemandesStagesInput, StagiaireUpdateWithoutDemandesStagesInput>, StagiaireUncheckedUpdateWithoutDemandesStagesInput>
  }

  export type StructureUpdateOneWithoutDemandesStagesNestedInput = {
    create?: XOR<StructureCreateWithoutDemandesStagesInput, StructureUncheckedCreateWithoutDemandesStagesInput>
    connectOrCreate?: StructureCreateOrConnectWithoutDemandesStagesInput
    upsert?: StructureUpsertWithoutDemandesStagesInput
    disconnect?: StructureWhereInput | boolean
    delete?: StructureWhereInput | boolean
    connect?: StructureWhereUniqueInput
    update?: XOR<XOR<StructureUpdateToOneWithWhereWithoutDemandesStagesInput, StructureUpdateWithoutDemandesStagesInput>, StructureUncheckedUpdateWithoutDemandesStagesInput>
  }

  export type JournalActionUpdateManyWithoutDemandeStageNestedInput = {
    create?: XOR<JournalActionCreateWithoutDemandeStageInput, JournalActionUncheckedCreateWithoutDemandeStageInput> | JournalActionCreateWithoutDemandeStageInput[] | JournalActionUncheckedCreateWithoutDemandeStageInput[]
    connectOrCreate?: JournalActionCreateOrConnectWithoutDemandeStageInput | JournalActionCreateOrConnectWithoutDemandeStageInput[]
    upsert?: JournalActionUpsertWithWhereUniqueWithoutDemandeStageInput | JournalActionUpsertWithWhereUniqueWithoutDemandeStageInput[]
    createMany?: JournalActionCreateManyDemandeStageInputEnvelope
    set?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    disconnect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    delete?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    connect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    update?: JournalActionUpdateWithWhereUniqueWithoutDemandeStageInput | JournalActionUpdateWithWhereUniqueWithoutDemandeStageInput[]
    updateMany?: JournalActionUpdateManyWithWhereWithoutDemandeStageInput | JournalActionUpdateManyWithWhereWithoutDemandeStageInput[]
    deleteMany?: JournalActionScalarWhereInput | JournalActionScalarWhereInput[]
  }

  export type StageUpdateOneWithoutDemandeStageNestedInput = {
    create?: XOR<StageCreateWithoutDemandeStageInput, StageUncheckedCreateWithoutDemandeStageInput>
    connectOrCreate?: StageCreateOrConnectWithoutDemandeStageInput
    upsert?: StageUpsertWithoutDemandeStageInput
    disconnect?: StageWhereInput | boolean
    delete?: StageWhereInput | boolean
    connect?: StageWhereUniqueInput
    update?: XOR<XOR<StageUpdateToOneWithWhereWithoutDemandeStageInput, StageUpdateWithoutDemandeStageInput>, StageUncheckedUpdateWithoutDemandeStageInput>
  }

  export type JournalActionUncheckedUpdateManyWithoutDemandeStageNestedInput = {
    create?: XOR<JournalActionCreateWithoutDemandeStageInput, JournalActionUncheckedCreateWithoutDemandeStageInput> | JournalActionCreateWithoutDemandeStageInput[] | JournalActionUncheckedCreateWithoutDemandeStageInput[]
    connectOrCreate?: JournalActionCreateOrConnectWithoutDemandeStageInput | JournalActionCreateOrConnectWithoutDemandeStageInput[]
    upsert?: JournalActionUpsertWithWhereUniqueWithoutDemandeStageInput | JournalActionUpsertWithWhereUniqueWithoutDemandeStageInput[]
    createMany?: JournalActionCreateManyDemandeStageInputEnvelope
    set?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    disconnect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    delete?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    connect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    update?: JournalActionUpdateWithWhereUniqueWithoutDemandeStageInput | JournalActionUpdateWithWhereUniqueWithoutDemandeStageInput[]
    updateMany?: JournalActionUpdateManyWithWhereWithoutDemandeStageInput | JournalActionUpdateManyWithWhereWithoutDemandeStageInput[]
    deleteMany?: JournalActionScalarWhereInput | JournalActionScalarWhereInput[]
  }

  export type StageUncheckedUpdateOneWithoutDemandeStageNestedInput = {
    create?: XOR<StageCreateWithoutDemandeStageInput, StageUncheckedCreateWithoutDemandeStageInput>
    connectOrCreate?: StageCreateOrConnectWithoutDemandeStageInput
    upsert?: StageUpsertWithoutDemandeStageInput
    disconnect?: StageWhereInput | boolean
    delete?: StageWhereInput | boolean
    connect?: StageWhereUniqueInput
    update?: XOR<XOR<StageUpdateToOneWithWhereWithoutDemandeStageInput, StageUpdateWithoutDemandeStageInput>, StageUncheckedUpdateWithoutDemandeStageInput>
  }

  export type DemandeStageCreateNestedOneWithoutStageInput = {
    create?: XOR<DemandeStageCreateWithoutStageInput, DemandeStageUncheckedCreateWithoutStageInput>
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStageInput
    connect?: DemandeStageWhereUniqueInput
  }

  export type StagiaireCreateNestedOneWithoutStagesInput = {
    create?: XOR<StagiaireCreateWithoutStagesInput, StagiaireUncheckedCreateWithoutStagesInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutStagesInput
    connect?: StagiaireWhereUniqueInput
  }

  export type StructureCreateNestedOneWithoutStagesInput = {
    create?: XOR<StructureCreateWithoutStagesInput, StructureUncheckedCreateWithoutStagesInput>
    connectOrCreate?: StructureCreateOrConnectWithoutStagesInput
    connect?: StructureWhereUniqueInput
  }

  export type TuteurCreateNestedOneWithoutStagesInput = {
    create?: XOR<TuteurCreateWithoutStagesInput, TuteurUncheckedCreateWithoutStagesInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutStagesInput
    connect?: TuteurWhereUniqueInput
  }

  export type EnumStatutStageFieldUpdateOperationsInput = {
    set?: $Enums.StatutStage
  }

  export type DemandeStageUpdateOneRequiredWithoutStageNestedInput = {
    create?: XOR<DemandeStageCreateWithoutStageInput, DemandeStageUncheckedCreateWithoutStageInput>
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStageInput
    upsert?: DemandeStageUpsertWithoutStageInput
    connect?: DemandeStageWhereUniqueInput
    update?: XOR<XOR<DemandeStageUpdateToOneWithWhereWithoutStageInput, DemandeStageUpdateWithoutStageInput>, DemandeStageUncheckedUpdateWithoutStageInput>
  }

  export type StagiaireUpdateOneRequiredWithoutStagesNestedInput = {
    create?: XOR<StagiaireCreateWithoutStagesInput, StagiaireUncheckedCreateWithoutStagesInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutStagesInput
    upsert?: StagiaireUpsertWithoutStagesInput
    connect?: StagiaireWhereUniqueInput
    update?: XOR<XOR<StagiaireUpdateToOneWithWhereWithoutStagesInput, StagiaireUpdateWithoutStagesInput>, StagiaireUncheckedUpdateWithoutStagesInput>
  }

  export type StructureUpdateOneRequiredWithoutStagesNestedInput = {
    create?: XOR<StructureCreateWithoutStagesInput, StructureUncheckedCreateWithoutStagesInput>
    connectOrCreate?: StructureCreateOrConnectWithoutStagesInput
    upsert?: StructureUpsertWithoutStagesInput
    connect?: StructureWhereUniqueInput
    update?: XOR<XOR<StructureUpdateToOneWithWhereWithoutStagesInput, StructureUpdateWithoutStagesInput>, StructureUncheckedUpdateWithoutStagesInput>
  }

  export type TuteurUpdateOneRequiredWithoutStagesNestedInput = {
    create?: XOR<TuteurCreateWithoutStagesInput, TuteurUncheckedCreateWithoutStagesInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutStagesInput
    upsert?: TuteurUpsertWithoutStagesInput
    connect?: TuteurWhereUniqueInput
    update?: XOR<XOR<TuteurUpdateToOneWithWhereWithoutStagesInput, TuteurUpdateWithoutStagesInput>, TuteurUncheckedUpdateWithoutStagesInput>
  }

  export type UserCreateNestedOneWithoutMessagesRecusInput = {
    create?: XOR<UserCreateWithoutMessagesRecusInput, UserUncheckedCreateWithoutMessagesRecusInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesRecusInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMessagesSentInput = {
    create?: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesSentInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMessagesRecusNestedInput = {
    create?: XOR<UserCreateWithoutMessagesRecusInput, UserUncheckedCreateWithoutMessagesRecusInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesRecusInput
    upsert?: UserUpsertWithoutMessagesRecusInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesRecusInput, UserUpdateWithoutMessagesRecusInput>, UserUncheckedUpdateWithoutMessagesRecusInput>
  }

  export type UserUpdateOneRequiredWithoutMessagesSentNestedInput = {
    create?: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesSentInput
    upsert?: UserUpsertWithoutMessagesSentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesSentInput, UserUpdateWithoutMessagesSentInput>, UserUncheckedUpdateWithoutMessagesSentInput>
  }

  export type TuteurCreateNestedOneWithoutThemesInput = {
    create?: XOR<TuteurCreateWithoutThemesInput, TuteurUncheckedCreateWithoutThemesInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutThemesInput
    connect?: TuteurWhereUniqueInput
  }

  export type TuteurUpdateOneRequiredWithoutThemesNestedInput = {
    create?: XOR<TuteurCreateWithoutThemesInput, TuteurUncheckedCreateWithoutThemesInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutThemesInput
    upsert?: TuteurUpsertWithoutThemesInput
    connect?: TuteurWhereUniqueInput
    update?: XOR<XOR<TuteurUpdateToOneWithWhereWithoutThemesInput, TuteurUpdateWithoutThemesInput>, TuteurUncheckedUpdateWithoutThemesInput>
  }

  export type DemandeStageCreateNestedOneWithoutJournalActionsInput = {
    create?: XOR<DemandeStageCreateWithoutJournalActionsInput, DemandeStageUncheckedCreateWithoutJournalActionsInput>
    connectOrCreate?: DemandeStageCreateOrConnectWithoutJournalActionsInput
    connect?: DemandeStageWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutJournalActionsInput = {
    create?: XOR<UserCreateWithoutJournalActionsInput, UserUncheckedCreateWithoutJournalActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutJournalActionsInput
    connect?: UserWhereUniqueInput
  }

  export type DemandeStageUpdateOneWithoutJournalActionsNestedInput = {
    create?: XOR<DemandeStageCreateWithoutJournalActionsInput, DemandeStageUncheckedCreateWithoutJournalActionsInput>
    connectOrCreate?: DemandeStageCreateOrConnectWithoutJournalActionsInput
    upsert?: DemandeStageUpsertWithoutJournalActionsInput
    disconnect?: DemandeStageWhereInput | boolean
    delete?: DemandeStageWhereInput | boolean
    connect?: DemandeStageWhereUniqueInput
    update?: XOR<XOR<DemandeStageUpdateToOneWithWhereWithoutJournalActionsInput, DemandeStageUpdateWithoutJournalActionsInput>, DemandeStageUncheckedUpdateWithoutJournalActionsInput>
  }

  export type UserUpdateOneRequiredWithoutJournalActionsNestedInput = {
    create?: XOR<UserCreateWithoutJournalActionsInput, UserUncheckedCreateWithoutJournalActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutJournalActionsInput
    upsert?: UserUpsertWithoutJournalActionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutJournalActionsInput, UserUpdateWithoutJournalActionsInput>, UserUncheckedUpdateWithoutJournalActionsInput>
  }

  export type UserCreateNestedOneWithoutDemandesStageInput = {
    create?: XOR<UserCreateWithoutDemandesStageInput, UserUncheckedCreateWithoutDemandesStageInput>
    connectOrCreate?: UserCreateOrConnectWithoutDemandesStageInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDemandesStageNestedInput = {
    create?: XOR<UserCreateWithoutDemandesStageInput, UserUncheckedCreateWithoutDemandesStageInput>
    connectOrCreate?: UserCreateOrConnectWithoutDemandesStageInput
    upsert?: UserUpsertWithoutDemandesStageInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDemandesStageInput, UserUpdateWithoutDemandesStageInput>, UserUncheckedUpdateWithoutDemandesStageInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableEnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole | null
  }

  export type UserUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutEvaluationsAsStagiaireInput = {
    create?: XOR<UserCreateWithoutEvaluationsAsStagiaireInput, UserUncheckedCreateWithoutEvaluationsAsStagiaireInput>
    connectOrCreate?: UserCreateOrConnectWithoutEvaluationsAsStagiaireInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEvaluationsAsTuteurInput = {
    create?: XOR<UserCreateWithoutEvaluationsAsTuteurInput, UserUncheckedCreateWithoutEvaluationsAsTuteurInput>
    connectOrCreate?: UserCreateOrConnectWithoutEvaluationsAsTuteurInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEvaluationsAsStagiaireNestedInput = {
    create?: XOR<UserCreateWithoutEvaluationsAsStagiaireInput, UserUncheckedCreateWithoutEvaluationsAsStagiaireInput>
    connectOrCreate?: UserCreateOrConnectWithoutEvaluationsAsStagiaireInput
    upsert?: UserUpsertWithoutEvaluationsAsStagiaireInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEvaluationsAsStagiaireInput, UserUpdateWithoutEvaluationsAsStagiaireInput>, UserUncheckedUpdateWithoutEvaluationsAsStagiaireInput>
  }

  export type UserUpdateOneRequiredWithoutEvaluationsAsTuteurNestedInput = {
    create?: XOR<UserCreateWithoutEvaluationsAsTuteurInput, UserUncheckedCreateWithoutEvaluationsAsTuteurInput>
    connectOrCreate?: UserCreateOrConnectWithoutEvaluationsAsTuteurInput
    upsert?: UserUpsertWithoutEvaluationsAsTuteurInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEvaluationsAsTuteurInput, UserUpdateWithoutEvaluationsAsTuteurInput>, UserUncheckedUpdateWithoutEvaluationsAsTuteurInput>
  }

  export type UserCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    upsert?: UserUpsertWithoutDocumentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentsInput, UserUpdateWithoutDocumentsInput>, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type StructureCreateNestedOneWithoutServicesInput = {
    create?: XOR<StructureCreateWithoutServicesInput, StructureUncheckedCreateWithoutServicesInput>
    connectOrCreate?: StructureCreateOrConnectWithoutServicesInput
    connect?: StructureWhereUniqueInput
  }

  export type TuteurCreateNestedManyWithoutServiceInput = {
    create?: XOR<TuteurCreateWithoutServiceInput, TuteurUncheckedCreateWithoutServiceInput> | TuteurCreateWithoutServiceInput[] | TuteurUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: TuteurCreateOrConnectWithoutServiceInput | TuteurCreateOrConnectWithoutServiceInput[]
    createMany?: TuteurCreateManyServiceInputEnvelope
    connect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
  }

  export type StagiaireCreateNestedManyWithoutServiceInput = {
    create?: XOR<StagiaireCreateWithoutServiceInput, StagiaireUncheckedCreateWithoutServiceInput> | StagiaireCreateWithoutServiceInput[] | StagiaireUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutServiceInput | StagiaireCreateOrConnectWithoutServiceInput[]
    createMany?: StagiaireCreateManyServiceInputEnvelope
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
  }

  export type TuteurUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<TuteurCreateWithoutServiceInput, TuteurUncheckedCreateWithoutServiceInput> | TuteurCreateWithoutServiceInput[] | TuteurUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: TuteurCreateOrConnectWithoutServiceInput | TuteurCreateOrConnectWithoutServiceInput[]
    createMany?: TuteurCreateManyServiceInputEnvelope
    connect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
  }

  export type StagiaireUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<StagiaireCreateWithoutServiceInput, StagiaireUncheckedCreateWithoutServiceInput> | StagiaireCreateWithoutServiceInput[] | StagiaireUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutServiceInput | StagiaireCreateOrConnectWithoutServiceInput[]
    createMany?: StagiaireCreateManyServiceInputEnvelope
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
  }

  export type StructureUpdateOneRequiredWithoutServicesNestedInput = {
    create?: XOR<StructureCreateWithoutServicesInput, StructureUncheckedCreateWithoutServicesInput>
    connectOrCreate?: StructureCreateOrConnectWithoutServicesInput
    upsert?: StructureUpsertWithoutServicesInput
    connect?: StructureWhereUniqueInput
    update?: XOR<XOR<StructureUpdateToOneWithWhereWithoutServicesInput, StructureUpdateWithoutServicesInput>, StructureUncheckedUpdateWithoutServicesInput>
  }

  export type TuteurUpdateManyWithoutServiceNestedInput = {
    create?: XOR<TuteurCreateWithoutServiceInput, TuteurUncheckedCreateWithoutServiceInput> | TuteurCreateWithoutServiceInput[] | TuteurUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: TuteurCreateOrConnectWithoutServiceInput | TuteurCreateOrConnectWithoutServiceInput[]
    upsert?: TuteurUpsertWithWhereUniqueWithoutServiceInput | TuteurUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: TuteurCreateManyServiceInputEnvelope
    set?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    disconnect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    delete?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    connect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    update?: TuteurUpdateWithWhereUniqueWithoutServiceInput | TuteurUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: TuteurUpdateManyWithWhereWithoutServiceInput | TuteurUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: TuteurScalarWhereInput | TuteurScalarWhereInput[]
  }

  export type StagiaireUpdateManyWithoutServiceNestedInput = {
    create?: XOR<StagiaireCreateWithoutServiceInput, StagiaireUncheckedCreateWithoutServiceInput> | StagiaireCreateWithoutServiceInput[] | StagiaireUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutServiceInput | StagiaireCreateOrConnectWithoutServiceInput[]
    upsert?: StagiaireUpsertWithWhereUniqueWithoutServiceInput | StagiaireUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: StagiaireCreateManyServiceInputEnvelope
    set?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    disconnect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    delete?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    update?: StagiaireUpdateWithWhereUniqueWithoutServiceInput | StagiaireUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: StagiaireUpdateManyWithWhereWithoutServiceInput | StagiaireUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: StagiaireScalarWhereInput | StagiaireScalarWhereInput[]
  }

  export type TuteurUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<TuteurCreateWithoutServiceInput, TuteurUncheckedCreateWithoutServiceInput> | TuteurCreateWithoutServiceInput[] | TuteurUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: TuteurCreateOrConnectWithoutServiceInput | TuteurCreateOrConnectWithoutServiceInput[]
    upsert?: TuteurUpsertWithWhereUniqueWithoutServiceInput | TuteurUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: TuteurCreateManyServiceInputEnvelope
    set?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    disconnect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    delete?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    connect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    update?: TuteurUpdateWithWhereUniqueWithoutServiceInput | TuteurUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: TuteurUpdateManyWithWhereWithoutServiceInput | TuteurUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: TuteurScalarWhereInput | TuteurScalarWhereInput[]
  }

  export type StagiaireUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<StagiaireCreateWithoutServiceInput, StagiaireUncheckedCreateWithoutServiceInput> | StagiaireCreateWithoutServiceInput[] | StagiaireUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutServiceInput | StagiaireCreateOrConnectWithoutServiceInput[]
    upsert?: StagiaireUpsertWithWhereUniqueWithoutServiceInput | StagiaireUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: StagiaireCreateManyServiceInputEnvelope
    set?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    disconnect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    delete?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    update?: StagiaireUpdateWithWhereUniqueWithoutServiceInput | StagiaireUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: StagiaireUpdateManyWithWhereWithoutServiceInput | StagiaireUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: StagiaireScalarWhereInput | StagiaireScalarWhereInput[]
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumStatutDemandeFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutDemande | EnumStatutDemandeFieldRefInput<$PrismaModel>
    in?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutDemandeFilter<$PrismaModel> | $Enums.StatutDemande
  }

  export type NestedEnumStatutDemandeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutDemande | EnumStatutDemandeFieldRefInput<$PrismaModel>
    in?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutDemandeWithAggregatesFilter<$PrismaModel> | $Enums.StatutDemande
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutDemandeFilter<$PrismaModel>
    _max?: NestedEnumStatutDemandeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumStatutStageFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutStage | EnumStatutStageFieldRefInput<$PrismaModel>
    in?: $Enums.StatutStage[] | ListEnumStatutStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutStage[] | ListEnumStatutStageFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutStageFilter<$PrismaModel> | $Enums.StatutStage
  }

  export type NestedEnumStatutStageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutStage | EnumStatutStageFieldRefInput<$PrismaModel>
    in?: $Enums.StatutStage[] | ListEnumStatutStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutStage[] | ListEnumStatutStageFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutStageWithAggregatesFilter<$PrismaModel> | $Enums.StatutStage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutStageFilter<$PrismaModel>
    _max?: NestedEnumStatutStageFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
  }

  export type NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StageRequestCreateWithoutStagiaireInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    type: string
    departement: string
    dateDebut: Date | string
    dateFin: Date | string
    motivation: string
    competences: string
    experience: string
    universite: string
    domaineEtude: string
    anneeEtude: string
    code_suivi?: string | null
    photo?: string | null
    candidate2Email?: string | null
    candidate2Photo?: string | null
    requiresSecondCandidateValidation?: boolean
    secondCandidateValidated?: boolean
    secondCandidateUserId?: string | null
    secondCandidateValidationToken?: string | null
    secondCandidateValidationExpiresAt?: Date | string | null
    cv?: string | null
    lettreMotivation?: string | null
    carteIdentite?: string | null
    inscriptionUniversitaire?: string | null
    recommandation?: string | null
    autresDocuments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StageRequestUncheckedCreateWithoutStagiaireInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    type: string
    departement: string
    dateDebut: Date | string
    dateFin: Date | string
    motivation: string
    competences: string
    experience: string
    universite: string
    domaineEtude: string
    anneeEtude: string
    code_suivi?: string | null
    photo?: string | null
    candidate2Email?: string | null
    candidate2Photo?: string | null
    requiresSecondCandidateValidation?: boolean
    secondCandidateValidated?: boolean
    secondCandidateUserId?: string | null
    secondCandidateValidationToken?: string | null
    secondCandidateValidationExpiresAt?: Date | string | null
    cv?: string | null
    lettreMotivation?: string | null
    carteIdentite?: string | null
    inscriptionUniversitaire?: string | null
    recommandation?: string | null
    autresDocuments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StageRequestCreateOrConnectWithoutStagiaireInput = {
    where: StageRequestWhereUniqueInput
    create: XOR<StageRequestCreateWithoutStagiaireInput, StageRequestUncheckedCreateWithoutStagiaireInput>
  }

  export type StageRequestCreateManyStagiaireInputEnvelope = {
    data: StageRequestCreateManyStagiaireInput | StageRequestCreateManyStagiaireInput[]
    skipDuplicates?: boolean
  }

  export type DPAFCreateWithoutUserInput = {
    id?: string
  }

  export type DPAFUncheckedCreateWithoutUserInput = {
    id?: string
  }

  export type DPAFCreateOrConnectWithoutUserInput = {
    where: DPAFWhereUniqueInput
    create: XOR<DPAFCreateWithoutUserInput, DPAFUncheckedCreateWithoutUserInput>
  }

  export type JournalActionCreateWithoutUserInput = {
    id?: string
    action: string
    cible: string
    timestamp?: Date | string
    demandeStage?: DemandeStageCreateNestedOneWithoutJournalActionsInput
  }

  export type JournalActionUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    cible: string
    timestamp?: Date | string
    demandeStageId?: string | null
  }

  export type JournalActionCreateOrConnectWithoutUserInput = {
    where: JournalActionWhereUniqueInput
    create: XOR<JournalActionCreateWithoutUserInput, JournalActionUncheckedCreateWithoutUserInput>
  }

  export type JournalActionCreateManyUserInputEnvelope = {
    data: JournalActionCreateManyUserInput | JournalActionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutDestinataireInput = {
    id?: string
    contenu: string
    lu?: boolean
    createdAt?: Date | string
    expediteur: UserCreateNestedOneWithoutMessagesSentInput
  }

  export type MessageUncheckedCreateWithoutDestinataireInput = {
    id?: string
    expediteurId: string
    contenu: string
    lu?: boolean
    createdAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutDestinataireInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutDestinataireInput, MessageUncheckedCreateWithoutDestinataireInput>
  }

  export type MessageCreateManyDestinataireInputEnvelope = {
    data: MessageCreateManyDestinataireInput | MessageCreateManyDestinataireInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutExpediteurInput = {
    id?: string
    contenu: string
    lu?: boolean
    createdAt?: Date | string
    destinataire: UserCreateNestedOneWithoutMessagesRecusInput
  }

  export type MessageUncheckedCreateWithoutExpediteurInput = {
    id?: string
    destinataireId: string
    contenu: string
    lu?: boolean
    createdAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutExpediteurInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutExpediteurInput, MessageUncheckedCreateWithoutExpediteurInput>
  }

  export type MessageCreateManyExpediteurInputEnvelope = {
    data: MessageCreateManyExpediteurInput | MessageCreateManyExpediteurInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    message: string
    role?: $Enums.UserRole | null
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    message: string
    role?: $Enums.UserRole | null
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    nom: string
    prenom: string
    telephone?: string | null
    avatar?: string | null
    birthDate?: Date | string | null
    school?: string | null
    major?: string | null
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    nom: string
    prenom: string
    telephone?: string | null
    avatar?: string | null
    birthDate?: Date | string | null
    school?: string | null
    major?: string | null
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type StagiaireCreateWithoutUserInput = {
    id?: string
    demandesStages?: DemandeStageCreateNestedManyWithoutStagiaireInput
    stages?: StageCreateNestedManyWithoutStagiaireInput
    structure?: StructureCreateNestedOneWithoutStagiairesInput
    service?: ServiceCreateNestedOneWithoutStagiairesInput
    tuteur?: TuteurCreateNestedOneWithoutStagiairesInput
  }

  export type StagiaireUncheckedCreateWithoutUserInput = {
    id?: string
    structureAffecteeId?: number | null
    serviceAffecteId?: number | null
    tuteurId?: string | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput
    stages?: StageUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireCreateOrConnectWithoutUserInput = {
    where: StagiaireWhereUniqueInput
    create: XOR<StagiaireCreateWithoutUserInput, StagiaireUncheckedCreateWithoutUserInput>
  }

  export type StructureCreateWithoutUsersInput = {
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    demandesStages?: DemandeStageCreateNestedManyWithoutStructureCibleInput
    stages?: StageCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireCreateNestedManyWithoutStructureInput
    parent?: StructureCreateNestedOneWithoutChildrenInput
    children?: StructureCreateNestedManyWithoutParentInput
    tuteurs?: TuteurCreateNestedManyWithoutStructureInput
    services?: ServiceCreateNestedManyWithoutStructureInput
  }

  export type StructureUncheckedCreateWithoutUsersInput = {
    id?: number
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: number | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput
    stages?: StageUncheckedCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutStructureInput
    children?: StructureUncheckedCreateNestedManyWithoutParentInput
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutStructureInput
    services?: ServiceUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructureCreateOrConnectWithoutUsersInput = {
    where: StructureWhereUniqueInput
    create: XOR<StructureCreateWithoutUsersInput, StructureUncheckedCreateWithoutUsersInput>
  }

  export type TuteurCreateWithoutUserInput = {
    id?: string
    stages?: StageCreateNestedManyWithoutTuteurInput
    stagiaires?: StagiaireCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurCreateNestedManyWithoutTuteurInput
    structure?: StructureCreateNestedOneWithoutTuteursInput
    service?: ServiceCreateNestedOneWithoutTuteursInput
  }

  export type TuteurUncheckedCreateWithoutUserInput = {
    id?: string
    structureId?: number | null
    serviceId?: number | null
    stages?: StageUncheckedCreateNestedManyWithoutTuteurInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurUncheckedCreateNestedManyWithoutTuteurInput
  }

  export type TuteurCreateOrConnectWithoutUserInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutUserInput, TuteurUncheckedCreateWithoutUserInput>
  }

  export type EvaluationCreateWithoutTuteurInput = {
    id?: string
    criteres: JsonNullValueInput | InputJsonValue
    commentaire?: string | null
    createdAt?: Date | string
    stagiaire: UserCreateNestedOneWithoutEvaluationsAsStagiaireInput
  }

  export type EvaluationUncheckedCreateWithoutTuteurInput = {
    id?: string
    stagiaireId: string
    criteres: JsonNullValueInput | InputJsonValue
    commentaire?: string | null
    createdAt?: Date | string
  }

  export type EvaluationCreateOrConnectWithoutTuteurInput = {
    where: EvaluationWhereUniqueInput
    create: XOR<EvaluationCreateWithoutTuteurInput, EvaluationUncheckedCreateWithoutTuteurInput>
  }

  export type EvaluationCreateManyTuteurInputEnvelope = {
    data: EvaluationCreateManyTuteurInput | EvaluationCreateManyTuteurInput[]
    skipDuplicates?: boolean
  }

  export type EvaluationCreateWithoutStagiaireInput = {
    id?: string
    criteres: JsonNullValueInput | InputJsonValue
    commentaire?: string | null
    createdAt?: Date | string
    tuteur: UserCreateNestedOneWithoutEvaluationsAsTuteurInput
  }

  export type EvaluationUncheckedCreateWithoutStagiaireInput = {
    id?: string
    tuteurId: string
    criteres: JsonNullValueInput | InputJsonValue
    commentaire?: string | null
    createdAt?: Date | string
  }

  export type EvaluationCreateOrConnectWithoutStagiaireInput = {
    where: EvaluationWhereUniqueInput
    create: XOR<EvaluationCreateWithoutStagiaireInput, EvaluationUncheckedCreateWithoutStagiaireInput>
  }

  export type EvaluationCreateManyStagiaireInputEnvelope = {
    data: EvaluationCreateManyStagiaireInput | EvaluationCreateManyStagiaireInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutUserInput = {
    id?: string
    type: string
    name: string
    path: string
    uploadedAt?: Date | string
  }

  export type DocumentUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    name: string
    path: string
    uploadedAt?: Date | string
  }

  export type DocumentCreateOrConnectWithoutUserInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput>
  }

  export type DocumentCreateManyUserInputEnvelope = {
    data: DocumentCreateManyUserInput | DocumentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StageRequestUpsertWithWhereUniqueWithoutStagiaireInput = {
    where: StageRequestWhereUniqueInput
    update: XOR<StageRequestUpdateWithoutStagiaireInput, StageRequestUncheckedUpdateWithoutStagiaireInput>
    create: XOR<StageRequestCreateWithoutStagiaireInput, StageRequestUncheckedCreateWithoutStagiaireInput>
  }

  export type StageRequestUpdateWithWhereUniqueWithoutStagiaireInput = {
    where: StageRequestWhereUniqueInput
    data: XOR<StageRequestUpdateWithoutStagiaireInput, StageRequestUncheckedUpdateWithoutStagiaireInput>
  }

  export type StageRequestUpdateManyWithWhereWithoutStagiaireInput = {
    where: StageRequestScalarWhereInput
    data: XOR<StageRequestUpdateManyMutationInput, StageRequestUncheckedUpdateManyWithoutStagiaireInput>
  }

  export type StageRequestScalarWhereInput = {
    AND?: StageRequestScalarWhereInput | StageRequestScalarWhereInput[]
    OR?: StageRequestScalarWhereInput[]
    NOT?: StageRequestScalarWhereInput | StageRequestScalarWhereInput[]
    id?: UuidFilter<"StageRequest"> | string
    createdAt?: DateTimeFilter<"StageRequest"> | Date | string
    updatedAt?: DateTimeFilter<"StageRequest"> | Date | string
    status?: StringFilter<"StageRequest"> | string
    type?: StringFilter<"StageRequest"> | string
    departement?: StringFilter<"StageRequest"> | string
    dateDebut?: DateTimeFilter<"StageRequest"> | Date | string
    dateFin?: DateTimeFilter<"StageRequest"> | Date | string
    motivation?: StringFilter<"StageRequest"> | string
    competences?: StringFilter<"StageRequest"> | string
    experience?: StringFilter<"StageRequest"> | string
    universite?: StringFilter<"StageRequest"> | string
    domaineEtude?: StringFilter<"StageRequest"> | string
    anneeEtude?: StringFilter<"StageRequest"> | string
    code_suivi?: StringNullableFilter<"StageRequest"> | string | null
    photo?: StringNullableFilter<"StageRequest"> | string | null
    candidate2Email?: StringNullableFilter<"StageRequest"> | string | null
    candidate2Photo?: StringNullableFilter<"StageRequest"> | string | null
    requiresSecondCandidateValidation?: BoolFilter<"StageRequest"> | boolean
    secondCandidateValidated?: BoolFilter<"StageRequest"> | boolean
    secondCandidateUserId?: UuidNullableFilter<"StageRequest"> | string | null
    secondCandidateValidationToken?: StringNullableFilter<"StageRequest"> | string | null
    secondCandidateValidationExpiresAt?: DateTimeNullableFilter<"StageRequest"> | Date | string | null
    stagiaireId?: UuidFilter<"StageRequest"> | string
    cv?: StringNullableFilter<"StageRequest"> | string | null
    lettreMotivation?: StringNullableFilter<"StageRequest"> | string | null
    carteIdentite?: StringNullableFilter<"StageRequest"> | string | null
    inscriptionUniversitaire?: StringNullableFilter<"StageRequest"> | string | null
    recommandation?: StringNullableFilter<"StageRequest"> | string | null
    autresDocuments?: JsonNullableFilter<"StageRequest">
  }

  export type DPAFUpsertWithoutUserInput = {
    update: XOR<DPAFUpdateWithoutUserInput, DPAFUncheckedUpdateWithoutUserInput>
    create: XOR<DPAFCreateWithoutUserInput, DPAFUncheckedCreateWithoutUserInput>
    where?: DPAFWhereInput
  }

  export type DPAFUpdateToOneWithWhereWithoutUserInput = {
    where?: DPAFWhereInput
    data: XOR<DPAFUpdateWithoutUserInput, DPAFUncheckedUpdateWithoutUserInput>
  }

  export type DPAFUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type DPAFUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type JournalActionUpsertWithWhereUniqueWithoutUserInput = {
    where: JournalActionWhereUniqueInput
    update: XOR<JournalActionUpdateWithoutUserInput, JournalActionUncheckedUpdateWithoutUserInput>
    create: XOR<JournalActionCreateWithoutUserInput, JournalActionUncheckedCreateWithoutUserInput>
  }

  export type JournalActionUpdateWithWhereUniqueWithoutUserInput = {
    where: JournalActionWhereUniqueInput
    data: XOR<JournalActionUpdateWithoutUserInput, JournalActionUncheckedUpdateWithoutUserInput>
  }

  export type JournalActionUpdateManyWithWhereWithoutUserInput = {
    where: JournalActionScalarWhereInput
    data: XOR<JournalActionUpdateManyMutationInput, JournalActionUncheckedUpdateManyWithoutUserInput>
  }

  export type JournalActionScalarWhereInput = {
    AND?: JournalActionScalarWhereInput | JournalActionScalarWhereInput[]
    OR?: JournalActionScalarWhereInput[]
    NOT?: JournalActionScalarWhereInput | JournalActionScalarWhereInput[]
    id?: UuidFilter<"JournalAction"> | string
    userId?: UuidFilter<"JournalAction"> | string
    action?: StringFilter<"JournalAction"> | string
    cible?: StringFilter<"JournalAction"> | string
    timestamp?: DateTimeFilter<"JournalAction"> | Date | string
    demandeStageId?: UuidNullableFilter<"JournalAction"> | string | null
  }

  export type MessageUpsertWithWhereUniqueWithoutDestinataireInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutDestinataireInput, MessageUncheckedUpdateWithoutDestinataireInput>
    create: XOR<MessageCreateWithoutDestinataireInput, MessageUncheckedCreateWithoutDestinataireInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutDestinataireInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutDestinataireInput, MessageUncheckedUpdateWithoutDestinataireInput>
  }

  export type MessageUpdateManyWithWhereWithoutDestinataireInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutDestinataireInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: UuidFilter<"Message"> | string
    expediteurId?: UuidFilter<"Message"> | string
    destinataireId?: UuidFilter<"Message"> | string
    contenu?: StringFilter<"Message"> | string
    lu?: BoolFilter<"Message"> | boolean
    createdAt?: DateTimeFilter<"Message"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutExpediteurInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutExpediteurInput, MessageUncheckedUpdateWithoutExpediteurInput>
    create: XOR<MessageCreateWithoutExpediteurInput, MessageUncheckedCreateWithoutExpediteurInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutExpediteurInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutExpediteurInput, MessageUncheckedUpdateWithoutExpediteurInput>
  }

  export type MessageUpdateManyWithWhereWithoutExpediteurInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutExpediteurInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: UuidFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    userId?: UuidNullableFilter<"Notification"> | string | null
    role?: EnumUserRoleNullableFilter<"Notification"> | $Enums.UserRole | null
    read?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StagiaireUpsertWithoutUserInput = {
    update: XOR<StagiaireUpdateWithoutUserInput, StagiaireUncheckedUpdateWithoutUserInput>
    create: XOR<StagiaireCreateWithoutUserInput, StagiaireUncheckedCreateWithoutUserInput>
    where?: StagiaireWhereInput
  }

  export type StagiaireUpdateToOneWithWhereWithoutUserInput = {
    where?: StagiaireWhereInput
    data: XOR<StagiaireUpdateWithoutUserInput, StagiaireUncheckedUpdateWithoutUserInput>
  }

  export type StagiaireUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    demandesStages?: DemandeStageUpdateManyWithoutStagiaireNestedInput
    stages?: StageUpdateManyWithoutStagiaireNestedInput
    structure?: StructureUpdateOneWithoutStagiairesNestedInput
    service?: ServiceUpdateOneWithoutStagiairesNestedInput
    tuteur?: TuteurUpdateOneWithoutStagiairesNestedInput
  }

  export type StagiaireUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    structureAffecteeId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceAffecteId?: NullableIntFieldUpdateOperationsInput | number | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput
    stages?: StageUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type StructureUpsertWithoutUsersInput = {
    update: XOR<StructureUpdateWithoutUsersInput, StructureUncheckedUpdateWithoutUsersInput>
    create: XOR<StructureCreateWithoutUsersInput, StructureUncheckedCreateWithoutUsersInput>
    where?: StructureWhereInput
  }

  export type StructureUpdateToOneWithWhereWithoutUsersInput = {
    where?: StructureWhereInput
    data: XOR<StructureUpdateWithoutUsersInput, StructureUncheckedUpdateWithoutUsersInput>
  }

  export type StructureUpdateWithoutUsersInput = {
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demandesStages?: DemandeStageUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUpdateManyWithoutStructureNestedInput
    parent?: StructureUpdateOneWithoutChildrenNestedInput
    children?: StructureUpdateManyWithoutParentNestedInput
    tuteurs?: TuteurUpdateManyWithoutStructureNestedInput
    services?: ServiceUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUncheckedUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutStructureNestedInput
    children?: StructureUncheckedUpdateManyWithoutParentNestedInput
    tuteurs?: TuteurUncheckedUpdateManyWithoutStructureNestedInput
    services?: ServiceUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type TuteurUpsertWithoutUserInput = {
    update: XOR<TuteurUpdateWithoutUserInput, TuteurUncheckedUpdateWithoutUserInput>
    create: XOR<TuteurCreateWithoutUserInput, TuteurUncheckedCreateWithoutUserInput>
    where?: TuteurWhereInput
  }

  export type TuteurUpdateToOneWithWhereWithoutUserInput = {
    where?: TuteurWhereInput
    data: XOR<TuteurUpdateWithoutUserInput, TuteurUncheckedUpdateWithoutUserInput>
  }

  export type TuteurUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stages?: StageUpdateManyWithoutTuteurNestedInput
    stagiaires?: StagiaireUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUpdateManyWithoutTuteurNestedInput
    structure?: StructureUpdateOneWithoutTuteursNestedInput
    service?: ServiceUpdateOneWithoutTuteursNestedInput
  }

  export type TuteurUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceId?: NullableIntFieldUpdateOperationsInput | number | null
    stages?: StageUncheckedUpdateManyWithoutTuteurNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUncheckedUpdateManyWithoutTuteurNestedInput
  }

  export type EvaluationUpsertWithWhereUniqueWithoutTuteurInput = {
    where: EvaluationWhereUniqueInput
    update: XOR<EvaluationUpdateWithoutTuteurInput, EvaluationUncheckedUpdateWithoutTuteurInput>
    create: XOR<EvaluationCreateWithoutTuteurInput, EvaluationUncheckedCreateWithoutTuteurInput>
  }

  export type EvaluationUpdateWithWhereUniqueWithoutTuteurInput = {
    where: EvaluationWhereUniqueInput
    data: XOR<EvaluationUpdateWithoutTuteurInput, EvaluationUncheckedUpdateWithoutTuteurInput>
  }

  export type EvaluationUpdateManyWithWhereWithoutTuteurInput = {
    where: EvaluationScalarWhereInput
    data: XOR<EvaluationUpdateManyMutationInput, EvaluationUncheckedUpdateManyWithoutTuteurInput>
  }

  export type EvaluationScalarWhereInput = {
    AND?: EvaluationScalarWhereInput | EvaluationScalarWhereInput[]
    OR?: EvaluationScalarWhereInput[]
    NOT?: EvaluationScalarWhereInput | EvaluationScalarWhereInput[]
    id?: UuidFilter<"Evaluation"> | string
    stagiaireId?: UuidFilter<"Evaluation"> | string
    tuteurId?: UuidFilter<"Evaluation"> | string
    criteres?: JsonFilter<"Evaluation">
    commentaire?: StringNullableFilter<"Evaluation"> | string | null
    createdAt?: DateTimeFilter<"Evaluation"> | Date | string
  }

  export type EvaluationUpsertWithWhereUniqueWithoutStagiaireInput = {
    where: EvaluationWhereUniqueInput
    update: XOR<EvaluationUpdateWithoutStagiaireInput, EvaluationUncheckedUpdateWithoutStagiaireInput>
    create: XOR<EvaluationCreateWithoutStagiaireInput, EvaluationUncheckedCreateWithoutStagiaireInput>
  }

  export type EvaluationUpdateWithWhereUniqueWithoutStagiaireInput = {
    where: EvaluationWhereUniqueInput
    data: XOR<EvaluationUpdateWithoutStagiaireInput, EvaluationUncheckedUpdateWithoutStagiaireInput>
  }

  export type EvaluationUpdateManyWithWhereWithoutStagiaireInput = {
    where: EvaluationScalarWhereInput
    data: XOR<EvaluationUpdateManyMutationInput, EvaluationUncheckedUpdateManyWithoutStagiaireInput>
  }

  export type DocumentUpsertWithWhereUniqueWithoutUserInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutUserInput, DocumentUncheckedUpdateWithoutUserInput>
    create: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutUserInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutUserInput, DocumentUncheckedUpdateWithoutUserInput>
  }

  export type DocumentUpdateManyWithWhereWithoutUserInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutUserInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: UuidFilter<"Document"> | string
    userId?: UuidFilter<"Document"> | string
    type?: StringFilter<"Document"> | string
    name?: StringFilter<"Document"> | string
    path?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
    messagesRecus?: MessageCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUsersInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationCreateNestedManyWithoutStagiaireInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structureId?: number | null
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestUncheckedCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
    messagesRecus?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationUncheckedCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationUncheckedCreateNestedManyWithoutStagiaireInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUsersNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUncheckedUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUncheckedUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUncheckedUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutDpafInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestCreateNestedManyWithoutStagiaireInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
    messagesRecus?: MessageCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUsersInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationCreateNestedManyWithoutStagiaireInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDpafInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structureId?: number | null
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestUncheckedCreateNestedManyWithoutStagiaireInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
    messagesRecus?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationUncheckedCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationUncheckedCreateNestedManyWithoutStagiaireInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDpafInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDpafInput, UserUncheckedCreateWithoutDpafInput>
  }

  export type UserUpsertWithoutDpafInput = {
    update: XOR<UserUpdateWithoutDpafInput, UserUncheckedUpdateWithoutDpafInput>
    create: XOR<UserCreateWithoutDpafInput, UserUncheckedCreateWithoutDpafInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDpafInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDpafInput, UserUncheckedUpdateWithoutDpafInput>
  }

  export type UserUpdateWithoutDpafInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUpdateManyWithoutStagiaireNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUsersNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDpafInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUncheckedUpdateManyWithoutStagiaireNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUncheckedUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUncheckedUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DemandeStageCreateWithoutStructureCibleInput = {
    id?: string
    statut?: $Enums.StatutDemande
    dateDebut: Date | string
    dateFin: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    stagiaire: StagiaireCreateNestedOneWithoutDemandesStagesInput
    journalActions?: JournalActionCreateNestedManyWithoutDemandeStageInput
    stage?: StageCreateNestedOneWithoutDemandeStageInput
  }

  export type DemandeStageUncheckedCreateWithoutStructureCibleInput = {
    id?: string
    stagiaireId: string
    statut?: $Enums.StatutDemande
    dateDebut: Date | string
    dateFin: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutDemandeStageInput
    stage?: StageUncheckedCreateNestedOneWithoutDemandeStageInput
  }

  export type DemandeStageCreateOrConnectWithoutStructureCibleInput = {
    where: DemandeStageWhereUniqueInput
    create: XOR<DemandeStageCreateWithoutStructureCibleInput, DemandeStageUncheckedCreateWithoutStructureCibleInput>
  }

  export type DemandeStageCreateManyStructureCibleInputEnvelope = {
    data: DemandeStageCreateManyStructureCibleInput | DemandeStageCreateManyStructureCibleInput[]
    skipDuplicates?: boolean
  }

  export type StageCreateWithoutStructureInput = {
    id?: string
    dateDebut: Date | string
    dateFin: Date | string
    statut?: $Enums.StatutStage
    createdAt?: Date | string
    updatedAt?: Date | string
    demandeStage: DemandeStageCreateNestedOneWithoutStageInput
    stagiaire: StagiaireCreateNestedOneWithoutStagesInput
    tuteur: TuteurCreateNestedOneWithoutStagesInput
  }

  export type StageUncheckedCreateWithoutStructureInput = {
    id?: string
    demandeStageId: string
    tuteurId: string
    stagiaireId: string
    dateDebut: Date | string
    dateFin: Date | string
    statut?: $Enums.StatutStage
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StageCreateOrConnectWithoutStructureInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutStructureInput, StageUncheckedCreateWithoutStructureInput>
  }

  export type StageCreateManyStructureInputEnvelope = {
    data: StageCreateManyStructureInput | StageCreateManyStructureInput[]
    skipDuplicates?: boolean
  }

  export type StagiaireCreateWithoutStructureInput = {
    id?: string
    demandesStages?: DemandeStageCreateNestedManyWithoutStagiaireInput
    stages?: StageCreateNestedManyWithoutStagiaireInput
    service?: ServiceCreateNestedOneWithoutStagiairesInput
    tuteur?: TuteurCreateNestedOneWithoutStagiairesInput
    user: UserCreateNestedOneWithoutStagiaireInput
  }

  export type StagiaireUncheckedCreateWithoutStructureInput = {
    id?: string
    userId: string
    serviceAffecteId?: number | null
    tuteurId?: string | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput
    stages?: StageUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireCreateOrConnectWithoutStructureInput = {
    where: StagiaireWhereUniqueInput
    create: XOR<StagiaireCreateWithoutStructureInput, StagiaireUncheckedCreateWithoutStructureInput>
  }

  export type StagiaireCreateManyStructureInputEnvelope = {
    data: StagiaireCreateManyStructureInput | StagiaireCreateManyStructureInput[]
    skipDuplicates?: boolean
  }

  export type StructureCreateWithoutChildrenInput = {
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    demandesStages?: DemandeStageCreateNestedManyWithoutStructureCibleInput
    stages?: StageCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireCreateNestedManyWithoutStructureInput
    parent?: StructureCreateNestedOneWithoutChildrenInput
    users?: UserCreateNestedManyWithoutStructureInput
    tuteurs?: TuteurCreateNestedManyWithoutStructureInput
    services?: ServiceCreateNestedManyWithoutStructureInput
  }

  export type StructureUncheckedCreateWithoutChildrenInput = {
    id?: number
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: number | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput
    stages?: StageUncheckedCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutStructureInput
    users?: UserUncheckedCreateNestedManyWithoutStructureInput
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutStructureInput
    services?: ServiceUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructureCreateOrConnectWithoutChildrenInput = {
    where: StructureWhereUniqueInput
    create: XOR<StructureCreateWithoutChildrenInput, StructureUncheckedCreateWithoutChildrenInput>
  }

  export type StructureCreateWithoutParentInput = {
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    demandesStages?: DemandeStageCreateNestedManyWithoutStructureCibleInput
    stages?: StageCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireCreateNestedManyWithoutStructureInput
    children?: StructureCreateNestedManyWithoutParentInput
    users?: UserCreateNestedManyWithoutStructureInput
    tuteurs?: TuteurCreateNestedManyWithoutStructureInput
    services?: ServiceCreateNestedManyWithoutStructureInput
  }

  export type StructureUncheckedCreateWithoutParentInput = {
    id?: number
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput
    stages?: StageUncheckedCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutStructureInput
    children?: StructureUncheckedCreateNestedManyWithoutParentInput
    users?: UserUncheckedCreateNestedManyWithoutStructureInput
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutStructureInput
    services?: ServiceUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructureCreateOrConnectWithoutParentInput = {
    where: StructureWhereUniqueInput
    create: XOR<StructureCreateWithoutParentInput, StructureUncheckedCreateWithoutParentInput>
  }

  export type StructureCreateManyParentInputEnvelope = {
    data: StructureCreateManyParentInput | StructureCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStructureInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
    messagesRecus?: MessageCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationCreateNestedManyWithoutStagiaireInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStructureInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestUncheckedCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
    messagesRecus?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationUncheckedCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationUncheckedCreateNestedManyWithoutStagiaireInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStructureInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStructureInput, UserUncheckedCreateWithoutStructureInput>
  }

  export type UserCreateManyStructureInputEnvelope = {
    data: UserCreateManyStructureInput | UserCreateManyStructureInput[]
    skipDuplicates?: boolean
  }

  export type TuteurCreateWithoutStructureInput = {
    id?: string
    stages?: StageCreateNestedManyWithoutTuteurInput
    stagiaires?: StagiaireCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurCreateNestedManyWithoutTuteurInput
    service?: ServiceCreateNestedOneWithoutTuteursInput
    user: UserCreateNestedOneWithoutTuteurInput
  }

  export type TuteurUncheckedCreateWithoutStructureInput = {
    id?: string
    userId: string
    serviceId?: number | null
    stages?: StageUncheckedCreateNestedManyWithoutTuteurInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurUncheckedCreateNestedManyWithoutTuteurInput
  }

  export type TuteurCreateOrConnectWithoutStructureInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutStructureInput, TuteurUncheckedCreateWithoutStructureInput>
  }

  export type TuteurCreateManyStructureInputEnvelope = {
    data: TuteurCreateManyStructureInput | TuteurCreateManyStructureInput[]
    skipDuplicates?: boolean
  }

  export type ServiceCreateWithoutStructureInput = {
    nomService: string
    description?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tuteurs?: TuteurCreateNestedManyWithoutServiceInput
    stagiaires?: StagiaireCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutStructureInput = {
    id?: number
    nomService: string
    description?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutServiceInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutStructureInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutStructureInput, ServiceUncheckedCreateWithoutStructureInput>
  }

  export type ServiceCreateManyStructureInputEnvelope = {
    data: ServiceCreateManyStructureInput | ServiceCreateManyStructureInput[]
    skipDuplicates?: boolean
  }

  export type DemandeStageUpsertWithWhereUniqueWithoutStructureCibleInput = {
    where: DemandeStageWhereUniqueInput
    update: XOR<DemandeStageUpdateWithoutStructureCibleInput, DemandeStageUncheckedUpdateWithoutStructureCibleInput>
    create: XOR<DemandeStageCreateWithoutStructureCibleInput, DemandeStageUncheckedCreateWithoutStructureCibleInput>
  }

  export type DemandeStageUpdateWithWhereUniqueWithoutStructureCibleInput = {
    where: DemandeStageWhereUniqueInput
    data: XOR<DemandeStageUpdateWithoutStructureCibleInput, DemandeStageUncheckedUpdateWithoutStructureCibleInput>
  }

  export type DemandeStageUpdateManyWithWhereWithoutStructureCibleInput = {
    where: DemandeStageScalarWhereInput
    data: XOR<DemandeStageUpdateManyMutationInput, DemandeStageUncheckedUpdateManyWithoutStructureCibleInput>
  }

  export type DemandeStageScalarWhereInput = {
    AND?: DemandeStageScalarWhereInput | DemandeStageScalarWhereInput[]
    OR?: DemandeStageScalarWhereInput[]
    NOT?: DemandeStageScalarWhereInput | DemandeStageScalarWhereInput[]
    id?: UuidFilter<"DemandeStage"> | string
    stagiaireId?: UuidFilter<"DemandeStage"> | string
    structureCibleId?: IntNullableFilter<"DemandeStage"> | number | null
    statut?: EnumStatutDemandeFilter<"DemandeStage"> | $Enums.StatutDemande
    dateDebut?: DateTimeFilter<"DemandeStage"> | Date | string
    dateFin?: DateTimeFilter<"DemandeStage"> | Date | string
    createdAt?: DateTimeFilter<"DemandeStage"> | Date | string
    updatedAt?: DateTimeFilter<"DemandeStage"> | Date | string
    details?: JsonNullableFilter<"DemandeStage">
  }

  export type StageUpsertWithWhereUniqueWithoutStructureInput = {
    where: StageWhereUniqueInput
    update: XOR<StageUpdateWithoutStructureInput, StageUncheckedUpdateWithoutStructureInput>
    create: XOR<StageCreateWithoutStructureInput, StageUncheckedCreateWithoutStructureInput>
  }

  export type StageUpdateWithWhereUniqueWithoutStructureInput = {
    where: StageWhereUniqueInput
    data: XOR<StageUpdateWithoutStructureInput, StageUncheckedUpdateWithoutStructureInput>
  }

  export type StageUpdateManyWithWhereWithoutStructureInput = {
    where: StageScalarWhereInput
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyWithoutStructureInput>
  }

  export type StageScalarWhereInput = {
    AND?: StageScalarWhereInput | StageScalarWhereInput[]
    OR?: StageScalarWhereInput[]
    NOT?: StageScalarWhereInput | StageScalarWhereInput[]
    id?: UuidFilter<"Stage"> | string
    demandeStageId?: UuidFilter<"Stage"> | string
    tuteurId?: UuidFilter<"Stage"> | string
    structureId?: IntFilter<"Stage"> | number
    stagiaireId?: UuidFilter<"Stage"> | string
    dateDebut?: DateTimeFilter<"Stage"> | Date | string
    dateFin?: DateTimeFilter<"Stage"> | Date | string
    statut?: EnumStatutStageFilter<"Stage"> | $Enums.StatutStage
    createdAt?: DateTimeFilter<"Stage"> | Date | string
    updatedAt?: DateTimeFilter<"Stage"> | Date | string
  }

  export type StagiaireUpsertWithWhereUniqueWithoutStructureInput = {
    where: StagiaireWhereUniqueInput
    update: XOR<StagiaireUpdateWithoutStructureInput, StagiaireUncheckedUpdateWithoutStructureInput>
    create: XOR<StagiaireCreateWithoutStructureInput, StagiaireUncheckedCreateWithoutStructureInput>
  }

  export type StagiaireUpdateWithWhereUniqueWithoutStructureInput = {
    where: StagiaireWhereUniqueInput
    data: XOR<StagiaireUpdateWithoutStructureInput, StagiaireUncheckedUpdateWithoutStructureInput>
  }

  export type StagiaireUpdateManyWithWhereWithoutStructureInput = {
    where: StagiaireScalarWhereInput
    data: XOR<StagiaireUpdateManyMutationInput, StagiaireUncheckedUpdateManyWithoutStructureInput>
  }

  export type StagiaireScalarWhereInput = {
    AND?: StagiaireScalarWhereInput | StagiaireScalarWhereInput[]
    OR?: StagiaireScalarWhereInput[]
    NOT?: StagiaireScalarWhereInput | StagiaireScalarWhereInput[]
    id?: UuidFilter<"Stagiaire"> | string
    userId?: UuidFilter<"Stagiaire"> | string
    structureAffecteeId?: IntNullableFilter<"Stagiaire"> | number | null
    serviceAffecteId?: IntNullableFilter<"Stagiaire"> | number | null
    tuteurId?: UuidNullableFilter<"Stagiaire"> | string | null
  }

  export type StructureUpsertWithoutChildrenInput = {
    update: XOR<StructureUpdateWithoutChildrenInput, StructureUncheckedUpdateWithoutChildrenInput>
    create: XOR<StructureCreateWithoutChildrenInput, StructureUncheckedCreateWithoutChildrenInput>
    where?: StructureWhereInput
  }

  export type StructureUpdateToOneWithWhereWithoutChildrenInput = {
    where?: StructureWhereInput
    data: XOR<StructureUpdateWithoutChildrenInput, StructureUncheckedUpdateWithoutChildrenInput>
  }

  export type StructureUpdateWithoutChildrenInput = {
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demandesStages?: DemandeStageUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUpdateManyWithoutStructureNestedInput
    parent?: StructureUpdateOneWithoutChildrenNestedInput
    users?: UserUpdateManyWithoutStructureNestedInput
    tuteurs?: TuteurUpdateManyWithoutStructureNestedInput
    services?: ServiceUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateWithoutChildrenInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUncheckedUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutStructureNestedInput
    users?: UserUncheckedUpdateManyWithoutStructureNestedInput
    tuteurs?: TuteurUncheckedUpdateManyWithoutStructureNestedInput
    services?: ServiceUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type StructureUpsertWithWhereUniqueWithoutParentInput = {
    where: StructureWhereUniqueInput
    update: XOR<StructureUpdateWithoutParentInput, StructureUncheckedUpdateWithoutParentInput>
    create: XOR<StructureCreateWithoutParentInput, StructureUncheckedCreateWithoutParentInput>
  }

  export type StructureUpdateWithWhereUniqueWithoutParentInput = {
    where: StructureWhereUniqueInput
    data: XOR<StructureUpdateWithoutParentInput, StructureUncheckedUpdateWithoutParentInput>
  }

  export type StructureUpdateManyWithWhereWithoutParentInput = {
    where: StructureScalarWhereInput
    data: XOR<StructureUpdateManyMutationInput, StructureUncheckedUpdateManyWithoutParentInput>
  }

  export type StructureScalarWhereInput = {
    AND?: StructureScalarWhereInput | StructureScalarWhereInput[]
    OR?: StructureScalarWhereInput[]
    NOT?: StructureScalarWhereInput | StructureScalarWhereInput[]
    id?: IntFilter<"Structure"> | number
    nomStructure?: StringFilter<"Structure"> | string
    sigle?: StringNullableFilter<"Structure"> | string | null
    type?: StringNullableFilter<"Structure"> | string | null
    isDeleted?: BoolFilter<"Structure"> | boolean
    createdAt?: DateTimeFilter<"Structure"> | Date | string
    updatedAt?: DateTimeFilter<"Structure"> | Date | string
    parentId?: IntNullableFilter<"Structure"> | number | null
  }

  export type UserUpsertWithWhereUniqueWithoutStructureInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutStructureInput, UserUncheckedUpdateWithoutStructureInput>
    create: XOR<UserCreateWithoutStructureInput, UserUncheckedCreateWithoutStructureInput>
  }

  export type UserUpdateWithWhereUniqueWithoutStructureInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutStructureInput, UserUncheckedUpdateWithoutStructureInput>
  }

  export type UserUpdateManyWithWhereWithoutStructureInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutStructureInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: UuidFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    structureId?: IntNullableFilter<"User"> | number | null
    notifMessages?: BoolNullableFilter<"User"> | boolean | null
    notifEvaluation?: BoolNullableFilter<"User"> | boolean | null
    notifRapports?: BoolNullableFilter<"User"> | boolean | null
  }

  export type TuteurUpsertWithWhereUniqueWithoutStructureInput = {
    where: TuteurWhereUniqueInput
    update: XOR<TuteurUpdateWithoutStructureInput, TuteurUncheckedUpdateWithoutStructureInput>
    create: XOR<TuteurCreateWithoutStructureInput, TuteurUncheckedCreateWithoutStructureInput>
  }

  export type TuteurUpdateWithWhereUniqueWithoutStructureInput = {
    where: TuteurWhereUniqueInput
    data: XOR<TuteurUpdateWithoutStructureInput, TuteurUncheckedUpdateWithoutStructureInput>
  }

  export type TuteurUpdateManyWithWhereWithoutStructureInput = {
    where: TuteurScalarWhereInput
    data: XOR<TuteurUpdateManyMutationInput, TuteurUncheckedUpdateManyWithoutStructureInput>
  }

  export type TuteurScalarWhereInput = {
    AND?: TuteurScalarWhereInput | TuteurScalarWhereInput[]
    OR?: TuteurScalarWhereInput[]
    NOT?: TuteurScalarWhereInput | TuteurScalarWhereInput[]
    id?: UuidFilter<"Tuteur"> | string
    userId?: UuidFilter<"Tuteur"> | string
    structureId?: IntNullableFilter<"Tuteur"> | number | null
    serviceId?: IntNullableFilter<"Tuteur"> | number | null
  }

  export type ServiceUpsertWithWhereUniqueWithoutStructureInput = {
    where: ServiceWhereUniqueInput
    update: XOR<ServiceUpdateWithoutStructureInput, ServiceUncheckedUpdateWithoutStructureInput>
    create: XOR<ServiceCreateWithoutStructureInput, ServiceUncheckedCreateWithoutStructureInput>
  }

  export type ServiceUpdateWithWhereUniqueWithoutStructureInput = {
    where: ServiceWhereUniqueInput
    data: XOR<ServiceUpdateWithoutStructureInput, ServiceUncheckedUpdateWithoutStructureInput>
  }

  export type ServiceUpdateManyWithWhereWithoutStructureInput = {
    where: ServiceScalarWhereInput
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyWithoutStructureInput>
  }

  export type ServiceScalarWhereInput = {
    AND?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
    OR?: ServiceScalarWhereInput[]
    NOT?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
    id?: IntFilter<"Service"> | number
    nomService?: StringFilter<"Service"> | string
    description?: StringNullableFilter<"Service"> | string | null
    structureId?: IntFilter<"Service"> | number
    isDeleted?: BoolFilter<"Service"> | boolean
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
  }

  export type StageCreateWithoutTuteurInput = {
    id?: string
    dateDebut: Date | string
    dateFin: Date | string
    statut?: $Enums.StatutStage
    createdAt?: Date | string
    updatedAt?: Date | string
    demandeStage: DemandeStageCreateNestedOneWithoutStageInput
    stagiaire: StagiaireCreateNestedOneWithoutStagesInput
    structure: StructureCreateNestedOneWithoutStagesInput
  }

  export type StageUncheckedCreateWithoutTuteurInput = {
    id?: string
    demandeStageId: string
    structureId: number
    stagiaireId: string
    dateDebut: Date | string
    dateFin: Date | string
    statut?: $Enums.StatutStage
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StageCreateOrConnectWithoutTuteurInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutTuteurInput, StageUncheckedCreateWithoutTuteurInput>
  }

  export type StageCreateManyTuteurInputEnvelope = {
    data: StageCreateManyTuteurInput | StageCreateManyTuteurInput[]
    skipDuplicates?: boolean
  }

  export type StagiaireCreateWithoutTuteurInput = {
    id?: string
    demandesStages?: DemandeStageCreateNestedManyWithoutStagiaireInput
    stages?: StageCreateNestedManyWithoutStagiaireInput
    structure?: StructureCreateNestedOneWithoutStagiairesInput
    service?: ServiceCreateNestedOneWithoutStagiairesInput
    user: UserCreateNestedOneWithoutStagiaireInput
  }

  export type StagiaireUncheckedCreateWithoutTuteurInput = {
    id?: string
    userId: string
    structureAffecteeId?: number | null
    serviceAffecteId?: number | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput
    stages?: StageUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireCreateOrConnectWithoutTuteurInput = {
    where: StagiaireWhereUniqueInput
    create: XOR<StagiaireCreateWithoutTuteurInput, StagiaireUncheckedCreateWithoutTuteurInput>
  }

  export type StagiaireCreateManyTuteurInputEnvelope = {
    data: StagiaireCreateManyTuteurInput | StagiaireCreateManyTuteurInput[]
    skipDuplicates?: boolean
  }

  export type ThemeTuteurCreateWithoutTuteurInput = {
    id?: string
    titre: string
    description?: string | null
    disponible?: boolean
  }

  export type ThemeTuteurUncheckedCreateWithoutTuteurInput = {
    id?: string
    titre: string
    description?: string | null
    disponible?: boolean
  }

  export type ThemeTuteurCreateOrConnectWithoutTuteurInput = {
    where: ThemeTuteurWhereUniqueInput
    create: XOR<ThemeTuteurCreateWithoutTuteurInput, ThemeTuteurUncheckedCreateWithoutTuteurInput>
  }

  export type ThemeTuteurCreateManyTuteurInputEnvelope = {
    data: ThemeTuteurCreateManyTuteurInput | ThemeTuteurCreateManyTuteurInput[]
    skipDuplicates?: boolean
  }

  export type StructureCreateWithoutTuteursInput = {
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    demandesStages?: DemandeStageCreateNestedManyWithoutStructureCibleInput
    stages?: StageCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireCreateNestedManyWithoutStructureInput
    parent?: StructureCreateNestedOneWithoutChildrenInput
    children?: StructureCreateNestedManyWithoutParentInput
    users?: UserCreateNestedManyWithoutStructureInput
    services?: ServiceCreateNestedManyWithoutStructureInput
  }

  export type StructureUncheckedCreateWithoutTuteursInput = {
    id?: number
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: number | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput
    stages?: StageUncheckedCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutStructureInput
    children?: StructureUncheckedCreateNestedManyWithoutParentInput
    users?: UserUncheckedCreateNestedManyWithoutStructureInput
    services?: ServiceUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructureCreateOrConnectWithoutTuteursInput = {
    where: StructureWhereUniqueInput
    create: XOR<StructureCreateWithoutTuteursInput, StructureUncheckedCreateWithoutTuteursInput>
  }

  export type ServiceCreateWithoutTuteursInput = {
    nomService: string
    description?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structure: StructureCreateNestedOneWithoutServicesInput
    stagiaires?: StagiaireCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutTuteursInput = {
    id?: number
    nomService: string
    description?: string | null
    structureId: number
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutTuteursInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutTuteursInput, ServiceUncheckedCreateWithoutTuteursInput>
  }

  export type UserCreateWithoutTuteurInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
    messagesRecus?: MessageCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUsersInput
    evaluationsAsTuteur?: EvaluationCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationCreateNestedManyWithoutStagiaireInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTuteurInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structureId?: number | null
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestUncheckedCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
    messagesRecus?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationUncheckedCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationUncheckedCreateNestedManyWithoutStagiaireInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTuteurInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTuteurInput, UserUncheckedCreateWithoutTuteurInput>
  }

  export type StageUpsertWithWhereUniqueWithoutTuteurInput = {
    where: StageWhereUniqueInput
    update: XOR<StageUpdateWithoutTuteurInput, StageUncheckedUpdateWithoutTuteurInput>
    create: XOR<StageCreateWithoutTuteurInput, StageUncheckedCreateWithoutTuteurInput>
  }

  export type StageUpdateWithWhereUniqueWithoutTuteurInput = {
    where: StageWhereUniqueInput
    data: XOR<StageUpdateWithoutTuteurInput, StageUncheckedUpdateWithoutTuteurInput>
  }

  export type StageUpdateManyWithWhereWithoutTuteurInput = {
    where: StageScalarWhereInput
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyWithoutTuteurInput>
  }

  export type StagiaireUpsertWithWhereUniqueWithoutTuteurInput = {
    where: StagiaireWhereUniqueInput
    update: XOR<StagiaireUpdateWithoutTuteurInput, StagiaireUncheckedUpdateWithoutTuteurInput>
    create: XOR<StagiaireCreateWithoutTuteurInput, StagiaireUncheckedCreateWithoutTuteurInput>
  }

  export type StagiaireUpdateWithWhereUniqueWithoutTuteurInput = {
    where: StagiaireWhereUniqueInput
    data: XOR<StagiaireUpdateWithoutTuteurInput, StagiaireUncheckedUpdateWithoutTuteurInput>
  }

  export type StagiaireUpdateManyWithWhereWithoutTuteurInput = {
    where: StagiaireScalarWhereInput
    data: XOR<StagiaireUpdateManyMutationInput, StagiaireUncheckedUpdateManyWithoutTuteurInput>
  }

  export type ThemeTuteurUpsertWithWhereUniqueWithoutTuteurInput = {
    where: ThemeTuteurWhereUniqueInput
    update: XOR<ThemeTuteurUpdateWithoutTuteurInput, ThemeTuteurUncheckedUpdateWithoutTuteurInput>
    create: XOR<ThemeTuteurCreateWithoutTuteurInput, ThemeTuteurUncheckedCreateWithoutTuteurInput>
  }

  export type ThemeTuteurUpdateWithWhereUniqueWithoutTuteurInput = {
    where: ThemeTuteurWhereUniqueInput
    data: XOR<ThemeTuteurUpdateWithoutTuteurInput, ThemeTuteurUncheckedUpdateWithoutTuteurInput>
  }

  export type ThemeTuteurUpdateManyWithWhereWithoutTuteurInput = {
    where: ThemeTuteurScalarWhereInput
    data: XOR<ThemeTuteurUpdateManyMutationInput, ThemeTuteurUncheckedUpdateManyWithoutTuteurInput>
  }

  export type ThemeTuteurScalarWhereInput = {
    AND?: ThemeTuteurScalarWhereInput | ThemeTuteurScalarWhereInput[]
    OR?: ThemeTuteurScalarWhereInput[]
    NOT?: ThemeTuteurScalarWhereInput | ThemeTuteurScalarWhereInput[]
    id?: UuidFilter<"ThemeTuteur"> | string
    tuteurId?: UuidFilter<"ThemeTuteur"> | string
    titre?: StringFilter<"ThemeTuteur"> | string
    description?: StringNullableFilter<"ThemeTuteur"> | string | null
    disponible?: BoolFilter<"ThemeTuteur"> | boolean
  }

  export type StructureUpsertWithoutTuteursInput = {
    update: XOR<StructureUpdateWithoutTuteursInput, StructureUncheckedUpdateWithoutTuteursInput>
    create: XOR<StructureCreateWithoutTuteursInput, StructureUncheckedCreateWithoutTuteursInput>
    where?: StructureWhereInput
  }

  export type StructureUpdateToOneWithWhereWithoutTuteursInput = {
    where?: StructureWhereInput
    data: XOR<StructureUpdateWithoutTuteursInput, StructureUncheckedUpdateWithoutTuteursInput>
  }

  export type StructureUpdateWithoutTuteursInput = {
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demandesStages?: DemandeStageUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUpdateManyWithoutStructureNestedInput
    parent?: StructureUpdateOneWithoutChildrenNestedInput
    children?: StructureUpdateManyWithoutParentNestedInput
    users?: UserUpdateManyWithoutStructureNestedInput
    services?: ServiceUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateWithoutTuteursInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUncheckedUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutStructureNestedInput
    children?: StructureUncheckedUpdateManyWithoutParentNestedInput
    users?: UserUncheckedUpdateManyWithoutStructureNestedInput
    services?: ServiceUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type ServiceUpsertWithoutTuteursInput = {
    update: XOR<ServiceUpdateWithoutTuteursInput, ServiceUncheckedUpdateWithoutTuteursInput>
    create: XOR<ServiceCreateWithoutTuteursInput, ServiceUncheckedCreateWithoutTuteursInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutTuteursInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutTuteursInput, ServiceUncheckedUpdateWithoutTuteursInput>
  }

  export type ServiceUpdateWithoutTuteursInput = {
    nomService?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structure?: StructureUpdateOneRequiredWithoutServicesNestedInput
    stagiaires?: StagiaireUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutTuteursInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomService?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    structureId?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stagiaires?: StagiaireUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type UserUpsertWithoutTuteurInput = {
    update: XOR<UserUpdateWithoutTuteurInput, UserUncheckedUpdateWithoutTuteurInput>
    create: XOR<UserCreateWithoutTuteurInput, UserUncheckedCreateWithoutTuteurInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTuteurInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTuteurInput, UserUncheckedUpdateWithoutTuteurInput>
  }

  export type UserUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUsersNestedInput
    evaluationsAsTuteur?: EvaluationUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUncheckedUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUncheckedUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUncheckedUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DemandeStageCreateWithoutStagiaireInput = {
    id?: string
    statut?: $Enums.StatutDemande
    dateDebut: Date | string
    dateFin: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    structureCible?: StructureCreateNestedOneWithoutDemandesStagesInput
    journalActions?: JournalActionCreateNestedManyWithoutDemandeStageInput
    stage?: StageCreateNestedOneWithoutDemandeStageInput
  }

  export type DemandeStageUncheckedCreateWithoutStagiaireInput = {
    id?: string
    structureCibleId?: number | null
    statut?: $Enums.StatutDemande
    dateDebut: Date | string
    dateFin: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutDemandeStageInput
    stage?: StageUncheckedCreateNestedOneWithoutDemandeStageInput
  }

  export type DemandeStageCreateOrConnectWithoutStagiaireInput = {
    where: DemandeStageWhereUniqueInput
    create: XOR<DemandeStageCreateWithoutStagiaireInput, DemandeStageUncheckedCreateWithoutStagiaireInput>
  }

  export type DemandeStageCreateManyStagiaireInputEnvelope = {
    data: DemandeStageCreateManyStagiaireInput | DemandeStageCreateManyStagiaireInput[]
    skipDuplicates?: boolean
  }

  export type StageCreateWithoutStagiaireInput = {
    id?: string
    dateDebut: Date | string
    dateFin: Date | string
    statut?: $Enums.StatutStage
    createdAt?: Date | string
    updatedAt?: Date | string
    demandeStage: DemandeStageCreateNestedOneWithoutStageInput
    structure: StructureCreateNestedOneWithoutStagesInput
    tuteur: TuteurCreateNestedOneWithoutStagesInput
  }

  export type StageUncheckedCreateWithoutStagiaireInput = {
    id?: string
    demandeStageId: string
    tuteurId: string
    structureId: number
    dateDebut: Date | string
    dateFin: Date | string
    statut?: $Enums.StatutStage
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StageCreateOrConnectWithoutStagiaireInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutStagiaireInput, StageUncheckedCreateWithoutStagiaireInput>
  }

  export type StageCreateManyStagiaireInputEnvelope = {
    data: StageCreateManyStagiaireInput | StageCreateManyStagiaireInput[]
    skipDuplicates?: boolean
  }

  export type StructureCreateWithoutStagiairesInput = {
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    demandesStages?: DemandeStageCreateNestedManyWithoutStructureCibleInput
    stages?: StageCreateNestedManyWithoutStructureInput
    parent?: StructureCreateNestedOneWithoutChildrenInput
    children?: StructureCreateNestedManyWithoutParentInput
    users?: UserCreateNestedManyWithoutStructureInput
    tuteurs?: TuteurCreateNestedManyWithoutStructureInput
    services?: ServiceCreateNestedManyWithoutStructureInput
  }

  export type StructureUncheckedCreateWithoutStagiairesInput = {
    id?: number
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: number | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput
    stages?: StageUncheckedCreateNestedManyWithoutStructureInput
    children?: StructureUncheckedCreateNestedManyWithoutParentInput
    users?: UserUncheckedCreateNestedManyWithoutStructureInput
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutStructureInput
    services?: ServiceUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructureCreateOrConnectWithoutStagiairesInput = {
    where: StructureWhereUniqueInput
    create: XOR<StructureCreateWithoutStagiairesInput, StructureUncheckedCreateWithoutStagiairesInput>
  }

  export type ServiceCreateWithoutStagiairesInput = {
    nomService: string
    description?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structure: StructureCreateNestedOneWithoutServicesInput
    tuteurs?: TuteurCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutStagiairesInput = {
    id?: number
    nomService: string
    description?: string | null
    structureId: number
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutStagiairesInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutStagiairesInput, ServiceUncheckedCreateWithoutStagiairesInput>
  }

  export type TuteurCreateWithoutStagiairesInput = {
    id?: string
    stages?: StageCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurCreateNestedManyWithoutTuteurInput
    structure?: StructureCreateNestedOneWithoutTuteursInput
    service?: ServiceCreateNestedOneWithoutTuteursInput
    user: UserCreateNestedOneWithoutTuteurInput
  }

  export type TuteurUncheckedCreateWithoutStagiairesInput = {
    id?: string
    userId: string
    structureId?: number | null
    serviceId?: number | null
    stages?: StageUncheckedCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurUncheckedCreateNestedManyWithoutTuteurInput
  }

  export type TuteurCreateOrConnectWithoutStagiairesInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutStagiairesInput, TuteurUncheckedCreateWithoutStagiairesInput>
  }

  export type UserCreateWithoutStagiaireInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
    messagesRecus?: MessageCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUsersInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationCreateNestedManyWithoutStagiaireInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStagiaireInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structureId?: number | null
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestUncheckedCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
    messagesRecus?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationUncheckedCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationUncheckedCreateNestedManyWithoutStagiaireInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStagiaireInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStagiaireInput, UserUncheckedCreateWithoutStagiaireInput>
  }

  export type DemandeStageUpsertWithWhereUniqueWithoutStagiaireInput = {
    where: DemandeStageWhereUniqueInput
    update: XOR<DemandeStageUpdateWithoutStagiaireInput, DemandeStageUncheckedUpdateWithoutStagiaireInput>
    create: XOR<DemandeStageCreateWithoutStagiaireInput, DemandeStageUncheckedCreateWithoutStagiaireInput>
  }

  export type DemandeStageUpdateWithWhereUniqueWithoutStagiaireInput = {
    where: DemandeStageWhereUniqueInput
    data: XOR<DemandeStageUpdateWithoutStagiaireInput, DemandeStageUncheckedUpdateWithoutStagiaireInput>
  }

  export type DemandeStageUpdateManyWithWhereWithoutStagiaireInput = {
    where: DemandeStageScalarWhereInput
    data: XOR<DemandeStageUpdateManyMutationInput, DemandeStageUncheckedUpdateManyWithoutStagiaireInput>
  }

  export type StageUpsertWithWhereUniqueWithoutStagiaireInput = {
    where: StageWhereUniqueInput
    update: XOR<StageUpdateWithoutStagiaireInput, StageUncheckedUpdateWithoutStagiaireInput>
    create: XOR<StageCreateWithoutStagiaireInput, StageUncheckedCreateWithoutStagiaireInput>
  }

  export type StageUpdateWithWhereUniqueWithoutStagiaireInput = {
    where: StageWhereUniqueInput
    data: XOR<StageUpdateWithoutStagiaireInput, StageUncheckedUpdateWithoutStagiaireInput>
  }

  export type StageUpdateManyWithWhereWithoutStagiaireInput = {
    where: StageScalarWhereInput
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyWithoutStagiaireInput>
  }

  export type StructureUpsertWithoutStagiairesInput = {
    update: XOR<StructureUpdateWithoutStagiairesInput, StructureUncheckedUpdateWithoutStagiairesInput>
    create: XOR<StructureCreateWithoutStagiairesInput, StructureUncheckedCreateWithoutStagiairesInput>
    where?: StructureWhereInput
  }

  export type StructureUpdateToOneWithWhereWithoutStagiairesInput = {
    where?: StructureWhereInput
    data: XOR<StructureUpdateWithoutStagiairesInput, StructureUncheckedUpdateWithoutStagiairesInput>
  }

  export type StructureUpdateWithoutStagiairesInput = {
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demandesStages?: DemandeStageUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUpdateManyWithoutStructureNestedInput
    parent?: StructureUpdateOneWithoutChildrenNestedInput
    children?: StructureUpdateManyWithoutParentNestedInput
    users?: UserUpdateManyWithoutStructureNestedInput
    tuteurs?: TuteurUpdateManyWithoutStructureNestedInput
    services?: ServiceUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateWithoutStagiairesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUncheckedUpdateManyWithoutStructureNestedInput
    children?: StructureUncheckedUpdateManyWithoutParentNestedInput
    users?: UserUncheckedUpdateManyWithoutStructureNestedInput
    tuteurs?: TuteurUncheckedUpdateManyWithoutStructureNestedInput
    services?: ServiceUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type ServiceUpsertWithoutStagiairesInput = {
    update: XOR<ServiceUpdateWithoutStagiairesInput, ServiceUncheckedUpdateWithoutStagiairesInput>
    create: XOR<ServiceCreateWithoutStagiairesInput, ServiceUncheckedCreateWithoutStagiairesInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutStagiairesInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutStagiairesInput, ServiceUncheckedUpdateWithoutStagiairesInput>
  }

  export type ServiceUpdateWithoutStagiairesInput = {
    nomService?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structure?: StructureUpdateOneRequiredWithoutServicesNestedInput
    tuteurs?: TuteurUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutStagiairesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomService?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    structureId?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tuteurs?: TuteurUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type TuteurUpsertWithoutStagiairesInput = {
    update: XOR<TuteurUpdateWithoutStagiairesInput, TuteurUncheckedUpdateWithoutStagiairesInput>
    create: XOR<TuteurCreateWithoutStagiairesInput, TuteurUncheckedCreateWithoutStagiairesInput>
    where?: TuteurWhereInput
  }

  export type TuteurUpdateToOneWithWhereWithoutStagiairesInput = {
    where?: TuteurWhereInput
    data: XOR<TuteurUpdateWithoutStagiairesInput, TuteurUncheckedUpdateWithoutStagiairesInput>
  }

  export type TuteurUpdateWithoutStagiairesInput = {
    id?: StringFieldUpdateOperationsInput | string
    stages?: StageUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUpdateManyWithoutTuteurNestedInput
    structure?: StructureUpdateOneWithoutTuteursNestedInput
    service?: ServiceUpdateOneWithoutTuteursNestedInput
    user?: UserUpdateOneRequiredWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateWithoutStagiairesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceId?: NullableIntFieldUpdateOperationsInput | number | null
    stages?: StageUncheckedUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUncheckedUpdateManyWithoutTuteurNestedInput
  }

  export type UserUpsertWithoutStagiaireInput = {
    update: XOR<UserUpdateWithoutStagiaireInput, UserUncheckedUpdateWithoutStagiaireInput>
    create: XOR<UserCreateWithoutStagiaireInput, UserUncheckedCreateWithoutStagiaireInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStagiaireInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStagiaireInput, UserUncheckedUpdateWithoutStagiaireInput>
  }

  export type UserUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUsersNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUncheckedUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUncheckedUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUncheckedUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StagiaireCreateWithoutDemandesStagesInput = {
    id?: string
    stages?: StageCreateNestedManyWithoutStagiaireInput
    structure?: StructureCreateNestedOneWithoutStagiairesInput
    service?: ServiceCreateNestedOneWithoutStagiairesInput
    tuteur?: TuteurCreateNestedOneWithoutStagiairesInput
    user: UserCreateNestedOneWithoutStagiaireInput
  }

  export type StagiaireUncheckedCreateWithoutDemandesStagesInput = {
    id?: string
    userId: string
    structureAffecteeId?: number | null
    serviceAffecteId?: number | null
    tuteurId?: string | null
    stages?: StageUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireCreateOrConnectWithoutDemandesStagesInput = {
    where: StagiaireWhereUniqueInput
    create: XOR<StagiaireCreateWithoutDemandesStagesInput, StagiaireUncheckedCreateWithoutDemandesStagesInput>
  }

  export type StructureCreateWithoutDemandesStagesInput = {
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    stages?: StageCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireCreateNestedManyWithoutStructureInput
    parent?: StructureCreateNestedOneWithoutChildrenInput
    children?: StructureCreateNestedManyWithoutParentInput
    users?: UserCreateNestedManyWithoutStructureInput
    tuteurs?: TuteurCreateNestedManyWithoutStructureInput
    services?: ServiceCreateNestedManyWithoutStructureInput
  }

  export type StructureUncheckedCreateWithoutDemandesStagesInput = {
    id?: number
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: number | null
    stages?: StageUncheckedCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutStructureInput
    children?: StructureUncheckedCreateNestedManyWithoutParentInput
    users?: UserUncheckedCreateNestedManyWithoutStructureInput
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutStructureInput
    services?: ServiceUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructureCreateOrConnectWithoutDemandesStagesInput = {
    where: StructureWhereUniqueInput
    create: XOR<StructureCreateWithoutDemandesStagesInput, StructureUncheckedCreateWithoutDemandesStagesInput>
  }

  export type JournalActionCreateWithoutDemandeStageInput = {
    id?: string
    action: string
    cible: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutJournalActionsInput
  }

  export type JournalActionUncheckedCreateWithoutDemandeStageInput = {
    id?: string
    userId: string
    action: string
    cible: string
    timestamp?: Date | string
  }

  export type JournalActionCreateOrConnectWithoutDemandeStageInput = {
    where: JournalActionWhereUniqueInput
    create: XOR<JournalActionCreateWithoutDemandeStageInput, JournalActionUncheckedCreateWithoutDemandeStageInput>
  }

  export type JournalActionCreateManyDemandeStageInputEnvelope = {
    data: JournalActionCreateManyDemandeStageInput | JournalActionCreateManyDemandeStageInput[]
    skipDuplicates?: boolean
  }

  export type StageCreateWithoutDemandeStageInput = {
    id?: string
    dateDebut: Date | string
    dateFin: Date | string
    statut?: $Enums.StatutStage
    createdAt?: Date | string
    updatedAt?: Date | string
    stagiaire: StagiaireCreateNestedOneWithoutStagesInput
    structure: StructureCreateNestedOneWithoutStagesInput
    tuteur: TuteurCreateNestedOneWithoutStagesInput
  }

  export type StageUncheckedCreateWithoutDemandeStageInput = {
    id?: string
    tuteurId: string
    structureId: number
    stagiaireId: string
    dateDebut: Date | string
    dateFin: Date | string
    statut?: $Enums.StatutStage
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StageCreateOrConnectWithoutDemandeStageInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutDemandeStageInput, StageUncheckedCreateWithoutDemandeStageInput>
  }

  export type StagiaireUpsertWithoutDemandesStagesInput = {
    update: XOR<StagiaireUpdateWithoutDemandesStagesInput, StagiaireUncheckedUpdateWithoutDemandesStagesInput>
    create: XOR<StagiaireCreateWithoutDemandesStagesInput, StagiaireUncheckedCreateWithoutDemandesStagesInput>
    where?: StagiaireWhereInput
  }

  export type StagiaireUpdateToOneWithWhereWithoutDemandesStagesInput = {
    where?: StagiaireWhereInput
    data: XOR<StagiaireUpdateWithoutDemandesStagesInput, StagiaireUncheckedUpdateWithoutDemandesStagesInput>
  }

  export type StagiaireUpdateWithoutDemandesStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    stages?: StageUpdateManyWithoutStagiaireNestedInput
    structure?: StructureUpdateOneWithoutStagiairesNestedInput
    service?: ServiceUpdateOneWithoutStagiairesNestedInput
    tuteur?: TuteurUpdateOneWithoutStagiairesNestedInput
    user?: UserUpdateOneRequiredWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateWithoutDemandesStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureAffecteeId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceAffecteId?: NullableIntFieldUpdateOperationsInput | number | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    stages?: StageUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type StructureUpsertWithoutDemandesStagesInput = {
    update: XOR<StructureUpdateWithoutDemandesStagesInput, StructureUncheckedUpdateWithoutDemandesStagesInput>
    create: XOR<StructureCreateWithoutDemandesStagesInput, StructureUncheckedCreateWithoutDemandesStagesInput>
    where?: StructureWhereInput
  }

  export type StructureUpdateToOneWithWhereWithoutDemandesStagesInput = {
    where?: StructureWhereInput
    data: XOR<StructureUpdateWithoutDemandesStagesInput, StructureUncheckedUpdateWithoutDemandesStagesInput>
  }

  export type StructureUpdateWithoutDemandesStagesInput = {
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stages?: StageUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUpdateManyWithoutStructureNestedInput
    parent?: StructureUpdateOneWithoutChildrenNestedInput
    children?: StructureUpdateManyWithoutParentNestedInput
    users?: UserUpdateManyWithoutStructureNestedInput
    tuteurs?: TuteurUpdateManyWithoutStructureNestedInput
    services?: ServiceUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateWithoutDemandesStagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    stages?: StageUncheckedUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutStructureNestedInput
    children?: StructureUncheckedUpdateManyWithoutParentNestedInput
    users?: UserUncheckedUpdateManyWithoutStructureNestedInput
    tuteurs?: TuteurUncheckedUpdateManyWithoutStructureNestedInput
    services?: ServiceUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type JournalActionUpsertWithWhereUniqueWithoutDemandeStageInput = {
    where: JournalActionWhereUniqueInput
    update: XOR<JournalActionUpdateWithoutDemandeStageInput, JournalActionUncheckedUpdateWithoutDemandeStageInput>
    create: XOR<JournalActionCreateWithoutDemandeStageInput, JournalActionUncheckedCreateWithoutDemandeStageInput>
  }

  export type JournalActionUpdateWithWhereUniqueWithoutDemandeStageInput = {
    where: JournalActionWhereUniqueInput
    data: XOR<JournalActionUpdateWithoutDemandeStageInput, JournalActionUncheckedUpdateWithoutDemandeStageInput>
  }

  export type JournalActionUpdateManyWithWhereWithoutDemandeStageInput = {
    where: JournalActionScalarWhereInput
    data: XOR<JournalActionUpdateManyMutationInput, JournalActionUncheckedUpdateManyWithoutDemandeStageInput>
  }

  export type StageUpsertWithoutDemandeStageInput = {
    update: XOR<StageUpdateWithoutDemandeStageInput, StageUncheckedUpdateWithoutDemandeStageInput>
    create: XOR<StageCreateWithoutDemandeStageInput, StageUncheckedCreateWithoutDemandeStageInput>
    where?: StageWhereInput
  }

  export type StageUpdateToOneWithWhereWithoutDemandeStageInput = {
    where?: StageWhereInput
    data: XOR<StageUpdateWithoutDemandeStageInput, StageUncheckedUpdateWithoutDemandeStageInput>
  }

  export type StageUpdateWithoutDemandeStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stagiaire?: StagiaireUpdateOneRequiredWithoutStagesNestedInput
    structure?: StructureUpdateOneRequiredWithoutStagesNestedInput
    tuteur?: TuteurUpdateOneRequiredWithoutStagesNestedInput
  }

  export type StageUncheckedUpdateWithoutDemandeStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    structureId?: IntFieldUpdateOperationsInput | number
    stagiaireId?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DemandeStageCreateWithoutStageInput = {
    id?: string
    statut?: $Enums.StatutDemande
    dateDebut: Date | string
    dateFin: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    stagiaire: StagiaireCreateNestedOneWithoutDemandesStagesInput
    structureCible?: StructureCreateNestedOneWithoutDemandesStagesInput
    journalActions?: JournalActionCreateNestedManyWithoutDemandeStageInput
  }

  export type DemandeStageUncheckedCreateWithoutStageInput = {
    id?: string
    stagiaireId: string
    structureCibleId?: number | null
    statut?: $Enums.StatutDemande
    dateDebut: Date | string
    dateFin: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutDemandeStageInput
  }

  export type DemandeStageCreateOrConnectWithoutStageInput = {
    where: DemandeStageWhereUniqueInput
    create: XOR<DemandeStageCreateWithoutStageInput, DemandeStageUncheckedCreateWithoutStageInput>
  }

  export type StagiaireCreateWithoutStagesInput = {
    id?: string
    demandesStages?: DemandeStageCreateNestedManyWithoutStagiaireInput
    structure?: StructureCreateNestedOneWithoutStagiairesInput
    service?: ServiceCreateNestedOneWithoutStagiairesInput
    tuteur?: TuteurCreateNestedOneWithoutStagiairesInput
    user: UserCreateNestedOneWithoutStagiaireInput
  }

  export type StagiaireUncheckedCreateWithoutStagesInput = {
    id?: string
    userId: string
    structureAffecteeId?: number | null
    serviceAffecteId?: number | null
    tuteurId?: string | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireCreateOrConnectWithoutStagesInput = {
    where: StagiaireWhereUniqueInput
    create: XOR<StagiaireCreateWithoutStagesInput, StagiaireUncheckedCreateWithoutStagesInput>
  }

  export type StructureCreateWithoutStagesInput = {
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    demandesStages?: DemandeStageCreateNestedManyWithoutStructureCibleInput
    stagiaires?: StagiaireCreateNestedManyWithoutStructureInput
    parent?: StructureCreateNestedOneWithoutChildrenInput
    children?: StructureCreateNestedManyWithoutParentInput
    users?: UserCreateNestedManyWithoutStructureInput
    tuteurs?: TuteurCreateNestedManyWithoutStructureInput
    services?: ServiceCreateNestedManyWithoutStructureInput
  }

  export type StructureUncheckedCreateWithoutStagesInput = {
    id?: number
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: number | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutStructureInput
    children?: StructureUncheckedCreateNestedManyWithoutParentInput
    users?: UserUncheckedCreateNestedManyWithoutStructureInput
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutStructureInput
    services?: ServiceUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructureCreateOrConnectWithoutStagesInput = {
    where: StructureWhereUniqueInput
    create: XOR<StructureCreateWithoutStagesInput, StructureUncheckedCreateWithoutStagesInput>
  }

  export type TuteurCreateWithoutStagesInput = {
    id?: string
    stagiaires?: StagiaireCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurCreateNestedManyWithoutTuteurInput
    structure?: StructureCreateNestedOneWithoutTuteursInput
    service?: ServiceCreateNestedOneWithoutTuteursInput
    user: UserCreateNestedOneWithoutTuteurInput
  }

  export type TuteurUncheckedCreateWithoutStagesInput = {
    id?: string
    userId: string
    structureId?: number | null
    serviceId?: number | null
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurUncheckedCreateNestedManyWithoutTuteurInput
  }

  export type TuteurCreateOrConnectWithoutStagesInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutStagesInput, TuteurUncheckedCreateWithoutStagesInput>
  }

  export type DemandeStageUpsertWithoutStageInput = {
    update: XOR<DemandeStageUpdateWithoutStageInput, DemandeStageUncheckedUpdateWithoutStageInput>
    create: XOR<DemandeStageCreateWithoutStageInput, DemandeStageUncheckedCreateWithoutStageInput>
    where?: DemandeStageWhereInput
  }

  export type DemandeStageUpdateToOneWithWhereWithoutStageInput = {
    where?: DemandeStageWhereInput
    data: XOR<DemandeStageUpdateWithoutStageInput, DemandeStageUncheckedUpdateWithoutStageInput>
  }

  export type DemandeStageUpdateWithoutStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    stagiaire?: StagiaireUpdateOneRequiredWithoutDemandesStagesNestedInput
    structureCible?: StructureUpdateOneWithoutDemandesStagesNestedInput
    journalActions?: JournalActionUpdateManyWithoutDemandeStageNestedInput
  }

  export type DemandeStageUncheckedUpdateWithoutStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    structureCibleId?: NullableIntFieldUpdateOperationsInput | number | null
    statut?: EnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    journalActions?: JournalActionUncheckedUpdateManyWithoutDemandeStageNestedInput
  }

  export type StagiaireUpsertWithoutStagesInput = {
    update: XOR<StagiaireUpdateWithoutStagesInput, StagiaireUncheckedUpdateWithoutStagesInput>
    create: XOR<StagiaireCreateWithoutStagesInput, StagiaireUncheckedCreateWithoutStagesInput>
    where?: StagiaireWhereInput
  }

  export type StagiaireUpdateToOneWithWhereWithoutStagesInput = {
    where?: StagiaireWhereInput
    data: XOR<StagiaireUpdateWithoutStagesInput, StagiaireUncheckedUpdateWithoutStagesInput>
  }

  export type StagiaireUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    demandesStages?: DemandeStageUpdateManyWithoutStagiaireNestedInput
    structure?: StructureUpdateOneWithoutStagiairesNestedInput
    service?: ServiceUpdateOneWithoutStagiairesNestedInput
    tuteur?: TuteurUpdateOneWithoutStagiairesNestedInput
    user?: UserUpdateOneRequiredWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureAffecteeId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceAffecteId?: NullableIntFieldUpdateOperationsInput | number | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type StructureUpsertWithoutStagesInput = {
    update: XOR<StructureUpdateWithoutStagesInput, StructureUncheckedUpdateWithoutStagesInput>
    create: XOR<StructureCreateWithoutStagesInput, StructureUncheckedCreateWithoutStagesInput>
    where?: StructureWhereInput
  }

  export type StructureUpdateToOneWithWhereWithoutStagesInput = {
    where?: StructureWhereInput
    data: XOR<StructureUpdateWithoutStagesInput, StructureUncheckedUpdateWithoutStagesInput>
  }

  export type StructureUpdateWithoutStagesInput = {
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demandesStages?: DemandeStageUpdateManyWithoutStructureCibleNestedInput
    stagiaires?: StagiaireUpdateManyWithoutStructureNestedInput
    parent?: StructureUpdateOneWithoutChildrenNestedInput
    children?: StructureUpdateManyWithoutParentNestedInput
    users?: UserUpdateManyWithoutStructureNestedInput
    tuteurs?: TuteurUpdateManyWithoutStructureNestedInput
    services?: ServiceUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateWithoutStagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutStructureNestedInput
    children?: StructureUncheckedUpdateManyWithoutParentNestedInput
    users?: UserUncheckedUpdateManyWithoutStructureNestedInput
    tuteurs?: TuteurUncheckedUpdateManyWithoutStructureNestedInput
    services?: ServiceUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type TuteurUpsertWithoutStagesInput = {
    update: XOR<TuteurUpdateWithoutStagesInput, TuteurUncheckedUpdateWithoutStagesInput>
    create: XOR<TuteurCreateWithoutStagesInput, TuteurUncheckedCreateWithoutStagesInput>
    where?: TuteurWhereInput
  }

  export type TuteurUpdateToOneWithWhereWithoutStagesInput = {
    where?: TuteurWhereInput
    data: XOR<TuteurUpdateWithoutStagesInput, TuteurUncheckedUpdateWithoutStagesInput>
  }

  export type TuteurUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaires?: StagiaireUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUpdateManyWithoutTuteurNestedInput
    structure?: StructureUpdateOneWithoutTuteursNestedInput
    service?: ServiceUpdateOneWithoutTuteursNestedInput
    user?: UserUpdateOneRequiredWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceId?: NullableIntFieldUpdateOperationsInput | number | null
    stagiaires?: StagiaireUncheckedUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUncheckedUpdateManyWithoutTuteurNestedInput
  }

  export type UserCreateWithoutMessagesRecusInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUsersInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationCreateNestedManyWithoutStagiaireInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesRecusInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structureId?: number | null
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestUncheckedCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationUncheckedCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationUncheckedCreateNestedManyWithoutStagiaireInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesRecusInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesRecusInput, UserUncheckedCreateWithoutMessagesRecusInput>
  }

  export type UserCreateWithoutMessagesSentInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
    messagesRecus?: MessageCreateNestedManyWithoutDestinataireInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUsersInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationCreateNestedManyWithoutStagiaireInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesSentInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structureId?: number | null
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestUncheckedCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
    messagesRecus?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationUncheckedCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationUncheckedCreateNestedManyWithoutStagiaireInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesSentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
  }

  export type UserUpsertWithoutMessagesRecusInput = {
    update: XOR<UserUpdateWithoutMessagesRecusInput, UserUncheckedUpdateWithoutMessagesRecusInput>
    create: XOR<UserCreateWithoutMessagesRecusInput, UserUncheckedCreateWithoutMessagesRecusInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesRecusInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesRecusInput, UserUncheckedUpdateWithoutMessagesRecusInput>
  }

  export type UserUpdateWithoutMessagesRecusInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUsersNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesRecusInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUncheckedUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUncheckedUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUncheckedUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutMessagesSentInput = {
    update: XOR<UserUpdateWithoutMessagesSentInput, UserUncheckedUpdateWithoutMessagesSentInput>
    create: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesSentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesSentInput, UserUncheckedUpdateWithoutMessagesSentInput>
  }

  export type UserUpdateWithoutMessagesSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUpdateManyWithoutDestinataireNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUsersNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUncheckedUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUncheckedUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUncheckedUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TuteurCreateWithoutThemesInput = {
    id?: string
    stages?: StageCreateNestedManyWithoutTuteurInput
    stagiaires?: StagiaireCreateNestedManyWithoutTuteurInput
    structure?: StructureCreateNestedOneWithoutTuteursInput
    service?: ServiceCreateNestedOneWithoutTuteursInput
    user: UserCreateNestedOneWithoutTuteurInput
  }

  export type TuteurUncheckedCreateWithoutThemesInput = {
    id?: string
    userId: string
    structureId?: number | null
    serviceId?: number | null
    stages?: StageUncheckedCreateNestedManyWithoutTuteurInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutTuteurInput
  }

  export type TuteurCreateOrConnectWithoutThemesInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutThemesInput, TuteurUncheckedCreateWithoutThemesInput>
  }

  export type TuteurUpsertWithoutThemesInput = {
    update: XOR<TuteurUpdateWithoutThemesInput, TuteurUncheckedUpdateWithoutThemesInput>
    create: XOR<TuteurCreateWithoutThemesInput, TuteurUncheckedCreateWithoutThemesInput>
    where?: TuteurWhereInput
  }

  export type TuteurUpdateToOneWithWhereWithoutThemesInput = {
    where?: TuteurWhereInput
    data: XOR<TuteurUpdateWithoutThemesInput, TuteurUncheckedUpdateWithoutThemesInput>
  }

  export type TuteurUpdateWithoutThemesInput = {
    id?: StringFieldUpdateOperationsInput | string
    stages?: StageUpdateManyWithoutTuteurNestedInput
    stagiaires?: StagiaireUpdateManyWithoutTuteurNestedInput
    structure?: StructureUpdateOneWithoutTuteursNestedInput
    service?: ServiceUpdateOneWithoutTuteursNestedInput
    user?: UserUpdateOneRequiredWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateWithoutThemesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceId?: NullableIntFieldUpdateOperationsInput | number | null
    stages?: StageUncheckedUpdateManyWithoutTuteurNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutTuteurNestedInput
  }

  export type DemandeStageCreateWithoutJournalActionsInput = {
    id?: string
    statut?: $Enums.StatutDemande
    dateDebut: Date | string
    dateFin: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    stagiaire: StagiaireCreateNestedOneWithoutDemandesStagesInput
    structureCible?: StructureCreateNestedOneWithoutDemandesStagesInput
    stage?: StageCreateNestedOneWithoutDemandeStageInput
  }

  export type DemandeStageUncheckedCreateWithoutJournalActionsInput = {
    id?: string
    stagiaireId: string
    structureCibleId?: number | null
    statut?: $Enums.StatutDemande
    dateDebut: Date | string
    dateFin: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    stage?: StageUncheckedCreateNestedOneWithoutDemandeStageInput
  }

  export type DemandeStageCreateOrConnectWithoutJournalActionsInput = {
    where: DemandeStageWhereUniqueInput
    create: XOR<DemandeStageCreateWithoutJournalActionsInput, DemandeStageUncheckedCreateWithoutJournalActionsInput>
  }

  export type UserCreateWithoutJournalActionsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    messagesRecus?: MessageCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUsersInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationCreateNestedManyWithoutStagiaireInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutJournalActionsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structureId?: number | null
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestUncheckedCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    messagesRecus?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationUncheckedCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationUncheckedCreateNestedManyWithoutStagiaireInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutJournalActionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutJournalActionsInput, UserUncheckedCreateWithoutJournalActionsInput>
  }

  export type DemandeStageUpsertWithoutJournalActionsInput = {
    update: XOR<DemandeStageUpdateWithoutJournalActionsInput, DemandeStageUncheckedUpdateWithoutJournalActionsInput>
    create: XOR<DemandeStageCreateWithoutJournalActionsInput, DemandeStageUncheckedCreateWithoutJournalActionsInput>
    where?: DemandeStageWhereInput
  }

  export type DemandeStageUpdateToOneWithWhereWithoutJournalActionsInput = {
    where?: DemandeStageWhereInput
    data: XOR<DemandeStageUpdateWithoutJournalActionsInput, DemandeStageUncheckedUpdateWithoutJournalActionsInput>
  }

  export type DemandeStageUpdateWithoutJournalActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    stagiaire?: StagiaireUpdateOneRequiredWithoutDemandesStagesNestedInput
    structureCible?: StructureUpdateOneWithoutDemandesStagesNestedInput
    stage?: StageUpdateOneWithoutDemandeStageNestedInput
  }

  export type DemandeStageUncheckedUpdateWithoutJournalActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    structureCibleId?: NullableIntFieldUpdateOperationsInput | number | null
    statut?: EnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    stage?: StageUncheckedUpdateOneWithoutDemandeStageNestedInput
  }

  export type UserUpsertWithoutJournalActionsInput = {
    update: XOR<UserUpdateWithoutJournalActionsInput, UserUncheckedUpdateWithoutJournalActionsInput>
    create: XOR<UserCreateWithoutJournalActionsInput, UserUncheckedCreateWithoutJournalActionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutJournalActionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutJournalActionsInput, UserUncheckedUpdateWithoutJournalActionsInput>
  }

  export type UserUpdateWithoutJournalActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    messagesRecus?: MessageUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUsersNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutJournalActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUncheckedUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    messagesRecus?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUncheckedUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUncheckedUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutDemandesStageInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
    messagesRecus?: MessageCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUsersInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationCreateNestedManyWithoutStagiaireInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDemandesStageInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structureId?: number | null
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
    messagesRecus?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationUncheckedCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationUncheckedCreateNestedManyWithoutStagiaireInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDemandesStageInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDemandesStageInput, UserUncheckedCreateWithoutDemandesStageInput>
  }

  export type UserUpsertWithoutDemandesStageInput = {
    update: XOR<UserUpdateWithoutDemandesStageInput, UserUncheckedUpdateWithoutDemandesStageInput>
    create: XOR<UserCreateWithoutDemandesStageInput, UserUncheckedCreateWithoutDemandesStageInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDemandesStageInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDemandesStageInput, UserUncheckedUpdateWithoutDemandesStageInput>
  }

  export type UserUpdateWithoutDemandesStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUsersNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDemandesStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUncheckedUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUncheckedUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
    messagesRecus?: MessageCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUsersInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationCreateNestedManyWithoutStagiaireInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structureId?: number | null
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestUncheckedCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
    messagesRecus?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationUncheckedCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationUncheckedCreateNestedManyWithoutStagiaireInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUsersNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUncheckedUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUncheckedUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUncheckedUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutEvaluationsAsStagiaireInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
    messagesRecus?: MessageCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUsersInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationCreateNestedManyWithoutTuteurInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEvaluationsAsStagiaireInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structureId?: number | null
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestUncheckedCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
    messagesRecus?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationUncheckedCreateNestedManyWithoutTuteurInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEvaluationsAsStagiaireInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEvaluationsAsStagiaireInput, UserUncheckedCreateWithoutEvaluationsAsStagiaireInput>
  }

  export type UserCreateWithoutEvaluationsAsTuteurInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
    messagesRecus?: MessageCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUsersInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    evaluationsAsStagiaire?: EvaluationCreateNestedManyWithoutStagiaireInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEvaluationsAsTuteurInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structureId?: number | null
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestUncheckedCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
    messagesRecus?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    evaluationsAsStagiaire?: EvaluationUncheckedCreateNestedManyWithoutStagiaireInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEvaluationsAsTuteurInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEvaluationsAsTuteurInput, UserUncheckedCreateWithoutEvaluationsAsTuteurInput>
  }

  export type UserUpsertWithoutEvaluationsAsStagiaireInput = {
    update: XOR<UserUpdateWithoutEvaluationsAsStagiaireInput, UserUncheckedUpdateWithoutEvaluationsAsStagiaireInput>
    create: XOR<UserCreateWithoutEvaluationsAsStagiaireInput, UserUncheckedCreateWithoutEvaluationsAsStagiaireInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEvaluationsAsStagiaireInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEvaluationsAsStagiaireInput, UserUncheckedUpdateWithoutEvaluationsAsStagiaireInput>
  }

  export type UserUpdateWithoutEvaluationsAsStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUsersNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUpdateManyWithoutTuteurNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEvaluationsAsStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUncheckedUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUncheckedUpdateManyWithoutTuteurNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutEvaluationsAsTuteurInput = {
    update: XOR<UserUpdateWithoutEvaluationsAsTuteurInput, UserUncheckedUpdateWithoutEvaluationsAsTuteurInput>
    create: XOR<UserCreateWithoutEvaluationsAsTuteurInput, UserUncheckedCreateWithoutEvaluationsAsTuteurInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEvaluationsAsTuteurInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEvaluationsAsTuteurInput, UserUncheckedUpdateWithoutEvaluationsAsTuteurInput>
  }

  export type UserUpdateWithoutEvaluationsAsTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUsersNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    evaluationsAsStagiaire?: EvaluationUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEvaluationsAsTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUncheckedUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    evaluationsAsStagiaire?: EvaluationUncheckedUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutDocumentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
    messagesRecus?: MessageCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUsersInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationCreateNestedManyWithoutStagiaireInput
  }

  export type UserUncheckedCreateWithoutDocumentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    structureId?: number | null
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
    demandesStage?: StageRequestUncheckedCreateNestedManyWithoutStagiaireInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
    messagesRecus?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    evaluationsAsTuteur?: EvaluationUncheckedCreateNestedManyWithoutTuteurInput
    evaluationsAsStagiaire?: EvaluationUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type UserCreateOrConnectWithoutDocumentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
  }

  export type UserUpsertWithoutDocumentsInput = {
    update: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUsersNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUpdateManyWithoutStagiaireNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUncheckedUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUncheckedUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type StructureCreateWithoutServicesInput = {
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    demandesStages?: DemandeStageCreateNestedManyWithoutStructureCibleInput
    stages?: StageCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireCreateNestedManyWithoutStructureInput
    parent?: StructureCreateNestedOneWithoutChildrenInput
    children?: StructureCreateNestedManyWithoutParentInput
    users?: UserCreateNestedManyWithoutStructureInput
    tuteurs?: TuteurCreateNestedManyWithoutStructureInput
  }

  export type StructureUncheckedCreateWithoutServicesInput = {
    id?: number
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: number | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput
    stages?: StageUncheckedCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutStructureInput
    children?: StructureUncheckedCreateNestedManyWithoutParentInput
    users?: UserUncheckedCreateNestedManyWithoutStructureInput
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructureCreateOrConnectWithoutServicesInput = {
    where: StructureWhereUniqueInput
    create: XOR<StructureCreateWithoutServicesInput, StructureUncheckedCreateWithoutServicesInput>
  }

  export type TuteurCreateWithoutServiceInput = {
    id?: string
    stages?: StageCreateNestedManyWithoutTuteurInput
    stagiaires?: StagiaireCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurCreateNestedManyWithoutTuteurInput
    structure?: StructureCreateNestedOneWithoutTuteursInput
    user: UserCreateNestedOneWithoutTuteurInput
  }

  export type TuteurUncheckedCreateWithoutServiceInput = {
    id?: string
    userId: string
    structureId?: number | null
    stages?: StageUncheckedCreateNestedManyWithoutTuteurInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurUncheckedCreateNestedManyWithoutTuteurInput
  }

  export type TuteurCreateOrConnectWithoutServiceInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutServiceInput, TuteurUncheckedCreateWithoutServiceInput>
  }

  export type TuteurCreateManyServiceInputEnvelope = {
    data: TuteurCreateManyServiceInput | TuteurCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type StagiaireCreateWithoutServiceInput = {
    id?: string
    demandesStages?: DemandeStageCreateNestedManyWithoutStagiaireInput
    stages?: StageCreateNestedManyWithoutStagiaireInput
    structure?: StructureCreateNestedOneWithoutStagiairesInput
    tuteur?: TuteurCreateNestedOneWithoutStagiairesInput
    user: UserCreateNestedOneWithoutStagiaireInput
  }

  export type StagiaireUncheckedCreateWithoutServiceInput = {
    id?: string
    userId: string
    structureAffecteeId?: number | null
    tuteurId?: string | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput
    stages?: StageUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireCreateOrConnectWithoutServiceInput = {
    where: StagiaireWhereUniqueInput
    create: XOR<StagiaireCreateWithoutServiceInput, StagiaireUncheckedCreateWithoutServiceInput>
  }

  export type StagiaireCreateManyServiceInputEnvelope = {
    data: StagiaireCreateManyServiceInput | StagiaireCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type StructureUpsertWithoutServicesInput = {
    update: XOR<StructureUpdateWithoutServicesInput, StructureUncheckedUpdateWithoutServicesInput>
    create: XOR<StructureCreateWithoutServicesInput, StructureUncheckedCreateWithoutServicesInput>
    where?: StructureWhereInput
  }

  export type StructureUpdateToOneWithWhereWithoutServicesInput = {
    where?: StructureWhereInput
    data: XOR<StructureUpdateWithoutServicesInput, StructureUncheckedUpdateWithoutServicesInput>
  }

  export type StructureUpdateWithoutServicesInput = {
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demandesStages?: DemandeStageUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUpdateManyWithoutStructureNestedInput
    parent?: StructureUpdateOneWithoutChildrenNestedInput
    children?: StructureUpdateManyWithoutParentNestedInput
    users?: UserUpdateManyWithoutStructureNestedInput
    tuteurs?: TuteurUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUncheckedUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutStructureNestedInput
    children?: StructureUncheckedUpdateManyWithoutParentNestedInput
    users?: UserUncheckedUpdateManyWithoutStructureNestedInput
    tuteurs?: TuteurUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type TuteurUpsertWithWhereUniqueWithoutServiceInput = {
    where: TuteurWhereUniqueInput
    update: XOR<TuteurUpdateWithoutServiceInput, TuteurUncheckedUpdateWithoutServiceInput>
    create: XOR<TuteurCreateWithoutServiceInput, TuteurUncheckedCreateWithoutServiceInput>
  }

  export type TuteurUpdateWithWhereUniqueWithoutServiceInput = {
    where: TuteurWhereUniqueInput
    data: XOR<TuteurUpdateWithoutServiceInput, TuteurUncheckedUpdateWithoutServiceInput>
  }

  export type TuteurUpdateManyWithWhereWithoutServiceInput = {
    where: TuteurScalarWhereInput
    data: XOR<TuteurUpdateManyMutationInput, TuteurUncheckedUpdateManyWithoutServiceInput>
  }

  export type StagiaireUpsertWithWhereUniqueWithoutServiceInput = {
    where: StagiaireWhereUniqueInput
    update: XOR<StagiaireUpdateWithoutServiceInput, StagiaireUncheckedUpdateWithoutServiceInput>
    create: XOR<StagiaireCreateWithoutServiceInput, StagiaireUncheckedCreateWithoutServiceInput>
  }

  export type StagiaireUpdateWithWhereUniqueWithoutServiceInput = {
    where: StagiaireWhereUniqueInput
    data: XOR<StagiaireUpdateWithoutServiceInput, StagiaireUncheckedUpdateWithoutServiceInput>
  }

  export type StagiaireUpdateManyWithWhereWithoutServiceInput = {
    where: StagiaireScalarWhereInput
    data: XOR<StagiaireUpdateManyMutationInput, StagiaireUncheckedUpdateManyWithoutServiceInput>
  }

  export type StageRequestCreateManyStagiaireInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    type: string
    departement: string
    dateDebut: Date | string
    dateFin: Date | string
    motivation: string
    competences: string
    experience: string
    universite: string
    domaineEtude: string
    anneeEtude: string
    code_suivi?: string | null
    photo?: string | null
    candidate2Email?: string | null
    candidate2Photo?: string | null
    requiresSecondCandidateValidation?: boolean
    secondCandidateValidated?: boolean
    secondCandidateUserId?: string | null
    secondCandidateValidationToken?: string | null
    secondCandidateValidationExpiresAt?: Date | string | null
    cv?: string | null
    lettreMotivation?: string | null
    carteIdentite?: string | null
    inscriptionUniversitaire?: string | null
    recommandation?: string | null
    autresDocuments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JournalActionCreateManyUserInput = {
    id?: string
    action: string
    cible: string
    timestamp?: Date | string
    demandeStageId?: string | null
  }

  export type MessageCreateManyDestinataireInput = {
    id?: string
    expediteurId: string
    contenu: string
    lu?: boolean
    createdAt?: Date | string
  }

  export type MessageCreateManyExpediteurInput = {
    id?: string
    destinataireId: string
    contenu: string
    lu?: boolean
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type: string
    title: string
    message: string
    role?: $Enums.UserRole | null
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EvaluationCreateManyTuteurInput = {
    id?: string
    stagiaireId: string
    criteres: JsonNullValueInput | InputJsonValue
    commentaire?: string | null
    createdAt?: Date | string
  }

  export type EvaluationCreateManyStagiaireInput = {
    id?: string
    tuteurId: string
    criteres: JsonNullValueInput | InputJsonValue
    commentaire?: string | null
    createdAt?: Date | string
  }

  export type DocumentCreateManyUserInput = {
    id?: string
    type: string
    name: string
    path: string
    uploadedAt?: Date | string
  }

  export type StageRequestUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    motivation?: StringFieldUpdateOperationsInput | string
    competences?: StringFieldUpdateOperationsInput | string
    experience?: StringFieldUpdateOperationsInput | string
    universite?: StringFieldUpdateOperationsInput | string
    domaineEtude?: StringFieldUpdateOperationsInput | string
    anneeEtude?: StringFieldUpdateOperationsInput | string
    code_suivi?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    candidate2Email?: NullableStringFieldUpdateOperationsInput | string | null
    candidate2Photo?: NullableStringFieldUpdateOperationsInput | string | null
    requiresSecondCandidateValidation?: BoolFieldUpdateOperationsInput | boolean
    secondCandidateValidated?: BoolFieldUpdateOperationsInput | boolean
    secondCandidateUserId?: NullableStringFieldUpdateOperationsInput | string | null
    secondCandidateValidationToken?: NullableStringFieldUpdateOperationsInput | string | null
    secondCandidateValidationExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    lettreMotivation?: NullableStringFieldUpdateOperationsInput | string | null
    carteIdentite?: NullableStringFieldUpdateOperationsInput | string | null
    inscriptionUniversitaire?: NullableStringFieldUpdateOperationsInput | string | null
    recommandation?: NullableStringFieldUpdateOperationsInput | string | null
    autresDocuments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StageRequestUncheckedUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    motivation?: StringFieldUpdateOperationsInput | string
    competences?: StringFieldUpdateOperationsInput | string
    experience?: StringFieldUpdateOperationsInput | string
    universite?: StringFieldUpdateOperationsInput | string
    domaineEtude?: StringFieldUpdateOperationsInput | string
    anneeEtude?: StringFieldUpdateOperationsInput | string
    code_suivi?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    candidate2Email?: NullableStringFieldUpdateOperationsInput | string | null
    candidate2Photo?: NullableStringFieldUpdateOperationsInput | string | null
    requiresSecondCandidateValidation?: BoolFieldUpdateOperationsInput | boolean
    secondCandidateValidated?: BoolFieldUpdateOperationsInput | boolean
    secondCandidateUserId?: NullableStringFieldUpdateOperationsInput | string | null
    secondCandidateValidationToken?: NullableStringFieldUpdateOperationsInput | string | null
    secondCandidateValidationExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    lettreMotivation?: NullableStringFieldUpdateOperationsInput | string | null
    carteIdentite?: NullableStringFieldUpdateOperationsInput | string | null
    inscriptionUniversitaire?: NullableStringFieldUpdateOperationsInput | string | null
    recommandation?: NullableStringFieldUpdateOperationsInput | string | null
    autresDocuments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StageRequestUncheckedUpdateManyWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    motivation?: StringFieldUpdateOperationsInput | string
    competences?: StringFieldUpdateOperationsInput | string
    experience?: StringFieldUpdateOperationsInput | string
    universite?: StringFieldUpdateOperationsInput | string
    domaineEtude?: StringFieldUpdateOperationsInput | string
    anneeEtude?: StringFieldUpdateOperationsInput | string
    code_suivi?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    candidate2Email?: NullableStringFieldUpdateOperationsInput | string | null
    candidate2Photo?: NullableStringFieldUpdateOperationsInput | string | null
    requiresSecondCandidateValidation?: BoolFieldUpdateOperationsInput | boolean
    secondCandidateValidated?: BoolFieldUpdateOperationsInput | boolean
    secondCandidateUserId?: NullableStringFieldUpdateOperationsInput | string | null
    secondCandidateValidationToken?: NullableStringFieldUpdateOperationsInput | string | null
    secondCandidateValidationExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    lettreMotivation?: NullableStringFieldUpdateOperationsInput | string | null
    carteIdentite?: NullableStringFieldUpdateOperationsInput | string | null
    inscriptionUniversitaire?: NullableStringFieldUpdateOperationsInput | string | null
    recommandation?: NullableStringFieldUpdateOperationsInput | string | null
    autresDocuments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JournalActionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    demandeStage?: DemandeStageUpdateOneWithoutJournalActionsNestedInput
  }

  export type JournalActionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    demandeStageId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JournalActionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    demandeStageId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUpdateWithoutDestinataireInput = {
    id?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expediteur?: UserUpdateOneRequiredWithoutMessagesSentNestedInput
  }

  export type MessageUncheckedUpdateWithoutDestinataireInput = {
    id?: StringFieldUpdateOperationsInput | string
    expediteurId?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutDestinataireInput = {
    id?: StringFieldUpdateOperationsInput | string
    expediteurId?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutExpediteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    destinataire?: UserUpdateOneRequiredWithoutMessagesRecusNestedInput
  }

  export type MessageUncheckedUpdateWithoutExpediteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    destinataireId?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutExpediteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    destinataireId?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EvaluationUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    criteres?: JsonNullValueInput | InputJsonValue
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stagiaire?: UserUpdateOneRequiredWithoutEvaluationsAsStagiaireNestedInput
  }

  export type EvaluationUncheckedUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    criteres?: JsonNullValueInput | InputJsonValue
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EvaluationUncheckedUpdateManyWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    criteres?: JsonNullValueInput | InputJsonValue
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EvaluationUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    criteres?: JsonNullValueInput | InputJsonValue
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tuteur?: UserUpdateOneRequiredWithoutEvaluationsAsTuteurNestedInput
  }

  export type EvaluationUncheckedUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    criteres?: JsonNullValueInput | InputJsonValue
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EvaluationUncheckedUpdateManyWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    criteres?: JsonNullValueInput | InputJsonValue
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DemandeStageCreateManyStructureCibleInput = {
    id?: string
    stagiaireId: string
    statut?: $Enums.StatutDemande
    dateDebut: Date | string
    dateFin: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StageCreateManyStructureInput = {
    id?: string
    demandeStageId: string
    tuteurId: string
    stagiaireId: string
    dateDebut: Date | string
    dateFin: Date | string
    statut?: $Enums.StatutStage
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StagiaireCreateManyStructureInput = {
    id?: string
    userId: string
    serviceAffecteId?: number | null
    tuteurId?: string | null
  }

  export type StructureCreateManyParentInput = {
    id?: number
    nomStructure: string
    sigle?: string | null
    type?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyStructureInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifMessages?: boolean | null
    notifEvaluation?: boolean | null
    notifRapports?: boolean | null
  }

  export type TuteurCreateManyStructureInput = {
    id?: string
    userId: string
    serviceId?: number | null
  }

  export type ServiceCreateManyStructureInput = {
    id?: number
    nomService: string
    description?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DemandeStageUpdateWithoutStructureCibleInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    stagiaire?: StagiaireUpdateOneRequiredWithoutDemandesStagesNestedInput
    journalActions?: JournalActionUpdateManyWithoutDemandeStageNestedInput
    stage?: StageUpdateOneWithoutDemandeStageNestedInput
  }

  export type DemandeStageUncheckedUpdateWithoutStructureCibleInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    journalActions?: JournalActionUncheckedUpdateManyWithoutDemandeStageNestedInput
    stage?: StageUncheckedUpdateOneWithoutDemandeStageNestedInput
  }

  export type DemandeStageUncheckedUpdateManyWithoutStructureCibleInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StageUpdateWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demandeStage?: DemandeStageUpdateOneRequiredWithoutStageNestedInput
    stagiaire?: StagiaireUpdateOneRequiredWithoutStagesNestedInput
    tuteur?: TuteurUpdateOneRequiredWithoutStagesNestedInput
  }

  export type StageUncheckedUpdateWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    demandeStageId?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StageUncheckedUpdateManyWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    demandeStageId?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StagiaireUpdateWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    demandesStages?: DemandeStageUpdateManyWithoutStagiaireNestedInput
    stages?: StageUpdateManyWithoutStagiaireNestedInput
    service?: ServiceUpdateOneWithoutStagiairesNestedInput
    tuteur?: TuteurUpdateOneWithoutStagiairesNestedInput
    user?: UserUpdateOneRequiredWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serviceAffecteId?: NullableIntFieldUpdateOperationsInput | number | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput
    stages?: StageUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateManyWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serviceAffecteId?: NullableIntFieldUpdateOperationsInput | number | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StructureUpdateWithoutParentInput = {
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demandesStages?: DemandeStageUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUpdateManyWithoutStructureNestedInput
    children?: StructureUpdateManyWithoutParentNestedInput
    users?: UserUpdateManyWithoutStructureNestedInput
    tuteurs?: TuteurUpdateManyWithoutStructureNestedInput
    services?: ServiceUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUncheckedUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutStructureNestedInput
    children?: StructureUncheckedUpdateManyWithoutParentNestedInput
    users?: UserUncheckedUpdateManyWithoutStructureNestedInput
    tuteurs?: TuteurUncheckedUpdateManyWithoutStructureNestedInput
    services?: ServiceUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateManyWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomStructure?: StringFieldUpdateOperationsInput | string
    sigle?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
    demandesStage?: StageRequestUncheckedUpdateManyWithoutStagiaireNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
    messagesRecus?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    evaluationsAsTuteur?: EvaluationUncheckedUpdateManyWithoutTuteurNestedInput
    evaluationsAsStagiaire?: EvaluationUncheckedUpdateManyWithoutStagiaireNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifMessages?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifEvaluation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifRapports?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type TuteurUpdateWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    stages?: StageUpdateManyWithoutTuteurNestedInput
    stagiaires?: StagiaireUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUpdateManyWithoutTuteurNestedInput
    service?: ServiceUpdateOneWithoutTuteursNestedInput
    user?: UserUpdateOneRequiredWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableIntFieldUpdateOperationsInput | number | null
    stages?: StageUncheckedUpdateManyWithoutTuteurNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUncheckedUpdateManyWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateManyWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ServiceUpdateWithoutStructureInput = {
    nomService?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tuteurs?: TuteurUpdateManyWithoutServiceNestedInput
    stagiaires?: StagiaireUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutStructureInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomService?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tuteurs?: TuteurUncheckedUpdateManyWithoutServiceNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateManyWithoutStructureInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomService?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StageCreateManyTuteurInput = {
    id?: string
    demandeStageId: string
    structureId: number
    stagiaireId: string
    dateDebut: Date | string
    dateFin: Date | string
    statut?: $Enums.StatutStage
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StagiaireCreateManyTuteurInput = {
    id?: string
    userId: string
    structureAffecteeId?: number | null
    serviceAffecteId?: number | null
  }

  export type ThemeTuteurCreateManyTuteurInput = {
    id?: string
    titre: string
    description?: string | null
    disponible?: boolean
  }

  export type StageUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demandeStage?: DemandeStageUpdateOneRequiredWithoutStageNestedInput
    stagiaire?: StagiaireUpdateOneRequiredWithoutStagesNestedInput
    structure?: StructureUpdateOneRequiredWithoutStagesNestedInput
  }

  export type StageUncheckedUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    demandeStageId?: StringFieldUpdateOperationsInput | string
    structureId?: IntFieldUpdateOperationsInput | number
    stagiaireId?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StageUncheckedUpdateManyWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    demandeStageId?: StringFieldUpdateOperationsInput | string
    structureId?: IntFieldUpdateOperationsInput | number
    stagiaireId?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StagiaireUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    demandesStages?: DemandeStageUpdateManyWithoutStagiaireNestedInput
    stages?: StageUpdateManyWithoutStagiaireNestedInput
    structure?: StructureUpdateOneWithoutStagiairesNestedInput
    service?: ServiceUpdateOneWithoutStagiairesNestedInput
    user?: UserUpdateOneRequiredWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureAffecteeId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceAffecteId?: NullableIntFieldUpdateOperationsInput | number | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput
    stages?: StageUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateManyWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureAffecteeId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceAffecteId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ThemeTuteurUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disponible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ThemeTuteurUncheckedUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disponible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ThemeTuteurUncheckedUpdateManyWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disponible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DemandeStageCreateManyStagiaireInput = {
    id?: string
    structureCibleId?: number | null
    statut?: $Enums.StatutDemande
    dateDebut: Date | string
    dateFin: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StageCreateManyStagiaireInput = {
    id?: string
    demandeStageId: string
    tuteurId: string
    structureId: number
    dateDebut: Date | string
    dateFin: Date | string
    statut?: $Enums.StatutStage
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DemandeStageUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    structureCible?: StructureUpdateOneWithoutDemandesStagesNestedInput
    journalActions?: JournalActionUpdateManyWithoutDemandeStageNestedInput
    stage?: StageUpdateOneWithoutDemandeStageNestedInput
  }

  export type DemandeStageUncheckedUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    structureCibleId?: NullableIntFieldUpdateOperationsInput | number | null
    statut?: EnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    journalActions?: JournalActionUncheckedUpdateManyWithoutDemandeStageNestedInput
    stage?: StageUncheckedUpdateOneWithoutDemandeStageNestedInput
  }

  export type DemandeStageUncheckedUpdateManyWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    structureCibleId?: NullableIntFieldUpdateOperationsInput | number | null
    statut?: EnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StageUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demandeStage?: DemandeStageUpdateOneRequiredWithoutStageNestedInput
    structure?: StructureUpdateOneRequiredWithoutStagesNestedInput
    tuteur?: TuteurUpdateOneRequiredWithoutStagesNestedInput
  }

  export type StageUncheckedUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    demandeStageId?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    structureId?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StageUncheckedUpdateManyWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    demandeStageId?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    structureId?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    statut?: EnumStatutStageFieldUpdateOperationsInput | $Enums.StatutStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalActionCreateManyDemandeStageInput = {
    id?: string
    userId: string
    action: string
    cible: string
    timestamp?: Date | string
  }

  export type JournalActionUpdateWithoutDemandeStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutJournalActionsNestedInput
  }

  export type JournalActionUncheckedUpdateWithoutDemandeStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalActionUncheckedUpdateManyWithoutDemandeStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TuteurCreateManyServiceInput = {
    id?: string
    userId: string
    structureId?: number | null
  }

  export type StagiaireCreateManyServiceInput = {
    id?: string
    userId: string
    structureAffecteeId?: number | null
    tuteurId?: string | null
  }

  export type TuteurUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    stages?: StageUpdateManyWithoutTuteurNestedInput
    stagiaires?: StagiaireUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUpdateManyWithoutTuteurNestedInput
    structure?: StructureUpdateOneWithoutTuteursNestedInput
    user?: UserUpdateOneRequiredWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
    stages?: StageUncheckedUpdateManyWithoutTuteurNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUncheckedUpdateManyWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StagiaireUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    demandesStages?: DemandeStageUpdateManyWithoutStagiaireNestedInput
    stages?: StageUpdateManyWithoutStagiaireNestedInput
    structure?: StructureUpdateOneWithoutStagiairesNestedInput
    tuteur?: TuteurUpdateOneWithoutStagiairesNestedInput
    user?: UserUpdateOneRequiredWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureAffecteeId?: NullableIntFieldUpdateOperationsInput | number | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput
    stages?: StageUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    structureAffecteeId?: NullableIntFieldUpdateOperationsInput | number | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}